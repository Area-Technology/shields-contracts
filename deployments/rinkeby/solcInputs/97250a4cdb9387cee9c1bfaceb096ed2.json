{
  "language": "Solidity",
  "sources": {
    "contracts/test/ShieldsTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport '../Shields.sol';\nimport '../interfaces/IFieldSVGs.sol';\nimport '../interfaces/IHardwareSVGs.sol';\nimport '../interfaces/IFrameSVGs.sol';\nimport '../interfaces/IShieldBadgeSVGs.sol';\n\n/// @dev Generate Customizable Shields\ncontract ShieldsTest is Shields {\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        IShieldDescriptor _shieldDescriptor,\n        address _makerBadgeRecipient,\n        address _granteeBadgeRecipient\n    ) Shields(name_, symbol_, _shieldDescriptor, _makerBadgeRecipient, _granteeBadgeRecipient) {}\n\n    function getNextId() external view returns (uint256) {\n        return _nextId;\n    }\n\n    function setNextId(uint256 nextId) external {\n        _nextId = nextId;\n    }\n}\n"
    },
    "contracts/Shields.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './interfaces/ICategories.sol';\nimport './interfaces/IShields.sol';\nimport './interfaces/IShieldDescriptor.sol';\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\n/// @dev Generate Customizable Shields\ncontract Shields is ERC721, IShields, Ownable {\n    event ShieldBuilt(\n        uint256 tokenId,\n        uint16 field,\n        uint16 hardware,\n        uint16 frame,\n        uint24[4] colors,\n        ShieldBadge shieldBadge\n    );\n\n    IShieldDescriptor public immutable shieldDescriptor;\n\n    uint256 constant makerBadgeThreshold = 5;\n\n    uint256 constant makerPremintThreshold = 100;\n    uint256 constant granteePremintThreshold = 500;\n    uint256 constant standardMintMax = 5000;\n    uint256 constant individualMintMax = 5;\n\n    uint256 constant makerReservedHardware = 120;\n\n    uint256 public constant mythicFee = 0.02 ether;\n    uint256 public constant specialFee = 0.08 ether;\n    uint256 public constant publicMintPrice = 0.1 ether;\n\n    bool public publicMintActive = false;\n\n    uint256 internal _nextId;\n\n    mapping(uint256 => Shield) private _shields;\n    // transient variable that's immediately cleared after checking for duplicate colors\n    mapping(uint24 => bool) private _checkDuplicateColors;\n    // record shieldHashes so that duplicate shields cannot be built\n    mapping(bytes32 => bool) public shieldHashes;\n\n    modifier publicMintIsActive() {\n        require(publicMintActive, 'Shields: public mint not active yet');\n        _;\n    }\n\n    modifier validMintCount(uint8 count) {\n        require(_nextId + count <= standardMintMax + 1, 'Shields: public mint max exceeded');\n        require(count <= individualMintMax, 'Shields: can only mint up to 5 per transaction');\n        _;\n    }\n\n    modifier publicMintPaid(uint8 count) {\n        require(msg.value == publicMintPrice * count, 'Shields: invalid mint fee');\n        _;\n    }\n\n    modifier onlyTokenOwner(uint256 tokenId) {\n        require(msg.sender == ERC721.ownerOf(tokenId), 'Shields: only owner can build NFT');\n        _;\n    }\n\n    modifier shieldNotBuilt(uint256 tokenId) {\n        require(!_shields[tokenId].built, 'Shields: shield already built');\n        _;\n    }\n\n    modifier validHardware(uint256 tokenId, uint16 hardware) {\n        if (hardware == makerReservedHardware) {\n            require(tokenId <= makerBadgeThreshold, 'Shields: Three Shields hardware reserved for Maker Badge');\n        }\n        _;\n    }\n\n    modifier validColors(uint16 field, uint24[4] memory colors) {\n        validateColors(colors, field);\n        _;\n    }\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        IShieldDescriptor _shieldDescriptor,\n        address makerBadgeRecipient,\n        address granteeBadgeRecipient\n    ) ERC721(name_, symbol_) Ownable() {\n        shieldDescriptor = _shieldDescriptor;\n\n        for (uint256 i = 1; i <= makerPremintThreshold; i++) {\n            _mint(makerBadgeRecipient, i);\n        }\n\n        for (uint256 j = makerPremintThreshold + 1; j <= granteePremintThreshold; j++) {\n            _mint(granteeBadgeRecipient, j);\n        }\n\n        _nextId = granteePremintThreshold + 1;\n    }\n\n    // ============ OWNER INTERFACE ============\n\n    function collectFees() external onlyOwner {\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(new bytes(0));\n        require(success, 'Shields: ether transfer failed');\n    }\n\n    function setPublicMintActive() external onlyOwner {\n        publicMintActive = true;\n    }\n\n    // ============ PUBLIC INTERFACE ============\n\n    function mint(address to, uint8 count)\n        external\n        payable\n        publicMintIsActive\n        validMintCount(count)\n        publicMintPaid(count)\n    {\n        for (uint8 i = 0; i < count; i++) {\n            _mint(to, _nextId++);\n        }\n    }\n\n    function build(\n        uint16 field,\n        uint16 hardware,\n        uint16 frame,\n        uint24[4] memory colors,\n        uint256 tokenId\n    )\n        external\n        payable\n        override\n        onlyTokenOwner(tokenId)\n        shieldNotBuilt(tokenId)\n        validHardware(tokenId, hardware)\n        validColors(field, colors)\n    {\n        // shield must be unique\n        bytes32 shieldHash = keccak256(abi.encode(field, hardware, colors));\n        require(!shieldHashes[shieldHash], 'Shields: unique shield already minted');\n        shieldHashes[shieldHash] = true;\n\n        // Construct Shield\n        Shield memory shield = Shield({\n            built: true,\n            field: field,\n            hardware: hardware,\n            frame: frame,\n            colors: colors,\n            shieldBadge: calculateShieldBadge(tokenId)\n        });\n        _shields[tokenId] = shield;\n\n        // Calculate Fee\n        {\n            uint256 fee;\n            ICategories.FieldCategories fieldType = shieldDescriptor\n                .fieldGenerator()\n                .generateField(shield.field, shield.colors)\n                .fieldType;\n            ICategories.HardwareCategories hardwareType = shieldDescriptor\n                .hardwareGenerator()\n                .generateHardware(shield.hardware)\n                .hardwareType;\n            uint256 frameFee = shieldDescriptor.frameGenerator().generateFrame(shield.frame).fee;\n            if (fieldType == ICategories.FieldCategories.MYTHIC) {\n                fee += mythicFee;\n            }\n            if (hardwareType == ICategories.HardwareCategories.SPECIAL) {\n                fee += specialFee;\n            }\n            fee += frameFee;\n            require(msg.value == fee, 'Shields: invalid building fee');\n        }\n\n        emit ShieldBuilt(tokenId, field, hardware, frame, colors, calculateShieldBadge(tokenId));\n    }\n\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\n        require(_exists(tokenId), 'Shields: URI query for nonexistent token');\n        Shield memory shield = _shields[tokenId];\n\n        if (!shield.built) {\n            return shieldDescriptor.generateShieldBadgeURI(calculateShieldBadge(tokenId));\n        } else {\n            return shieldDescriptor.generateShieldURI(shield);\n        }\n    }\n\n    function shields(uint256 tokenId)\n        external\n        view\n        override\n        returns (\n            uint16 field,\n            uint16 hardware,\n            uint16 frame,\n            uint24 color1,\n            uint24 color2,\n            uint24 color3,\n            uint24 color4,\n            ShieldBadge shieldBadge\n        )\n    {\n        require(_exists(tokenId), 'Shield: tokenID does not exist');\n        Shield memory shield = _shields[tokenId];\n        return (\n            shield.field,\n            shield.hardware,\n            shield.frame,\n            shield.colors[0],\n            shield.colors[1],\n            shield.colors[2],\n            shield.colors[3],\n            shield.shieldBadge\n        );\n    }\n\n    // ============ INTERNAL INTERFACE ============\n\n    function calculateShieldBadge(uint256 tokenId) internal pure returns (ShieldBadge) {\n        if (tokenId <= makerBadgeThreshold) {\n            return ShieldBadge.MAKER;\n        } else {\n            return ShieldBadge.STANDARD;\n        }\n    }\n\n    function validateColors(uint24[4] memory colors, uint16 field) internal {\n        if (field == 0) {\n            checkExistsDupsMax(colors, 1);\n        } else if (field <= 242) {\n            checkExistsDupsMax(colors, 2);\n        } else if (field <= 293) {\n            checkExistsDupsMax(colors, 3);\n        } else {\n            checkExistsDupsMax(colors, 4);\n        }\n    }\n\n    function checkExistsDupsMax(uint24[4] memory colors, uint8 nColors) private {\n        for (uint8 i = 0; i < nColors; i++) {\n            require(_checkDuplicateColors[colors[i]] == false, 'Shields: all colors must be unique');\n            require(shieldDescriptor.fieldGenerator().colorExists(colors[i]), 'Shields: color does not exist');\n            _checkDuplicateColors[colors[i]] = true;\n        }\n        for (uint8 i = 0; i < nColors; i++) {\n            _checkDuplicateColors[colors[i]] = false;\n        }\n        for (uint8 i = nColors; i < 4; i++) {\n            require(colors[i] == 0, 'Shields: max colors exceeded for field');\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IFieldSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './ICategories.sol';\n\n/// @dev Generate Field SVG\ninterface IFieldSVGs {\n    struct FieldData {\n        string title;\n        ICategories.FieldCategories fieldType;\n        string svgString;\n    }\n}\n"
    },
    "contracts/interfaces/IHardwareSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './ICategories.sol';\n\ninterface IHardwareSVGs {\n    struct HardwareData {\n        string title;\n        ICategories.HardwareCategories hardwareType;\n        string svgString;\n    }\n}\n"
    },
    "contracts/interfaces/IFrameSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\ninterface IFrameSVGs {\n    struct FrameData {\n        string title;\n        uint256 fee;\n        string svgString;\n    }\n}\n"
    },
    "contracts/interfaces/IShieldBadgeSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './IShields.sol';\n\n/// @dev Generate ShieldBadge SVG\ninterface IShieldBadgeSVGs {\n    function generateShieldBadgeSVG(IShields.ShieldBadge shieldBadge) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/ICategories.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\n/// @dev Generate Shield SVG\ninterface ICategories {\n    enum FieldCategories {\n        MYTHIC,\n        HERALDIC\n    }\n\n    enum HardwareCategories {\n        STANDARD,\n        SPECIAL\n    }\n}\n"
    },
    "contracts/interfaces/IShields.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\n/// @dev Generate Customizable Shields\ninterface IShields is IERC721 {\n    enum ShieldBadge {\n        MAKER,\n        STANDARD\n    }\n\n    struct Shield {\n        bool built;\n        uint16 field;\n        uint16 hardware;\n        uint16 frame;\n        ShieldBadge shieldBadge;\n        uint24[4] colors;\n    }\n\n    function build(\n        uint16 field,\n        uint16 hardware,\n        uint16 frame,\n        uint24[4] memory colors,\n        uint256 tokenId\n    ) external payable;\n\n    function shields(uint256 tokenId)\n        external\n        view\n        returns (\n            uint16 field,\n            uint16 hardware,\n            uint16 frame,\n            uint24 color1,\n            uint24 color2,\n            uint24 color3,\n            uint24 color4,\n            ShieldBadge shieldBadge\n        );\n}\n"
    },
    "contracts/interfaces/IShieldDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './IShields.sol';\nimport './IFrameGenerator.sol';\nimport './IFieldGenerator.sol';\nimport './IHardwareGenerator.sol';\n\n/// @dev Generate Customizable Shields\ninterface IShieldDescriptor {\n    function fieldGenerator() external returns (IFieldGenerator);\n\n    function hardwareGenerator() external returns (IHardwareGenerator);\n\n    function frameGenerator() external returns (IFrameGenerator);\n\n    function generateShieldURI(IShields.Shield memory shield) external view returns (string memory);\n\n    function generateShieldBadgeURI(IShields.ShieldBadge shieldBadge) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IFrameGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './IFrameSVGs.sol';\n\n/// @dev Generate Shield SVG\ninterface IFrameGenerator {\n    struct FrameSVGs {\n        IFrameSVGs frameSVGs1;\n        IFrameSVGs frameSVGs2;\n    }\n\n    /// @notice Generates Frame snippet of SVG\n    /// @param Frame uint representing Frame selection\n    /// @return FrameData containing svg snippet and Frame title and Frame type\n    function generateFrame(uint16 Frame) external view returns (IFrameSVGs.FrameData memory);\n}\n"
    },
    "contracts/interfaces/IFieldGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './IFieldSVGs.sol';\nimport './IColors.sol';\n\n/// @dev Generate Field SVG\ninterface IFieldGenerator {\n    /// @notice Generates field snippet of SVG of the specified colors\n    /// @param field uint representing field selection\n    /// @param colors to be rendered in the field svg\n    /// @return FieldData containing svg snippet and field title\n    function generateField(uint16 field, uint24[4] memory colors) external view returns (IFieldSVGs.FieldData memory);\n\n    event ColorAdded(uint24 color, string title);\n\n    struct Color {\n        string title;\n        bool exists;\n    }\n\n    /// @notice Returns true if color exists in contract, else false.\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorExists(uint24 color) external view returns (bool);\n\n    /// @notice Returns the title string corresponding to the 3-byte color\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorTitle(uint24 color) external view returns (string memory);\n\n    struct FieldSVGs {\n        IFieldSVGs fieldSVGs1;\n        IFieldSVGs fieldSVGs2;\n        IFieldSVGs fieldSVGs3;\n        IFieldSVGs fieldSVGs4;\n        IFieldSVGs fieldSVGs5;\n        IFieldSVGs fieldSVGs6;\n        IFieldSVGs fieldSVGs7;\n        IFieldSVGs fieldSVGs8;\n        IFieldSVGs fieldSVGs9;\n        IFieldSVGs fieldSVGs10;\n        IFieldSVGs fieldSVGs11;\n        IFieldSVGs fieldSVGs12;\n        IFieldSVGs fieldSVGs13;\n        IFieldSVGs fieldSVGs14;\n        IFieldSVGs fieldSVGs15;\n        IFieldSVGs fieldSVGs16;\n        IFieldSVGs fieldSVGs17;\n        IFieldSVGs fieldSVGs18;\n        IFieldSVGs fieldSVGs19;\n        IFieldSVGs fieldSVGs20;\n        IFieldSVGs fieldSVGs21;\n        IFieldSVGs fieldSVGs22;\n        IFieldSVGs fieldSVGs23;\n        IFieldSVGs fieldSVGs24;\n    }\n}\n"
    },
    "contracts/interfaces/IHardwareGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './IHardwareSVGs.sol';\n\n/// @dev Generate Shield SVG\ninterface IHardwareGenerator {\n    /// @notice Generates hardware snippet of SVG\n    /// @param hardware uint representing hardware selection\n    /// @return HardwareData containing svg snippet and hardware title and hardware type\n    function generateHardware(uint16 hardware) external view returns (IHardwareSVGs.HardwareData memory);\n\n    struct HardwareSVGs {\n        IHardwareSVGs hardwareSVGs1;\n        IHardwareSVGs hardwareSVGs2;\n        IHardwareSVGs hardwareSVGs3;\n        IHardwareSVGs hardwareSVGs4;\n        IHardwareSVGs hardwareSVGs5;\n        IHardwareSVGs hardwareSVGs6;\n        IHardwareSVGs hardwareSVGs7;\n        IHardwareSVGs hardwareSVGs8;\n        IHardwareSVGs hardwareSVGs9;\n        IHardwareSVGs hardwareSVGs10;\n        IHardwareSVGs hardwareSVGs11;\n        IHardwareSVGs hardwareSVGs12;\n        IHardwareSVGs hardwareSVGs13;\n        IHardwareSVGs hardwareSVGs14;\n        IHardwareSVGs hardwareSVGs15;\n        IHardwareSVGs hardwareSVGs16;\n        IHardwareSVGs hardwareSVGs17;\n        IHardwareSVGs hardwareSVGs18;\n        IHardwareSVGs hardwareSVGs19;\n        IHardwareSVGs hardwareSVGs20;\n        IHardwareSVGs hardwareSVGs21;\n        IHardwareSVGs hardwareSVGs22;\n        IHardwareSVGs hardwareSVGs23;\n        IHardwareSVGs hardwareSVGs24;\n        IHardwareSVGs hardwareSVGs25;\n        IHardwareSVGs hardwareSVGs26;\n        IHardwareSVGs hardwareSVGs27;\n        IHardwareSVGs hardwareSVGs28;\n        IHardwareSVGs hardwareSVGs29;\n        IHardwareSVGs hardwareSVGs30;\n        IHardwareSVGs hardwareSVGs31;\n        IHardwareSVGs hardwareSVGs32;\n        IHardwareSVGs hardwareSVGs33;\n        IHardwareSVGs hardwareSVGs34;\n        IHardwareSVGs hardwareSVGs35;\n        IHardwareSVGs hardwareSVGs36;\n        IHardwareSVGs hardwareSVGs37;\n        IHardwareSVGs hardwareSVGs38;\n    }\n}\n"
    },
    "contracts/interfaces/IColors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\n/// @dev Generate Shield SVG\ninterface IColors {\n    event ColorAdded(uint24 color, string title);\n\n    struct Color {\n        string title;\n        bool exists;\n    }\n\n    /// @notice Returns true if color exists in contract, else false.\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorExists(uint24 color) external view returns (bool);\n\n    /// @notice Returns the title string corresponding to the 3-byte color\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorTitle(uint24 color) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/SVGs/ShieldBadgeSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport '../interfaces/IShieldBadgeSVGs.sol';\nimport '../interfaces/IShields.sol';\n\n/// @dev Generate Field SVG\ncontract ShieldBadgeSVGs is IShieldBadgeSVGs {\n    function generateShieldBadgeSVG(IShields.ShieldBadge shieldBadge) public pure override returns (string memory svg) {\n        if (shieldBadge == IShields.ShieldBadge.MAKER) {\n            svg = makerBadgeSVG();\n        }\n\n        if (shieldBadge == IShields.ShieldBadge.STANDARD) {\n            svg = standardBadgeSVG();\n        }\n    }\n\n    function makerBadgeSVG() internal pure returns (string memory) {\n        return\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\" viewBox=\"0 0 500 600\"><linearGradient id=\"a\" x1=\"110.5\" x2=\"389.5\" y1=\"82.68\" y2=\"82.68\" gradientUnits=\"userSpaceOnUse\"><stop offset=\"0\" stop-color=\"#4b4b4b\"/><stop offset=\".5\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#4b4b4b\"/></linearGradient><path fill=\"url(#a)\" d=\"M377.14 76.5H122.86a12.37 12.37 0 0 0-12.36 12.36h279c0-6.82-5.54-12.36-12.36-12.36z\"/><path fill=\"#1E1E1E\" d=\"M122.86 521.5a12.37 12.37 0 0 1-12.36-12.36V90.86c0-6.82 5.54-12.36 12.36-12.36h254.28c6.82 0 12.36 5.54 12.36 12.36v418.28c0 6.82-5.54 12.36-12.36 12.36H122.86z\"/><path fill=\"none\" stroke=\"gray\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" stroke-width=\"3\" d=\"M356.36 151.31a26.98 26.98 0 0 0 0-26.83m-5.46 23.68c4.19-7.22 2.96-15.43 0-20.53m-5.45 17.38a14.1 14.1 0 0 0 0-14.24M340 141.86a8.1 8.1 0 0 0 0-7.94\"/><path fill=\"none\" stroke=\"gray\" stroke-miterlimit=\"10\" d=\"M250 198.02v312m-110-312v312m110 0v-24\"/><path fill=\"none\" stroke=\"gray\" stroke-miterlimit=\"10\" stroke-width=\".91\" d=\"M120 354.02h260m-260 132h260m-260-264h260\"/><path fill=\"none\" stroke=\"gray\" stroke-miterlimit=\"10\" d=\"M360 198.02v312\"/><path fill=\"#1E1E1E\" d=\"M370 496.02v-284H130v284h240z\"/><g stroke=\"#1E1E1E\" stroke-miterlimit=\"10\" stroke-width=\"3\"><path fill=\"#4B4B4B\" d=\"M360 222.02H140v264h220v-264\"/><path fill=\"none\" d=\"M150 222.02v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m-210-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220\"/></g><g fill=\"none\" stroke=\"#1E1E1E\" stroke-miterlimit=\"10\" stroke-width=\"4\"><circle cx=\"200\" cy=\"354\" r=\"3\"/><circle cx=\"225\" cy=\"324\" r=\"3\"/><circle cx=\"225\" cy=\"384\" r=\"3\"/><circle cx=\"275\" cy=\"324\" r=\"3\"/><circle cx=\"275\" cy=\"384\" r=\"3\"/><circle cx=\"250\" cy=\"354\" r=\"3\"/><circle cx=\"300\" cy=\"354\" r=\"3\"/><circle cx=\"250\" cy=\"414\" r=\"3\"/><circle cx=\"200\" cy=\"294\" r=\"3\"/><circle cx=\"250\" cy=\"294\" r=\"3\"/><circle cx=\"300\" cy=\"294\" r=\"3\"/></g><path fill=\"none\" stroke=\"#1E1E1E\" stroke-miterlimit=\"10\" stroke-width=\"4\" d=\"M244.42 318.1v21.72a14.48 14.48 0 1 1-28.96 0V318.1h28.96zm40.12 0v21.72a14.48 14.48 0 1 1-28.96 0V318.1h28.96zm-20.06 45.4v21.72a14.48 14.48 0 1 1-28.96 0V363.5h28.96z\"/><path fill=\"none\" stroke=\"#1E1E1E\" stroke-width=\"4\" d=\"M250 486.02v-264m110 0H140v264h220v-264zm0 132H140\"/><g fill=\"none\" stroke-miterlimit=\"10\"><path stroke=\"#1E1E1E\" stroke-width=\"4\" d=\"m140 486.02 220-264m0 264-220-264m110 264v-264m0 192-50-60m50 60 50-60m-50-60-50 60m50-60 50 60m0 14.98a50.01 50.01 0 0 1-50 50 50.04 50.04 0 0 1-35.36-14.64A50.04 50.04 0 0 1 200 369v-75h100v75zm60-14.98H140m220-132H140v264h220v-264z\"/><path stroke=\"gray\" d=\"m140 486.02 220-264m0 264-220-264m110 264v-264m0 192-50-60m50 60 50-60m-50-60-50 60m50-60 50 60m0 14.98a50.01 50.01 0 0 1-50 50 50.04 50.04 0 0 1-35.36-14.64A50.04 50.04 0 0 1 200 369v-75h100v75zm60-14.98H140m220-132H140v264h220v-264z\"/></g><g fill=\"gray\"><circle cx=\"200\" cy=\"354\" r=\"3\"/><circle cx=\"225\" cy=\"324\" r=\"3\"/><circle cx=\"225\" cy=\"384\" r=\"3\"/><circle cx=\"275\" cy=\"324\" r=\"3\"/><circle cx=\"275\" cy=\"384\" r=\"3\"/><circle cx=\"250\" cy=\"354\" r=\"3\"/><circle cx=\"300\" cy=\"354\" r=\"3\"/><circle cx=\"250\" cy=\"414\" r=\"3\"/><circle cx=\"200\" cy=\"294\" r=\"3\"/><circle cx=\"250\" cy=\"294\" r=\"3\"/><circle cx=\"300\" cy=\"294\" r=\"3\"/></g><linearGradient id=\"b\" x1=\"146.83\" x2=\"159.59\" y1=\"174.76\" y2=\"144.22\" gradientUnits=\"userSpaceOnUse\"><stop offset=\"0\" stop-color=\"#66b2ff\"/><stop offset=\"1\" stop-color=\"#007fff\"/></linearGradient><path fill=\"url(#b)\" d=\"m186 108 .9 2.16-8.2 9.84h-2.4l-8.2-9.84.9-2.16h17zm.41 29 .49-1.16-8.2-9.84h-2.4l-8.2 9.84.49 1.16h17.82zm-19.9-25.63-.51.22v22.82l.51.22 8-9.59V121l-8-9.63zM164 134.41v-22.82l-.51-.22-7.99 9.63v4l8 9.59.5-.18zM151.3 126l-8.2 9.84.49 1.16h17.82l.49-1.16-8.2-9.84h-2.4zm29.2 25v4l4 4.73h1.07a24.81 24.81 0 0 0 4.43-14.24V142l-1.51-.62-7.99 9.62zm-31 0-8-9.58-1.5.58v3.5a24.89 24.89 0 0 0 4.48 14.28h1.07l4-4.74-.05-4.04zm31-30v4l8 9.59 1.5-.59v-22l-1.51-.63-7.99 9.63zm2.64 40.38L178.7 156h-2.4l-8.3 10v3.6l1.06.61a24.9 24.9 0 0 0 14.09-7.48l-.01-1.35zM178.7 150l8.2-9.84-.49-1.16h-17.82l-.49 1.16 8.2 9.84h2.4zM162 169.58V166l-8.3-10h-2.4l-4.44 5.34v1.35a25 25 0 0 0 14.14 7.49l1-.6zM174.5 151l-8-9.59-.51.22V164l.73.36 7.78-9.36v-4zM164 164v-22.41l-.51-.22-7.99 9.63v4l7.77 9.32.73-.32zm-22.49-29.37 8-9.59V121l-8-9.59-1.51.59v22l1.51.63zM153.7 150l8.2-9.84-.49-1.16h-17.82l-.49 1.16 8.2 9.84h2.4zm-9.7-42-.9 2.16 8.2 9.84h2.4l8.2-9.84-.9-2.16h-17z\"/><path fill=\"gray\" d=\"M244.42 318.1v21.72a14.48 14.48 0 1 1-28.96 0V318.1h28.96zm40.12 0v21.72a14.48 14.48 0 1 1-28.96 0V318.1h28.96zm-20.06 45.4v21.72a14.48 14.48 0 1 1-28.96 0V363.5h28.96z\"/></svg>';\n    }\n\n    function standardBadgeSVG() internal pure returns (string memory) {\n        return\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" xml:space=\"preserve\" viewBox=\"0 0 500 600\"><linearGradient id=\"a\" x1=\"110.5\" x2=\"389.5\" y1=\"82.68\" y2=\"82.68\" gradientUnits=\"userSpaceOnUse\"><stop offset=\"0\" stop-color=\"#a9a9a9\"/><stop offset=\".5\" stop-color=\"#fff\"/><stop offset=\"1\" stop-color=\"#a9a9a9\"/></linearGradient><path fill=\"url(#a)\" d=\"M377.14 76.5H122.86a12.37 12.37 0 0 0-12.36 12.36h279c0-6.82-5.54-12.36-12.36-12.36z\"/><path fill=\"#007FFF\" d=\"M122.86 521.5a12.37 12.37 0 0 1-12.36-12.36V90.86c0-6.82 5.54-12.36 12.36-12.36h254.28c6.82 0 12.36 5.54 12.36 12.36v418.28c0 6.82-5.54 12.36-12.36 12.36H122.86z\"/><path fill=\"none\" stroke=\"#FFF\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" stroke-width=\"3\" d=\"M356.36 151.31a26.98 26.98 0 0 0 0-26.83m-5.46 23.68c4.19-7.22 2.96-15.43 0-20.53m-5.45 17.38a14.1 14.1 0 0 0 0-14.24M340 141.86a8.1 8.1 0 0 0 0-7.94\"/><path fill=\"none\" stroke=\"#FFF\" stroke-miterlimit=\"10\" d=\"M250 198.02v312m-110-312v312m110 0v-24\"/><path fill=\"none\" stroke=\"#FFF\" stroke-miterlimit=\"10\" stroke-width=\".91\" d=\"M120 354.02h260m-260 132h260m-260-264h260\"/><path fill=\"none\" stroke=\"#FFF\" stroke-miterlimit=\"10\" d=\"M360 198.02v312\"/><path fill=\"#007FFF\" d=\"M370 496.02v-284H130v284h240z\"/><g stroke=\"#007FFF\" stroke-miterlimit=\"10\" stroke-width=\"3\"><path fill=\"#3A9EFF\" d=\"M360 222.02H140v264h220v-264\"/><path fill=\"none\" d=\"M150 222.02v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m10-264v264m-210-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220m-220-12h220\"/></g><g fill=\"none\" stroke=\"#007FFF\" stroke-miterlimit=\"10\" stroke-width=\"4\"><circle cx=\"200\" cy=\"354\" r=\"3\"/><circle cx=\"225\" cy=\"324\" r=\"3\"/><circle cx=\"225\" cy=\"384\" r=\"3\"/><circle cx=\"275\" cy=\"324\" r=\"3\"/><circle cx=\"275\" cy=\"384\" r=\"3\"/><circle cx=\"250\" cy=\"354\" r=\"3\"/><circle cx=\"300\" cy=\"354\" r=\"3\"/><circle cx=\"250\" cy=\"414\" r=\"3\"/><circle cx=\"200\" cy=\"294\" r=\"3\"/><circle cx=\"250\" cy=\"294\" r=\"3\"/><circle cx=\"300\" cy=\"294\" r=\"3\"/></g><path fill=\"none\" stroke=\"#007FFF\" stroke-width=\"4\" d=\"M250 486.02v-264m110 0H140v264h220v-264zm0 132H140\"/><g fill=\"none\" stroke-miterlimit=\"10\"><path stroke=\"#007FFF\" stroke-width=\"4\" d=\"m140 486.02 220-264m0 264-220-264m110 264v-264m0 192-50-60m50 60 50-60m-50-60-50 60m50-60 50 60m0 14.98a50.01 50.01 0 0 1-50 50 50.04 50.04 0 0 1-35.36-14.64A50.04 50.04 0 0 1 200 369v-75h100v75zm60-14.98H140m220-132H140v264h220v-264z\"/><path stroke=\"#FFF\" d=\"m140 486.02 220-264m0 264-220-264m110 264v-264m0 192-50-60m50 60 50-60m-50-60-50 60m50-60 50 60m0 14.98a50.01 50.01 0 0 1-50 50 50.04 50.04 0 0 1-35.36-14.64A50.04 50.04 0 0 1 200 369v-75h100v75zm60-14.98H140m220-132H140v264h220v-264z\"/></g><g fill=\"#FFF\"><circle cx=\"200\" cy=\"354\" r=\"3\"/><circle cx=\"225\" cy=\"324\" r=\"3\"/><circle cx=\"225\" cy=\"384\" r=\"3\"/><circle cx=\"275\" cy=\"324\" r=\"3\"/><circle cx=\"275\" cy=\"384\" r=\"3\"/><circle cx=\"250\" cy=\"354\" r=\"3\"/><circle cx=\"300\" cy=\"354\" r=\"3\"/><circle cx=\"250\" cy=\"414\" r=\"3\"/><circle cx=\"200\" cy=\"294\" r=\"3\"/><circle cx=\"250\" cy=\"294\" r=\"3\"/><circle cx=\"300\" cy=\"294\" r=\"3\"/></g><linearGradient id=\"b\" x1=\"151.28\" x2=\"178.23\" y1=\"158.45\" y2=\"106.1\" gradientUnits=\"userSpaceOnUse\"><stop offset=\"0\" stop-color=\"#fff\"/><stop offset=\"1\" stop-color=\"#a9a9a9\"/></linearGradient><path fill=\"url(#b)\" d=\"m186 108 .9 2.16-8.2 9.84h-2.4l-8.2-9.84.9-2.16h17zm.41 29 .49-1.16-8.2-9.84h-2.4l-8.2 9.84.49 1.16h17.82zm-19.9-25.63-.51.22v22.82l.51.22 8-9.59V121l-8-9.63zM164 134.41v-22.82l-.51-.22-7.99 9.63v4l8 9.59.5-.18zM151.3 126l-8.2 9.84.49 1.16h17.82l.49-1.16-8.2-9.84h-2.4zm29.2 25v4l4 4.73h1.07a24.81 24.81 0 0 0 4.43-14.24V142l-1.51-.62-7.99 9.62zm-31 0-8-9.58-1.5.58v3.5a24.89 24.89 0 0 0 4.48 14.28h1.07l4-4.74-.05-4.04zm31-30v4l8 9.59 1.5-.59v-22l-1.51-.63-7.99 9.63zm2.64 40.38L178.7 156h-2.4l-8.3 10v3.6l1.06.61a24.9 24.9 0 0 0 14.09-7.48l-.01-1.35zM178.7 150l8.2-9.84-.49-1.16h-17.82l-.49 1.16 8.2 9.84h2.4zM162 169.58V166l-8.3-10h-2.4l-4.44 5.34v1.35a25 25 0 0 0 14.14 7.49l1-.6zM174.5 151l-8-9.59-.51.22V164l.73.36 7.78-9.36v-4zM164 164v-22.41l-.51-.22-7.99 9.63v4l7.77 9.32.73-.32zm-22.49-29.37 8-9.59V121l-8-9.59-1.51.59v22l1.51.63zM153.7 150l8.2-9.84-.49-1.16h-17.82l-.49 1.16 8.2 9.84h2.4zm-9.7-42-.9 2.16 8.2 9.84h2.4l8.2-9.84-.9-2.16h-17z\"/></svg>';\n    }\n}\n"
    },
    "contracts/test/ShieldDescriptorTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport '../interfaces/IShields.sol';\nimport '../interfaces/IFrameGenerator.sol';\nimport '../interfaces/IFieldGenerator.sol';\nimport '../interfaces/IHardwareGenerator.sol';\nimport '../ShieldDescriptor.sol';\n\n/// @dev Generate Shield Metadata\ncontract ShieldDescriptorTest is ShieldDescriptor {\n    constructor(\n        IFieldGenerator _fieldGenerator,\n        IHardwareGenerator _hardwareGenerator,\n        IFrameGenerator _frameGenerator,\n        IShieldBadgeSVGs _shieldBadgeSVGGenerator\n    ) ShieldDescriptor(_fieldGenerator, _hardwareGenerator, _frameGenerator, _shieldBadgeSVGGenerator) {}\n\n    function generateSVGTest(IShields.Shield memory shield)\n        external\n        view\n        returns (\n            string memory svg,\n            string memory fieldTitle,\n            string memory hardwareTitle,\n            string memory frameTitle\n        )\n    {\n        IFieldSVGs.FieldData memory field = fieldGenerator.generateField(shield.field, shield.colors);\n        IHardwareSVGs.HardwareData memory hardware = hardwareGenerator.generateHardware(shield.hardware);\n        IFrameSVGs.FrameData memory frame = frameGenerator.generateFrame(shield.frame);\n\n        svg = string(generateSVG(field.svgString, hardware.svgString, frame.svgString));\n        fieldTitle = field.title;\n        hardwareTitle = hardware.title;\n        frameTitle = frame.title;\n    }\n}\n"
    },
    "contracts/ShieldDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './interfaces/ICategories.sol';\nimport './interfaces/IFrameGenerator.sol';\nimport './interfaces/IFieldGenerator.sol';\nimport './interfaces/IHardwareGenerator.sol';\nimport './interfaces/IShieldBadgeSVGs.sol';\nimport './interfaces/IFrameSVGs.sol';\nimport './interfaces/IShields.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport 'base64-sol/base64.sol';\n\n/// @dev Generate Shield Metadata\ncontract ShieldDescriptor {\n    using Strings for uint8;\n\n    IFieldGenerator public immutable fieldGenerator;\n    IHardwareGenerator public immutable hardwareGenerator;\n    IFrameGenerator public immutable frameGenerator;\n    IShieldBadgeSVGs public immutable shieldBadgeSVGGenerator;\n\n    constructor(\n        IFieldGenerator _fieldGenerator,\n        IHardwareGenerator _hardwareGenerator,\n        IFrameGenerator _frameGenerator,\n        IShieldBadgeSVGs _shieldBadgeSVGGenerator\n    ) {\n        fieldGenerator = _fieldGenerator;\n        hardwareGenerator = _hardwareGenerator;\n        frameGenerator = _frameGenerator;\n        shieldBadgeSVGGenerator = _shieldBadgeSVGGenerator;\n    }\n\n    function generateShieldURI(IShields.Shield memory shield) external view returns (string memory) {\n        IFieldSVGs.FieldData memory field = fieldGenerator.generateField(shield.field, shield.colors);\n        IHardwareSVGs.HardwareData memory hardware = hardwareGenerator.generateHardware(shield.hardware);\n        IFrameSVGs.FrameData memory frame = frameGenerator.generateFrame(shield.frame);\n\n        string memory name = generateTitle(field.title, hardware.title, frame.title, shield.colors);\n        bytes memory attributes = generateAttributesJSON(field, hardware, frame, shield.colors);\n\n        return\n            string(\n                abi.encodePacked(\n                    'data:application/json;base64,',\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                name,\n                                '\", \"description\":\"5000 Shields, designed and built by their owners.\", \"image\": \"data:image/svg+xml;base64,',\n                                Base64.encode(bytes(generateSVG(field.svgString, hardware.svgString, frame.svgString))),\n                                '\", \"attributes\": ',\n                                attributes,\n                                '}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function generateShieldBadgeURI(IShields.ShieldBadge shieldBadge) external view returns (string memory) {\n        string memory badgeTitle;\n\n        if (shieldBadge == IShields.ShieldBadge.MAKER) {\n            badgeTitle = 'Maker';\n        } else if (shieldBadge == IShields.ShieldBadge.STANDARD) {\n            badgeTitle = 'Standard';\n        }\n\n        return\n            string(\n                abi.encodePacked(\n                    'data:application/json;base64,',\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                badgeTitle,\n                                ' Shield Badge',\n                                '\", \"description\":\"An unused Shield Badge. Can be used to build 1 Shield.\", \"image\": \"data:image/svg+xml;base64,',\n                                Base64.encode(bytes(shieldBadgeSVGGenerator.generateShieldBadgeSVG(shieldBadge))),\n                                '\", \"attributes\": [{\"trait_type\": \"Badge Type\", \"value\":\"',\n                                badgeTitle,\n                                '\"}]}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function generateTitle(\n        string memory fieldTitle,\n        string memory hardwareTitle,\n        string memory frameTitle,\n        uint24[4] memory colors\n    ) internal view returns (string memory) {\n        bytes memory frameString = '';\n        if (bytes(frameTitle).length > 0) {\n            frameString = abi.encodePacked(frameTitle, ': ');\n        }\n        return\n            string(abi.encodePacked(frameString, hardwareTitle, ' on ', generateColorTitleSnippet(colors), fieldTitle));\n    }\n\n    function generateColorTitleSnippet(uint24[4] memory colors) internal view returns (string memory) {\n        bytes memory colorTitle = bytes(fieldGenerator.colorTitle(colors[0]));\n        if (colors[1] > 0) {\n            colorTitle = abi.encodePacked(\n                colorTitle,\n                colors[2] > 0 ? ' ' : ' and ',\n                fieldGenerator.colorTitle(colors[1])\n            );\n        }\n        if (colors[2] > 0) {\n            colorTitle = abi.encodePacked(\n                colorTitle,\n                colors[3] > 0 ? ' ' : ' and ',\n                fieldGenerator.colorTitle(colors[2])\n            );\n        }\n        if (colors[3] > 0) {\n            colorTitle = abi.encodePacked(colorTitle, ' and ', fieldGenerator.colorTitle(colors[3]));\n        }\n        colorTitle = abi.encodePacked(colorTitle, ' ');\n        return string(colorTitle);\n    }\n\n    function generateSVG(\n        string memory fieldSVG,\n        string memory hardwareSVG,\n        string memory frameSVG\n    ) internal pure returns (bytes memory svg) {\n        svg = abi.encodePacked(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 220 264\">',\n            fieldSVG,\n            hardwareSVG,\n            frameSVG,\n            '</svg>'\n        );\n    }\n\n    function generateAttributesJSON(\n        IFieldSVGs.FieldData memory fieldData,\n        IHardwareSVGs.HardwareData memory hardwareData,\n        IFrameSVGs.FrameData memory frameData,\n        uint24[4] memory colors\n    ) internal view returns (bytes memory attributesJSON) {\n        attributesJSON = abi.encodePacked(\n            '[{\"trait_type\":\"Field\", \"value\":\"',\n            fieldData.title,\n            '\"}, {\"trait_type\":\"Hardware\", \"value\":\"',\n            hardwareData.title,\n            '\"}, {\"trait_type\":\"Field Type\", \"value\":\"',\n            getFieldTypeString(fieldData.fieldType),\n            '\"}, {\"trait_type\":\"Hardware Type\", \"value\":\"',\n            getHardwareTypeString(hardwareData.hardwareType),\n            conditionalFrameAttribute(frameData.title),\n            colorAttributes(colors)\n        );\n    }\n\n    function getFieldTypeString(ICategories.FieldCategories category) internal pure returns (string memory typeString) {\n        if (category == ICategories.FieldCategories.MYTHIC) {\n            typeString = 'Mythic';\n        } else {\n            typeString = 'Heraldic';\n        }\n    }\n\n    function getHardwareTypeString(ICategories.HardwareCategories category)\n        internal\n        pure\n        returns (string memory typeString)\n    {\n        if (category == ICategories.HardwareCategories.SPECIAL) {\n            typeString = 'Special';\n        } else {\n            typeString = 'Standard';\n        }\n    }\n\n    function conditionalFrameAttribute(string memory frameTitle) internal pure returns (bytes memory frameAttribute) {\n        if (bytes(frameTitle).length > 0) {\n            frameAttribute = abi.encodePacked('\"}, {\"trait_type\":\"Frame\", \"value\":\"', frameTitle);\n        } else {\n            frameAttribute = '';\n        }\n    }\n\n    function colorAttributes(uint24[4] memory colors) private view returns (bytes memory colorArributes) {\n        colorArributes = abi.encodePacked(\n            '\"}, {\"trait_type\":\"Color 1\", \"value\":\"',\n            fieldGenerator.colorTitle(colors[0]),\n            conditionalColorAttribute(colors[1], 2),\n            conditionalColorAttribute(colors[2], 3),\n            conditionalColorAttribute(colors[3], 4),\n            '\"}]'\n        );\n    }\n\n    function conditionalColorAttribute(uint24 color, uint8 nColor) private view returns (bytes memory colorArribute) {\n        if (color != 0) {\n            colorArribute = abi.encodePacked(\n                '\"}, {\"trait_type\":\"Color ',\n                nColor.toString(),\n                '\", \"value\":\"',\n                fieldGenerator.colorTitle(color)\n            );\n        } else {\n            colorArribute = '';\n        }\n    }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\nlibrary Base64 {\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n        \n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n            \n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n            \n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n            \n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n            \n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               dataPtr := add(dataPtr, 3)\n               \n               // read 3 bytes\n               let input := mload(dataPtr)\n               \n               // write 4 characters\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\n               resultPtr := add(resultPtr, 1)\n            }\n            \n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n        \n        return result;\n    }\n}\n"
    },
    "contracts/SVGs/Frames/FrameSVGs2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport '../../interfaces/IFrameSVGs.sol';\n\n/// @dev Experimenting with a contract that holds huuuge svg strings\ncontract FrameSVGs2 is IFrameSVGs {\n    function frame_4() public pure returns (FrameData memory) {\n        return\n            FrameData(\n                'Floriated',\n                1 ether,\n                string(\n                    abi.encodePacked(\n                        '<defs><linearGradient id=\"fr3-a\" x1=\"0\" x2=\"0\" y1=\"0\" y2=\"1\"><stop offset=\"0\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient id=\"fr3-b\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\"><stop offset=\"0\" stop-color=\"#fff\"/><stop offset=\".5\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient id=\"fr3-z\" x1=\"0\" x2=\"0\" xlink:href=\"#fr3-b\" y1=\"0\" y2=\"1\"/><linearGradient id=\"fr3-B\" xlink:href=\"#fr3-a\" y1=\"1\" y2=\"0\"/><linearGradient id=\"fr3-C\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\"><stop offset=\"0\" stop-color=\"gray\"/><stop offset=\".5\" stop-color=\"#fff\"/><stop offset=\"1\" stop-color=\"gray\"/></linearGradient><symbol id=\"fr3-A\" viewBox=\"0 0 91.29 209.08\"><path d=\"M79.92 44c-2.19-4.3 1.92-8.54-2.14-12.6-2.94-2.94-7.87.66-7.87-3.43s4.93-.49 7.87-3.43c4.06-4.06 0-8.3 2.14-12.59l-16 16Z\" fill=\"url(#fr3-a)\"/><path d=\"M79.92 11.92c-4.29 2.19-8.53-1.92-12.59 2.14-2.94 2.94.67 7.87-3.43 7.87s-.49-4.93-3.43-7.87c-4.06-4.06-8.3 0-12.6-2.14l16 16Z\" fill=\"url(#fr3-b)\"/><path d=\"M34.72 14.16v8.5H42l-7.28-8.5z\" fill=\"url(#fr3-a)\"/><path d=\"M27.45 22.66h7.27v-8.5l-7.27 8.5z\" fill=\"url(#fr3-a)\"/><path d=\"M68.63 114.57C70.11 110 76 109.89 76 104.14c0-4.15-5.69-5.44-3.14-8s3.83 3.14 8 3.14c5.74 0 5.83-5.9 10.42-7.39H68.63Z\" fill=\"url(#fr3-a)\"/><path d=\"M80.87 84.52c-4.16 0-5.67 5.46-8 3.13s3.14-3.83 3.14-8c0-5.74-5.91-5.83-7.39-10.42V91.9h22.67c-4.59-1.48-4.68-7.38-10.42-7.38Z\" fill=\"url(#fr3-a)\"/><path d=\"m77.12 56.39-8.49-7.28v7.28h8.49z\" fill=\"url(#fr3-a)\"/><path d=\"m68.63 63.66 8.49-7.27h-8.49v7.27z\" fill=\"url(#fr3-a)\"/><path d=\"M22.66 22.66c-4.58-1.48-4.68-7.39-10.42-7.39-4.15 0-5.1 6-8 3.14s3.14-3.83 3.14-8C7.39 4.68 1.48 4.59 0 0v22.66Z\" fill=\"url(#fr3-a)\"/><path d=\"M42.62 174.58c3.88-2.86 8.73.5 12.08-4.17 2.42-3.37-1.93-7.65 2.1-8.32s1.29 4.79 4.67 7.21c4.67 3.34 8.18-1.4 12.77.06l-18.42-13.2Z\" fill=\"url(#fr3-a)\"/><path d=\"m68.19 125.58 7.81 1.08-7.41-8.38a36.41 36.41 0 0 1-.4 7.3Z\" fill=\"url(#fr3-a)\"/><path d=\"m66.85 132.59 9.15-5.93-7.85-1.08a54.75 54.75 0 0 1-1.3 7.01Z\" fill=\"url(#fr3-a)\"/><path d=\"M74.24 169.36c-2.86-3.88.5-8.73-4.17-12.07-3.37-2.42-7.65 1.92-8.32-2.11s4.79-1.29 7.21-4.66c3.34-4.67-1.41-8.19.06-12.78l-13.2 18.42Z\" fill=\"url(#fr3-a)\"/><path d=\"M0 209.08c1.48-4.58 7.39-4.67 7.39-10.42 0-4.15-6-5.1-3.14-8s3.84 3.14 8 3.14c5.74 0 5.84-5.91 10.42-7.39H0Z\" fill=\"url(#fr3-a)\"/><path d=\"m35.05 184.51 2.59-10.88a43.44 43.44 0 0 1-6.26 3.73Z\" fill=\"url(#fr3-a)\"/><path d=\"m24.7 180.28 10.35 4.23-3.67-7.15a70.13 70.13 0 0 1-6.68 2.92Z\" fill=\"url(#fr3-a)\"/><path d=\"M34.72 38.29V22.66h-7.27c6.87 3.71 2.49 12.63-10 12.63-10.54 0-15.51-6-13.17-8.38 2.89-2.89 3.84 3.14 8 3.14 5.74 0 5.84-5.91 10.42-7.39H0v15.63Z\" fill=\"url(#fr3-a)\"/><path d=\"M47.87 11.92c2.2 4.29-1.87 8.53 2.13 12.59 2.94 2.94 7.87-.65 7.87 3.43 0 2.81-5.79 6-10.42 6-8 0-12.18-7.36-5.47-11.31h-7.26v15.66H53L63.9 28Z\" fill=\"url(#fr3-a)\"/><path d=\"M63.9 28 53 38.29v18.1h15.63v-7.28C66 54.19 58.55 53.8 58.55 44.8c0-4.5 2.78-10.8 5.35-10.8 4.08 0 .49 4.93 3.43 7.87 4.06 4.06 8.3 0 12.59 2.15Z\" fill=\"url(#fr3-a)\"/><path d=\"M68.63 63.67v-7.28H53V91.9h15.63V69.24c-1.49 4.59-7.39 4.68-7.39 10.42 0 4.16 5.92 5.79 3.14 8S56 82.53 56 72.1c0-11.42 8.93-14.4 12.63-8.43Z\" fill=\"url(#fr3-a)\"/><path d=\"M68.63 118.28c-3.49 5.38-12.53 2.87-12.53-11.66 0-8.05 6-12.72 8.28-10.47s-3.14 3.84-3.14 8c0 5.75 5.9 5.84 7.39 10.43V91.9H53v24.39a54.3 54.3 0 0 1-.49 7.14l15.69 2.15a36.41 36.41 0 0 0 .43-7.3Z\" fill=\"url(#fr3-a)\"/><path d=\"M56.94 141.91c-2.42 3.38 1.93 7.66-2.1 8.32-5.38.89-4.31-22.11 5.29-22.11a6.82 6.82 0 0 1 6.49 4.62l.23-.15a54.75 54.75 0 0 0 1.34-7l-15.69-2.16a52.69 52.69 0 0 1-9.39 23.62l12.71 9.11L69 137.74c-3.86 2.87-8.71-.5-12.06 4.17Z\" fill=\"url(#fr3-a)\"/><path d=\"m55.82 156.16-12.71-9.11a53.31 53.31 0 0 1-18.91 16.36l7.18 14a43.44 43.44 0 0 0 6.26-3.73c-6.92.06-8.51-9.06-.57-15.1s12.48-3.46 12.82-1.39c.67 4-4.78 1.29-7.2 4.67-3.35 4.67 1.4 8.18-.07 12.77Z\" fill=\"url(#fr3-a)\"/><path d=\"M0 169.29v17.13h22.66C18.08 184.94 18 179 12.24 179c-4.15 0-5.1 6-8 3.14-2.34-2.34.17-8.49 8.61-10.72 12.53-3.16 15 4.13 11.84 8.83a70.13 70.13 0 0 0 6.68-2.92l-7.18-14A52.57 52.57 0 0 1 0 169.29Z\" fill=\"url(#fr3-a)\"/></symbol><symbol id=\"fr3-xx\" viewBox=\"0 0 92.61 200.66\"><path d=\"M53.82 31.86v74a52.56 52.56 0 0 1-52.5 52.5L0 176l1.32 24.66c1.49-4.59 7.39-4.68 7.39-10.42v-2s-6-3.1-3.14-6 3.84 3.14 8 3.14c5.75 0 5.84-5.91 10.43-7.39v-2H2.75l2.13-5.49c.63-2.7 3.61-6 9.3-7.48 8.54-2.15 12.69.86 13.29 4.29L26 169.86v2l10.35 4.23L39 165.21v-2c-3.33 0-5.87-1.17-6.26-4a15.1 15.1 0 0 1 5.69-9.07c7.34-5.59 11.77-3.8 12.67-1.87-1 1.74-7.11 3.54-7.11 3.54-3.19 5.72.87 10.63 0 12.38v2c3.87-2.86 8.73.5 12.07-4.17 1.75-2.14-.6-8.32 2.1-8.32 4.09 0 1.29 4.78 4.67 7.2 4.67 3.35 8.18-1.4 12.78.07v-2c-2.87-3.88.5-8.73-4.17-12.08-3.21-2.3-7.23 1.5-8.19-1.57.9-1.82 4.51-.84 7.07-3.2 3-2.72-.33-8.81.06-14.77-3.87 2.86-15.79 17.38-15.79 17.38A109.14 109.14 0 0 1 53 133.64c.27-6.31 3-13.95 8.49-13.95a6.84 6.84 0 0 1 6.5 4.63l9.42-6.08v-2s-19.91.82-19.91-18.67c.3-7.66 6.56-12.2 8.76-9.49 0 .07-3.66 5.64-3.66 5.64v2c0 5.75 5.91 5.84 7.39 10.42 1.48-4.58 7.39-4.67 7.39-10.42v-2l-3.9-5.59c2.55-2.54 4.6 2.74 8.75 2.74 5.74 0 5.84-5.91 10.42-7.39v-2S74.82 82.45 74 77c1-1.43 3.32-3 3.32-5.77v-2H62.56v2c0 2.67 2.43 4.29 3.45 5.7-.25 1.32-9.21 5.56-9.21-14.06.42-10.74 9.55-13.46 13.15-7.64l8.5-7.23v-2s-18.52 2-18.52-10.66c.37-4.38 2.92-9.81 5.29-9.81 1.71 0 2.07.86 2.13 2.08v.34c0 1.67-.32 3.85 1.28 5.45 4.06 4.06 8.3 0 12.6 2.14v-2l-9.86-15c.83-2.41 5.07.21 7.71-2.43a6 6 0 0 0 1.83-5.66 17.52 17.52 0 0 1 .32-6.93v-2l-16 16-16-16v2a11.66 11.66 0 0 1 .32 6.93 5.9 5.9 0 0 0 1.82 5.66c2.6 2.6 6.76.09 7.68 2.31 0 8.05-18.92 8.31-18.92-.28a6.34 6.34 0 0 1 3.22-3.88v-2H28.77v2A5.73 5.73 0 0 1 31.9 18C29.54 28.75 9.55 28.76 4.89 19c3.18-3.38 4.52 2.6 8.67 2.6 5.75 0 5.84-5.91 10.43-7.39v-2c-11.16 0-16.88-.82-18.83-4.74 1-1.43 3.55-2.77 3.55-5.5V0H0l1.32 31.86Z\"/></symbol></defs><use height=\"200.66\" transform=\"translate(108.68 41.14)\" width=\"92.61\" xlink:href=\"#fr3-xx\"/><use height=\"200.66\" transform=\"matrix(-1 0 0 1 111.32 41.14)\" width=\"92.61\" xlink:href=\"#fr3-xx\"/><g><path d=\"M110 198.25A51.31 51.31 0 0 1 58.75 147V69.76h102.5v79.5c0 26-22.99 48.99-51.25 48.99Z\" fill=\"none\" stroke=\"url(#fr3-z)\" stroke-width=\"2.5\"/><use height=\"209.08\" transform=\"translate(110 30.72)\" width=\"91.29\" xlink:href=\"#fr3-A\"/><use height=\"209.08\" transform=\"matrix(-1 0 0 1 110 30.72)\" width=\"91.29\" xlink:href=\"#fr3-A\"/><defs><symbol data-name=\"New Symbol 4\" id=\"fr3-xy\" viewBox=\"0 0 88.27 200.06\"><path d=\"m0 18.15 1.49 16.13H54v77.5a52.56 52.56 0 0 1-52.5 52.5L0 181.91l1.49 18.15c1.94-2.48 4.88-2.69 4.88-5.91 0-2.63-6.75-5.09-2.4-9.76s7.77 2.41 9.75 2.41c2.79 0 3.65-3 5.92-4.89-2.4-1.9-3.25-4.89-5.92-4.89-2.89 0-5.81 5.92-9.75 2.41-2.11-1.87-4-11.28 9.76-14.91 3.85-1 18.66-2.43 15.81 9.93l5.24 2.14 1.3-5.46C32.13 170.4 25.72 161 37 152c8.73-6.93 16-4.54 16.8.2 1 6.15-5.39 3.93-7.64 6.52s.43 5.12.53 7.66c2.33-.6 6 .6 7.42-2s-2.66-8.07 3.73-9.33c6-1.18 4 5.89 6.53 7.63 2.19 1.49 5.64-.49 7.65-.53-.57-3.63.5-5.28-2-7.41s-8.41 1.87-9.33-3.73c-1-6 5.36-3.93 7.64-6.53 1.87-2.13 0-4.42-.53-7.65-3.64.57-5.8 0-7.42 2-1.92 2.31 2.71 8.27-3.73 9.33-.25 0-2.88.63-4.66-2.46-2.45-4.23-1.82-13.86 1.46-19.31 5.35-8.91 13.54-4.26 15.56-1.67l4.64-3.12-3.66-4.14c-2.11 1.55-7.53 3.43-11.91-3.1-2-3-3.07-7.25-3.07-12.28 0-7.69 4.51-13.71 9.39-13.71a4.76 4.76 0 0 1 4.67 4.78c0 2.81-3.93 3.76-3.93 6.45s3 3.63 4.89 5.92C73.37 102.34 75 102 75 99.63s-3.92-3.14-3.92-6.45a5.33 5.33 0 0 1 4.78-4.82c3.14 0 4.29 3.92 6.49 3.92 3.56 0 4.47-3.75 5.91-4.89-2.07-1.83-2.94-4.88-5.91-4.88-1.06 0-3.54 3.92-6.49 3.92-1.84 0-4.81-2-4.78-4.82 0-2.15 3.92-3.42 3.92-6.45s-4.07-4.4-4.89-5.92c-1.41 2-4.89 3.05-4.89 5.92s3.9 3.64 3.93 6.45A4.56 4.56 0 0 1 64.52 86C58.8 86 55 77 55 67.59c0-16 12.58-14.56 15.07-11.72l4.71-4-4.66-3.79c-2.67 3.21-12.57 4.3-12.57-7.8 0-4.7 3-13.35 7.84-13.35 6.39 0 3.7 7.05 5.2 8.6 2 2.09 3 .76 7.64.73 0-1.4 1.56-5.64-.72-7.64-2.9-2.53-8.61.3-8.61-5.2 0-5.9 7.11-3.58 8.61-5.2 2-2.22.52-4.56.72-7.63-2.68.21-5.51-1.26-7.64.72s.33 5.18-1.79 7.34-5.52 1.35-6.8.01c-2.23-2.27-.26-5.79-1.79-7.34-2.13-2.14-4.16-.69-7.64-.72.37 2.09-1.66 5.24.72 7.63 1.83 1.85 8.6-.62 8.6 5.2C61.87 28.38 54.16 32 49 32c-12.31 0-12.52-11.37-9.07-13.81l-3.72-4.69-3.66 4.65c4.24 2.92 2.25 15.13-13.64 15.13C2.41 33.28 1.49 22.54 4 20.63 9 16.77 9.76 23 13.72 23s4-3.42 5.92-4.89c-3.21-3.26-3.25-4.89-5.92-4.89-2.27 0-2.92 3.93-6.49 3.93a4.86 4.86 0 0 1-4.78-4.82c0-2.15 3.92-3.81 3.92-6.46S2.91 2 1.49 0Z\" fill=\"url(#fr3-B)\"/></symbol></defs><use height=\"200.06\" transform=\"translate(108.51 35.23)\" width=\"88.26\" xlink:href=\"#fr3-xy\"/><use height=\"200.06\" transform=\"matrix(-1 0 0 1 111.49 35.23)\" width=\"88.26\" xlink:href=\"#fr3-xy\"/></g><path d=\"M160 72.01H60l-2.5-2.5h105l-2.5 2.5z\" fill=\"url(#fr3-C)\"/>'\n                    )\n                )\n            );\n    }\n\n    function frame_5() public pure returns (FrameData memory) {\n        return\n            FrameData(\n                'Everlasting',\n                2 ether,\n                string(\n                    abi.encodePacked(\n                        '<defs><linearGradient id=\"fr4-a\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\"><stop offset=\"0\" stop-color=\"#fff\"/><stop offset=\"1\" stop-color=\"#4b4b4b\"/></linearGradient><linearGradient id=\"fr4-b\" x1=\"0\" x2=\"1\" xlink:href=\"#fr4-a\" y1=\"0\" y2=\"2\"/><linearGradient id=\"fr4-c\" x1=\"0\" x2=\"0\" xlink:href=\"#fr4-a\" y1=\".75\" y2=\"0\"/><linearGradient id=\"fr4-d\" x1=\"0\" x2=\"0\" xlink:href=\"#fr4-a\" y1=\"0\" y2=\"1.5\"/><linearGradient id=\"fr4-e\" x1=\"0\" x2=\"0\" xlink:href=\"#fr4-a\" y1=\"1\" y2=\"0\"/><linearGradient id=\"fr4-g\" x1=\"0\" x2=\"0\" xlink:href=\"#fr4-a\" y1=\"1\" y2=\"0\"/><linearGradient id=\"fr4-f\" x1=\".35\" x2=\".6\" xlink:href=\"#fr4-a\" y1=\".2\" y2=\".7\"/><linearGradient id=\"fr4-h\" x1=\"1\" x2=\"0\" xlink:href=\"#fr4-a\" y1=\"0\" y2=\"0\"/><linearGradient id=\"fr4-j\" x1=\"0\" x2=\"0\" xlink:href=\"#fr4-a\" y1=\"0\" y2=\"2\"/><linearGradient id=\"fr4-i\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"0\"><stop offset=\"0\"/><stop offset=\".5\" stop-color=\"#fff\"/><stop offset=\"1\"/></linearGradient><linearGradient gradientUnits=\"userSpaceOnUse\" id=\"fr4-k\" x1=\"110\" x2=\"110\" y1=\"221.44\" y2=\"49.83\"><stop offset=\"0\" stop-color=\"#fff\"/><stop offset=\".5\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient gradientUnits=\"userSpaceOnUse\" id=\"fr4-m\" x1=\"110\" x2=\"110\" y1=\"199.01\" y2=\"69.96\"><stop offset=\"0\" stop-color=\"#fff\"/><stop offset=\".5\" stop-color=\"#4b4b4b\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient gradientUnits=\"userSpaceOnUse\" id=\"fr4-n\" x1=\"58\" x2=\"162\" y1=\"71.01\" y2=\"71.01\"><stop offset=\"0\" stop-color=\"#4b4b4b\"/><stop offset=\".5\" stop-color=\"#fff\"/><stop offset=\"1\" stop-color=\"#4b4b4b\"/></linearGradient><symbol id=\"fr4-l\" viewBox=\"0 0 100.04 242.01\"><path d=\"m75.33 51.44-3.59 10.27-12.5 7.14.78-3.93Zm-5.38 16.01-11.83 8.58-.6 5.52 9.65-3.9ZM66.31 81.3l-9.18 5.46-.25 5.06 7.43-.54Zm-2.4 12.44-7.16 3.68-.01 5.63 5.93.43Zm-1.4 11.57-5.7 2.56.2 6.21 5.02.8Zm-.48 11.12-4.8 2.63.28 5.01 4.85 1.86Zm.47 11.1-4.66 1.58.26 5.36 5.7 2.63Zm1.7 11.6-6.06.53-.2 5.02 8.87 4.38Zm-6.85 11.1-.74 4.23 16.62 9.38-5.27-11.49Zm-2.3 9.96-1.7 4.26 26.48 17.94 6.08-1.1Zm7.43-105.6 16.74-13.02 4.28-9.8-20.02 18.98Z\" fill=\"url(#fr4-a)\"/><path d=\"m68.19 185.5-7.45 2.64-13.65-14.18 2.24-2.75ZM41.83 179l-3.92 2.98 8.23 12.95 7.6-3.82Zm-9.1 6.4-4.6 2.81 5.74 14.47 7.2-4.8Zm-9.55 5.76-5.02 3.09L22.7 212l6.48-5.72Zm-10.29 6.58-3.1 2.22 1.74 24.73 5.36-6.63Z\" fill=\"url(#fr4-b)\"/><path d=\"m13.68 15.3 5.17 2.96L11.9 42.3 9.33 42Zm9.35 28.96 10.5-21.43-5.55-1.18-7.5 22.17Zm7.9 1.34 3.35.57 14.31-22.78-5.64.2Zm10.19 1.73 4.23.72 20.97-28.33-5.15 1.53Zm15.48 2.64 36.88-38.29L100.04 0 51.78 49.15Z\" fill=\"url(#fr4-c)\"/><path d=\"m11.52 42.26 7.33-24-3.48 24.42-3.98 14.84ZM0 40.34 1.26 2.57l3.02 38.22-1.06 16.73Zm20.48 17.18 5.77-13 7.27-21.7L22.65 44.2Zm9.7 0 6.81-11.16 11.6-22.97-14.82 22.7Zm10.25 0 7.2-9.36 18.4-28-21.31 27.79Zm9.56 0 8.7-7.47 34.79-38.37-37.6 38.16Z\" fill=\"url(#fr4-d)\"/><path d=\"M49.37 48.46 100.04 0 52.5 49.27l-9.56 8.25Zm-16.81 9.06 9.2-10.08 19.41-26.2-22.42 25.41Zm-9.8 0 8.67-11.83 11.52-22.1-14.92 21.24Zm-9.2 0 7.3-13.63 7.12-22.24L17.2 42.99Zm-8.37 0L9.7 42.03l3.97-26.73-7.42 25.83Z\" fill=\"url(#fr4-e)\"/><path d=\"m44.46 165.47 6.77 2.6 16.96 17.43-19.2-13.88Zm-.57 11.43-5.54-3.54 2.89 6.1 12.5 11.65Zm-13.26 3.28 4.09 3.67 6.34 14.02-9.02-12.05Zm-8.7 5.17 3.23 4.35 4.02 16.58-6.75-14.66Zm-9.86 3.54 3.53 6.75 1.29 22.42-4.47-19.99Zm-6.72 14.26L3.47 190.3.02 209.95l1.2 32.07Z\" fill=\"url(#fr4-f)\"/><path d=\"m40.69 170.7 6.74 2.85 13.31 14.6-15.8-12.25Zm-7.18 7.24 1.98 5.4 10.65 11.59-7.64-13.4Zm-8.4 5.78 3.71 4.07 5.05 14.89-8.3-13.22Zm-10.08 4.34 3.89 5.73L22.7 212l-6.56-16.72Zm-8.13 1.87L7 201.8l4.52 22.88-1.28-25.06Z\" fill=\"url(#fr4-g)\"/><path d=\"m53.14 57.52 7.26-7.18 23.1-18.58-20.17 19.56Zm6.76 7.99 15.43-14.07-14.57 9.84L53 67.8Zm-1.87 11.35 11.92-9.4-11.54 6.26L53 78.06ZM57.1 87.5l9.22-6.22-9.08 3.68-4.25 3.46Zm-4.13 10.9 3.82-2.8 7.12-1.88-7.15 4.52Zm-.01 10.08 3.84-2.52 5.72-.67-5.67 3.5Zm-.01 10.59 4.18-2.83 4.9.17-4.75 3.39Zm-.01 9.1 4.75-1.6 4.82.93-4.62 2.4Zm-.03 8.95 5.24-.19 6.06 2.18-6.1 1.28Zm-.98 9.68 5.79.07 10.25 5.46-10.72-1.49Zm3.68 11.25-6.07-2.72 5.26 5.48 31.1 20.49Z\" fill=\"url(#fr4-a)\"/><path d=\"M79.22 41.56 61.4 58.62 53 64.24 62.64 54ZM53 73.62l5.62-1.3 13.12-10.6-12.38 6.54Zm4.29 10.55-4.3.03 4.62-3.48 9.56-3.06Zm-.5 10.9 7.52-3.8-7.4-.22-3.94 2.5Zm0 10.47 5.88-2.07-5.93-1.27-3.78 1.73Zm.3 10.3 4.94-.97-5.05-1.73-4.04 1.43Zm.56 10.27 4.71-.2-4.9-2.6-4.53.82Zm.49 10.32 5.66.66-5.74-3.43-5.14.54Zm-.4 10.12 9.07 2.5-8.84-5.13-5.59.1Zm-1.76 10.16 17.25 7.12-16.51-10.02-6.3-1.04Zm23.85 25.67-27.8-15.69-5.52-4.69 7.09 1.8Z\" fill=\"url(#fr4-h)\"/></symbol></defs><path d=\"m166.69 170.54-.95-1.74 18.58 5.52-17.77-15.6 11.33.81L168 148.7l6.88-1.12-7.88-9.14 6.5-2-6.07-8.13 5.75-2.92-6.47-6.95 7.1-4.44-7.8-5.62 8.9-6.38-9-3.65 12.39-10.2-11.61-.88 16.15-15.07-13.25 2L190.3 52l-21.69 12.32 35.95-42.15-45.86 39.48 18.7-31.44-30.33 32.63 12.6-29L137.34 60l7.27-26.71-17.15 23.87 2.48-28.42L117.14 56l-4.8-40.89h-4.69L102.86 56l-12.8-27.26 2.49 28.42-17.16-23.85L82.67 60 60.31 33.87l12.6 29-30.34-32.66 18.7 31.44-45.84-39.48 35.94 42.15L29.68 52l20.73 22.2-13.24-2 16.18 15.07-11.6.88 12.39 10.2-9 3.65 8.86 6.34-7.77 5.66 7.12 4.44-6.48 6.95 5.75 2.92-6.07 8.13 6.5 2-7.93 9.14L52 148.7l-9.9 10.83 11.35-.81-17.77 15.6 18.58-5.52-.95 1.74-24.23 22.33 29.06-14-10 19.79 17.57-11.09-3 17.87 12.39-10.87v18.6l9.26-12 1.9 21.29 7.43-14.8 3.74 27.48 6.88-23.64 3 43h5.42l3-43 6.88 23.64 3.74-27.48 7.42 14.8 1.9-21.29 9.26 12v-18.6l12.32 10.84-3-17.87 17.57 11.09-10-19.79 29.06 14ZM161 147.01a51.06 51.06 0 0 1-51 51c-28.12 0-51-22.88-51-52V73h102Z\"/><path d=\"M211.13,10.49l-49.85,48.6-3.4-.58,19.53-28.3-5.16,1.52L150.67,57.28l-3.42-.58,12.43-22.83-5.64.22L140,55.46l-3.48-.59,8.12-21.56-5.55-1.17-9.89,21.49L125.58,53l4.36-24.27-5.18-2.95-6.48,26-3.85-.65-2.09-38.06h-4.68l-2.09,38.06-3.85.65-6.48-26-5.18,2.95L94.42,53l-3.59.62L80.94,32.14l-5.55,1.17,8.12,21.56L80,55.46,66,34.09l-5.64-.22L72.75,56.7l-3.42.58L47.75,31.73l-5.16-1.52,19.53,28.3-3.4.58L8.87,10.49l6.56,11.68L51,60.4,47.7,61,25.42,42.24,29.69,52l17.53,15.8L48.45,73,33.59,61.93,37.17,72.2l13,10,.41,2.7L39,77.94l2.79,10.21,9.85,6.12.11,1.56-9.1-4.06,2,10,7.51,3.55,0,1L45,104.21,46.24,114l5.9,1.86,0,.85-5.72-.88.48,9.56,4.94.78,0,.81-4.9,0-.34,9.49,4.72,0-.05.92-4.8.71-1.3,9.58,5.66-.9v1l-6.06,1.94-2.61,9.92,9-2.65.06.64L41,162.83l-5.28,11.49,17.07-7.77.74,2.64L23,191.78l6.08,1.09L56.5,176.52l1.57,2.7L40.72,196l7.45,2.64,15.3-12.72,2.06,2L55.17,201.59l7.6,3.82,10.29-11.82,1.5,1-6.71,13.79,7.2,4.81,8.1-13.34.8.48-4.21,16.46,6.48,5.72,6.3-16.89,1,.69L92,228.55l5.35,6.62,3.73-23.51,3.24,2.61,3.34,38.23h4.62l3.34-38.23,3.24-2.61,3.73,23.51,5.35-6.62-1.54-22.26,1-.69,6.3,16.89,6.48-5.72-4.21-16.46.8-.48,8.1,13.34,7.2-4.81-6.71-13.79,1.5-1,10.29,11.82,7.6-3.82-10.36-13.73,2.06-2,15.3,12.72,7.45-2.64-17.35-16.77,1.57-2.7,27.42,16.35,6.08-1.09-30.49-22.59.74-2.64,17.07,7.77L179,162.83l-10.26-5.31.06-.64,9,2.65-2.61-9.92-6.06-1.94v-1l5.66.9-1.3-9.58-4.8-.71-.05-.92,4.72,0-.34-9.49-4.9,0,0-.81,4.94-.78.48-9.56-5.72.88,0-.85,5.9-1.86,1.23-9.75-7.13,2.14,0-1,7.51-3.55,2-10-9.1,4.06.11-1.56,9.85-6.12L181,77.94,169.4,84.86l.41-2.7,13-10,3.58-10.27L171.55,73l1.23-5.19L190.31,52l4.27-9.8L172.3,61,169,60.4l35.61-38.23ZM160,147a50,50,0,0,1-50,50h0a50,50,0,0,1-50-50V72H160Z\" fill=\"url(#fr4-i)\"/><path d=\"m108.32 50.83-.66-37.78h4.68l-.66 37.78h-3.36z\" fill=\"url(#fr4-c)\"/><path d=\"M111.1 220.44h-2.2l-1.21 32.06h4.62l-1.21-32.06z\" fill=\"url(#fr4-j)\"/><path d=\"m174.06 64.88 1.08-4.16-10.92 7.29h-3.14l7.8-8.52-5.22-.89-9.64 9.4h-2.5l6.1-10.43-4.6-.78-9.38 11.22h-2.38l4.83-12.41-3.62-.62-8.63 13.03h-2.27l3-14.32-2.76-.47-7.16 14.79h-2.17l.95-16.28-2.78-.34-4.38 16.62h-1.96l-2.63-18.18h-3.36L105.7 68h-1.96l-4.38-16.62-2.78.34.95 16.28h-2.17L88.2 53.22l-2.76.47 3 14.32h-2.28l-8.63-13.03-3.62.62L78.74 68h-2.38l-9.39-11.2-4.58.77 6.1 10.44h-2.51l-9.64-9.4-5.22.88 7.8 8.52h-3.14l-10.92-7.29 1.08 4.16 9.97 9.85v3.56l-7.74-2.8.84 4.25 6.9 4.36.01 4.45-5.85-2.02.66 5.98 5.2 2.17v4.23l-5.1-2.2.52 6.03 4.6 1.29v4.87l-4.48-1 .01 6.1 4.48.41v4.57l-4.55-.64-.2 6.72h4.76v4.5l-4.97.02-.3 5.42 5.28-.38.01 4.05-5.6.94-.28 5.8 5.89-.72V147l.02.6-5.95 2.56.22 5.44 6.24-1.1.47 2.79-6.16 3.47.8 4.58 6.86-2.1.89 2.57-6.22 5.08L55 175.5l7.4-3.02 2.05 3.47-7.72 5.74 4.64 3.2 6.86-3.71 2.34 2.65-4.56 5.59 4.39 3.9 5-4.9 2.88 2.24-3.28 6.1 5.57 3.72 3.24-6.28 3.17 1.63-2.45 6.68 6.02 3.71 3.33-7.68 2.97.83-1.3 10.27 3.36 2.4 3.1-11.64 3.43.4 2.86 20.63h3.4l2.86-20.64 3.42-.39 3.11 11.64 3.37-2.4-1.3-10.27 2.96-.83 3.33 7.68 6.02-3.7-2.45-6.69 3.17-1.63 3.24 6.28 5.58-3.72-3.29-6.1 2.88-2.24 5 4.9 4.39-3.9-4.56-5.59 2.34-2.65 6.86 3.72 4.64-3.21-7.72-5.74 2.04-3.47 7.4 3.02 1.84-4.6-6.22-5.09.89-2.56 6.86 2.09.8-4.58-6.16-3.47.47-2.8 6.24 1.1.22-5.43-5.95-2.56.02-.6v-2.32l5.9.72-.3-5.8-5.6-.94.01-4.05 5.29.38-.3-5.42-4.98-.01v-4.51h4.77l-.2-6.72-4.56.64.01-4.57 4.48-.4v-6.1l-4.47.99v-4.87l4.6-1.28.52-6.04-5.1 2.2v-4.23l5.2-2.17.66-5.98-5.86 2.02.01-4.45 6.91-4.36.84-4.25-7.74 2.8v-3.56ZM160 147.01a50 50 0 1 1-100 0V72h100Z\" fill=\"url(#fr4-k)\"/><use height=\"242.02\" transform=\"matrix(-1 0 0 1 108.91 10.49)\" width=\"100.04\" xlink:href=\"#fr4-l\"/><use height=\"242.02\" transform=\"translate(111.09 10.49)\" width=\"100.04\" xlink:href=\"#fr4-l\"/><path d=\"M110 198c-28.12 0-51-22.87-51-52V70.97h102v76A51.07 51.07 0 0 1 110 198Z\" fill=\"none\" stroke=\"url(#fr4-m)\" stroke-width=\"2\"/><path d=\"M160 72.01H60l-2-2h104l-2 2z\" fill=\"url(#fr4-n)\"/>'\n                    )\n                )\n            );\n    }\n}\n"
    },
    "contracts/test/ShieldsGasTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport '../Shields.sol';\n\n/// @dev Generate Customizable Shields\ncontract ShieldsGasTest {\n    Shields public immutable shields;\n\n    constructor(Shields _shields) {\n        shields = _shields;\n    }\n\n    function gasSnapshotTokenURI(uint256 tokenId) public view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        shields.tokenURI(tokenId);\n        return gasBefore - gasleft();\n    }\n}\n"
    },
    "contracts/SVGs/Hardware/HardwareSVGs22.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport '../../interfaces/IHardwareSVGs.sol';\nimport '../../interfaces/ICategories.sol';\n\n/// @dev Experimenting with a contract that holds huuuge svg strings\ncontract HardwareSVGs22 is IHardwareSVGs, ICategories {\n    function hardware_80() public pure returns (HardwareData memory) {\n        return\n            HardwareData(\n                'Necklace',\n                HardwareCategories.STANDARD,\n                string(\n                    abi.encodePacked(\n                        '<defs><linearGradient gradientTransform=\"matrix(0, 1, 1, 0, -104.2, 104.2)\" gradientUnits=\"userSpaceOnUse\" id=\"h80-a\" x1=\"-104.2\" x2=\"-88.77\" y1=\"107.01\" y2=\"107.01\"><stop offset=\"0\" stop-color=\"#fff\"/><stop offset=\"0.5\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient gradientTransform=\"matrix(0, 1, 1, 0, -104.2, 104.2)\" gradientUnits=\"userSpaceOnUse\" id=\"h80-b\" x1=\"-103.34\" x2=\"-89.63\" y1=\"108.51\" y2=\"108.51\"><stop offset=\"0\" stop-color=\"gray\"/><stop offset=\"0.5\" stop-color=\"#fff\"/><stop offset=\"1\" stop-color=\"gray\"/></linearGradient><linearGradient gradientTransform=\"matrix(0, 1, 1, 0, -108.85, 108.85)\" gradientUnits=\"userSpaceOnUse\" id=\"h80-c\" x1=\"-108.85\" x2=\"-103.34\" y1=\"113.74\" y2=\"113.74\"><stop offset=\"0\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient gradientTransform=\"translate(8072.29 8217.09) rotate(-90)\" id=\"h80-d\" x1=\"8197.87\" x2=\"8192.37\" xlink:href=\"#h80-c\" y1=\"-8067.4\" y2=\"-8067.4\"/><linearGradient id=\"h80-e\" x1=\"-102.44\" x2=\"-107.35\" xlink:href=\"#h80-c\" y1=\"115.24\" y2=\"115.24\"/><linearGradient gradientTransform=\"translate(8072.29 8217.09) rotate(-90)\" id=\"h80-f\" x1=\"8193.87\" x2=\"8198.77\" xlink:href=\"#h80-c\" y1=\"-8065.9\" y2=\"-8065.9\"/><clipPath id=\"h80-g\"><path d=\"M160,72v75a50,50,0,0,1-100,0V72Z\" fill=\"none\"/></clipPath><filter id=\"h80-h\" name=\"shadow\"><feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"0\"/></filter><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-i\" x1=\"110\" x2=\"110\" xlink:href=\"#h80-a\" y1=\"175.44\" y2=\"148.56\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-j\" x1=\"96.56\" x2=\"123.44\" xlink:href=\"#h80-a\" y1=\"162\" y2=\"162\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-k\" x1=\"106.86\" x2=\"111.04\" xlink:href=\"#h80-c\" y1=\"182.56\" y2=\"155.17\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-l\" x1=\"110\" x2=\"110\" xlink:href=\"#h80-b\" y1=\"131\" y2=\"131\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-m\" x1=\"58.34\" x2=\"110.75\" xlink:href=\"#h80-b\" y1=\"102.68\" y2=\"102.68\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-n\" x1=\"86.51\" x2=\"86.51\" xlink:href=\"#h80-c\" y1=\"132.5\" y2=\"71.84\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-o\" x1=\"107.67\" x2=\"112.33\" xlink:href=\"#h80-c\" y1=\"177.3\" y2=\"146.81\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-p\" x1=\"110\" x2=\"110\" xlink:href=\"#h80-c\" y1=\"142.75\" y2=\"128.75\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-q\" x1=\"110\" x2=\"110\" xlink:href=\"#h80-c\" y1=\"130\" y2=\"141.5\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-r\" x1=\"110\" x2=\"161.66\" xlink:href=\"#h80-b\" y1=\"102.68\" y2=\"102.68\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h80-s\" x1=\"135.24\" x2=\"135.24\" xlink:href=\"#h80-c\" y1=\"132.5\" y2=\"71.84\"/><linearGradient gradientTransform=\"matrix(0, -1, -1, 0, 8490.22, -7930.81)\" id=\"h80-t\" x1=\"-8079.37\" x2=\"-8069.59\" xlink:href=\"#h80-c\" y1=\"8380.72\" y2=\"8380.72\"/><linearGradient gradientTransform=\"matrix(0, -1, -1, 0, 8490.22, -7930.81)\" id=\"h80-u\" x1=\"-8069.59\" x2=\"-8079.37\" xlink:href=\"#h80-c\" y1=\"8379.72\" y2=\"8379.72\"/><symbol id=\"h80-w\" viewBox=\"0 0 7.14 15.42\"><path d=\"M1.5,7.71a7.75,7.75,0,0,0,4.14,6.86l-1.5.85h0A9.25,9.25,0,0,1,4.14,0h0l1.5.85A7.75,7.75,0,0,0,1.5,7.71Z\" fill=\"url(#h80-a)\"/><path d=\"M3,7.71c0,4.26,4.13,6,4.14,6l-1.5.9A7.75,7.75,0,0,1,5.64.85l1.5.91S3,3.41,3,7.71Z\" fill=\"url(#h80-b)\"/></symbol><symbol id=\"h80-v\" viewBox=\"0 0 7.14 24.73\"><use height=\"15.42\" transform=\"translate(0 4.65)\" width=\"7.14\" xlink:href=\"#h80-w\"/><polygon fill=\"url(#h80-c)\" points=\"5.64 5.5 4.14 4.65 4.14 0 5.64 1.5 5.64 5.5\"/><polygon fill=\"url(#h80-d)\" points=\"5.64 19.22 4.14 20.07 4.14 24.73 5.64 23.22 5.64 19.22\"/><polygon fill=\"url(#h80-e)\" points=\"7.14 6.41 5.64 5.5 5.64 1.5 7.14 3 7.14 6.41\"/><polygon fill=\"url(#h80-f)\" points=\"7.14 18.32 5.64 19.22 5.64 23.22 7.14 21.73 7.14 18.32\"/></symbol></defs><g clip-path=\"url(#h80-g)\"><g filter=\"url(#h80-h)\"><path d=\"M110.7,161.3l-.7-12.74h0c-.88,2.72-4.38,2.77-4.38,6.18,0,2.46,3.57,3,1.86,4.74s-2.28-1.86-4.74-1.86c-3.41,0-3.46,3.5-6.18,4.38l12.82.5.62,12.94h0c.88-2.72,4.38-2.77,4.38-6.18,0-2.46-3.57-3-1.86-4.74s2.28,1.86,4.74,1.86c3.41,0,3.46-3.5,6.18-4.38Z\" fill=\"url(#h80-i)\"/><path d=\"M123.44,162c-2.72-.88-2.77-4.38-6.18-4.38-2.46,0-3,3.57-4.74,1.86s1.86-2.28,1.86-4.74c0-3.41-3.5-3.46-4.38-6.18V162H96.56c2.72.88,2.77,4.38,6.18,4.38,2.46,0,3-3.57,4.74-1.86s-1.86,2.28-1.86,4.74c0,3.41,3.5,3.46,4.38,6.18V162Z\" fill=\"url(#h80-j)\"/><path d=\"M113.24,162.48a2.67,2.67,0,0,0-2.76,2.76c0,1.62,2.12,2.21,2.12,4s-1.7,2.17-2.6,3.27c-.9-1.1-2.6-1.5-2.6-3.27s2.12-2.36,2.12-4a2.67,2.67,0,0,0-2.76-2.76c-1.62,0-2.21,2.12-4,2.12s-2.17-1.7-3.27-2.6c1.1-.9,1.5-2.6,3.27-2.6s2.36,2.12,4,2.12a2.67,2.67,0,0,0,2.76-2.76c0-1.62-2.12-2.21-2.12-4s1.7-2.17,2.6-3.27c.9,1.1,2.6,1.5,2.6,3.27s-2.12,2.36-2.12,4a2.67,2.67,0,0,0,2.76,2.76c1.62,0,2.21-2.12,4-2.12s2.17,1.7,3.27,2.6c-1.1.9-1.5,2.6-3.27,2.6S114.86,162.48,113.24,162.48Z\" fill=\"url(#h80-k)\"/><path d=\"M110,131\" fill=\"none\" stroke=\"url(#h80-l)\" stroke-miterlimit=\"10\"/><path d=\"M110.2,132.76H110c-13,0-25.48-10.26-37.23-30.5A179.86,179.86,0,0,1,59.05,72.07\" fill=\"none\" stroke=\"url(#h80-m)\" stroke-miterlimit=\"10\" stroke-width=\"1.5\"/><path d=\"M60,72s19.69,60,50,60a22.76,22.76,0,0,0,3.42-.26\" fill=\"none\" stroke=\"url(#h80-n)\" stroke-miterlimit=\"10\"/><path d=\"M104.9,132.94a15,15,0,0,0,3.46.52l.36-1,2.55-1.93Z\"/><use height=\"24.72\" transform=\"translate(93.5 149.69)\" width=\"7.14\" xlink:href=\"#h80-v\"/><use height=\"24.72\" transform=\"translate(122.36 145.55) rotate(90)\" width=\"7.14\" xlink:href=\"#h80-v\"/><use height=\"24.72\" transform=\"translate(126.5 174.42) rotate(180)\" width=\"7.14\" xlink:href=\"#h80-v\"/><use height=\"24.72\" transform=\"translate(97.64 178.55) rotate(-90)\" width=\"7.14\" xlink:href=\"#h80-v\"/><path d=\"M125,162.05a7.77,7.77,0,0,0-4.14-6.86v-4h-4a7.75,7.75,0,0,0-13.72,0h-4v4a7.75,7.75,0,0,0,0,13.72v4h4a7.76,7.76,0,0,0,13.72,0h4v-4A7.75,7.75,0,0,0,125,162.05Z\" fill=\"none\" stroke=\"url(#h80-o)\" stroke-miterlimit=\"10\"/><circle cx=\"110\" cy=\"135.75\" fill=\"none\" r=\"6\" stroke=\"url(#h80-p)\" stroke-miterlimit=\"10\" stroke-width=\"2\"/><circle cx=\"110\" cy=\"135.75\" fill=\"none\" r=\"5\" stroke=\"url(#h80-q)\" stroke-miterlimit=\"10\" stroke-width=\"1.5\"/><path d=\"M161,72.07c0,.17-19.78,60.69-50.95,60.69\" fill=\"none\" stroke=\"url(#h80-r)\" stroke-miterlimit=\"10\" stroke-width=\"1.5\"/><path d=\"M110,132c30.31,0,50-60,50-60\" fill=\"none\" stroke=\"url(#h80-s)\" stroke-miterlimit=\"10\"/><path d=\"M110,148.56l-1-.95v-7.83l1-1Z\" fill=\"url(#h80-t)\"/><path d=\"M110,138.78l1,1v7.83l-1,.95Z\" fill=\"url(#h80-u)\"/></g></g>'\n                    )\n                )\n            );\n    }\n\n    function hardware_81() public pure returns (HardwareData memory) {\n        return\n            HardwareData(\n                'Pillar and Twin Quatrefoils',\n                HardwareCategories.STANDARD,\n                string(\n                    abi.encodePacked(\n                        '<defs><linearGradient gradientTransform=\"matrix(1, 0, 0, -1, 0, 16387.69)\" gradientUnits=\"userSpaceOnUse\" id=\"h81-a\" x2=\"17.69\" y1=\"16387.02\" y2=\"16387.02\"><stop offset=\"0\" stop-color=\"#fff\"/><stop offset=\"0.5\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient gradientTransform=\"matrix(1, 0, 0, -1, 0, 16387.69)\" gradientUnits=\"userSpaceOnUse\" id=\"h81-b\" x2=\"17.69\" y1=\"16385.67\" y2=\"16385.67\"><stop offset=\"0\" stop-color=\"gray\"/><stop offset=\"0.5\" stop-color=\"#fff\"/><stop offset=\"1\" stop-color=\"gray\"/></linearGradient><linearGradient gradientUnits=\"userSpaceOnUse\" id=\"h81-c\" x1=\"5.28\" x2=\"5.28\" y1=\"9.63\" y2=\"3.48\"><stop offset=\"0\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><filter id=\"h81-d\" name=\"shadow\"><feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"0\"/></filter><linearGradient gradientUnits=\"userSpaceOnUse\" id=\"h81-e\" x1=\"96.97\" x2=\"119.98\" y1=\"131.89\" y2=\"131.89\"><stop offset=\"0\" stop-color=\"gray\"/><stop offset=\"0.24\" stop-color=\"#4b4b4b\"/><stop offset=\"0.68\" stop-color=\"#fff\"/><stop offset=\"1\" stop-color=\"#4b4b4b\"/></linearGradient><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h81-f\" x1=\"98.3\" x2=\"121.71\" xlink:href=\"#h81-a\" y1=\"175.4\" y2=\"175.4\"/><linearGradient gradientTransform=\"matrix(1, 0, 0, 1, 0, 0)\" id=\"h81-g\" x1=\"96.73\" x2=\"123.27\" xlink:href=\"#h81-a\" y1=\"88.5\" y2=\"88.5\"/><linearGradient id=\"h81-h\" x1=\"81.86\" x2=\"86.04\" xlink:href=\"#h81-c\" y1=\"153.24\" y2=\"125.85\"/><linearGradient id=\"h81-i\" x1=\"131.86\" x2=\"136.04\" xlink:href=\"#h81-c\" y1=\"153.24\" y2=\"125.85\"/><symbol id=\"h81-j\" viewBox=\"0 0 17.69 3.69\"><path d=\"M0,1.34,1.34,0h15l1.35,1.34Z\" fill=\"url(#h81-a)\"/><path d=\"M17.69,1.34,16.34,2.69h-15L0,1.34Z\" fill=\"url(#h81-b)\"/><path d=\"M16.34,2.69h-15v1h15Z\"/></symbol><symbol id=\"h81-n\" viewBox=\"0 0 10.56 10.56\"><path d=\"M10.56,0h0C9.87,2.14,7.12,2.18,7.12,4.86c0,1.93,2.81,2.38,1.46,3.72S6.79,7.12,4.86,7.12C2.18,7.12,2.14,9.87,0,10.56H10.56Z\" fill=\"url(#h81-c)\"/></symbol></defs><g filter=\"url(#h81-d)\"><path d=\"M96.73,90c2.59,1.23,5.24,1.75,7.94,4.65L102.82,165a4.82,4.82,0,0,1-2.78,2.57v6.2H120v-6.2a4.82,4.82,0,0,1-2.78-2.57l-1.85-70.38c2.69-2.9,5.28-3.42,7.88-4.65Z\" fill=\"url(#h81-e)\"/><path d=\"M98.3,173.79h23.41V177H98.3Z\" fill=\"url(#h81-f)\"/><path d=\"M96.73,87h26.54v3H96.73Z\" fill=\"url(#h81-g)\"/><use height=\"3.69\" transform=\"translate(103.27 102) scale(0.76 1)\" width=\"17.69\" xlink:href=\"#h81-j\"/><use height=\"3.69\" transform=\"translate(101.49 159.31) scale(0.96 1)\" width=\"17.69\" xlink:href=\"#h81-j\"/><use height=\"3.69\" transform=\"translate(101.49 155.62) scale(0.96 1)\" width=\"17.69\" xlink:href=\"#h81-j\"/><use height=\"3.69\" transform=\"translate(98.24 167.59) scale(1.33 1)\" width=\"17.69\" xlink:href=\"#h81-j\"/><polygon points=\"115.36 95.64 104.64 95.64 104.67 94.64 115.34 94.64 115.36 95.64\"/><use height=\"10.56\" transform=\"translate(71.56 119.23) scale(1.27)\" width=\"10.56\" xlink:href=\"#h81-n\"/><use height=\"10.56\" transform=\"matrix(0, -1.27, 1.27, 0, 71.56, 146.12)\" width=\"10.56\" xlink:href=\"#h81-n\"/><use height=\"10.56\" transform=\"translate(98.44 146.12) rotate(180) scale(1.27)\" width=\"10.56\" xlink:href=\"#h81-n\"/><use height=\"10.56\" transform=\"translate(98.44 119.23) rotate(90) scale(1.27)\" width=\"10.56\" xlink:href=\"#h81-n\"/><path d=\"M88.24,133.16a2.67,2.67,0,0,0-2.76,2.75c0,1.63,2.12,2.22,2.12,4s-1.7,2.17-2.6,3.26c-.9-1.09-2.6-1.49-2.6-3.26s2.12-2.36,2.12-4a2.67,2.67,0,0,0-2.76-2.75c-1.62,0-2.21,2.11-4,2.11s-2.17-1.69-3.27-2.59c1.1-.9,1.5-2.6,3.27-2.6s2.36,2.11,4,2.11a2.67,2.67,0,0,0,2.76-2.75c0-1.63-2.12-2.21-2.12-4s1.7-2.17,2.6-3.27c.9,1.1,2.6,1.49,2.6,3.27s-2.12,2.35-2.12,4a2.67,2.67,0,0,0,2.76,2.75c1.62,0,2.21-2.11,4-2.11s2.17,1.7,3.27,2.6c-1.1.9-1.5,2.59-3.27,2.59S89.86,133.16,88.24,133.16Z\" fill=\"url(#h81-h)\"/><use height=\"10.56\" transform=\"translate(121.56 119.23) scale(1.27)\" width=\"10.56\" xlink:href=\"#h81-n\"/><use height=\"10.56\" transform=\"matrix(0, -1.27, 1.27, 0, 121.56, 146.12)\" width=\"10.56\" xlink:href=\"#h81-n\"/><use height=\"10.56\" transform=\"translate(148.44 146.12) rotate(180) scale(1.27)\" width=\"10.56\" xlink:href=\"#h81-n\"/><use height=\"10.56\" transform=\"translate(148.44 119.23) rotate(90) scale(1.27)\" width=\"10.56\" xlink:href=\"#h81-n\"/><path d=\"M138.24,133.16a2.67,2.67,0,0,0-2.76,2.75c0,1.63,2.12,2.22,2.12,4s-1.7,2.17-2.6,3.26c-.9-1.09-2.6-1.49-2.6-3.26s2.12-2.36,2.12-4a2.67,2.67,0,0,0-2.76-2.75c-1.62,0-2.21,2.11-4,2.11s-2.17-1.69-3.27-2.59c1.1-.9,1.5-2.6,3.27-2.6s2.36,2.11,4,2.11a2.67,2.67,0,0,0,2.76-2.75c0-1.63-2.12-2.21-2.12-4s1.7-2.17,2.6-3.27c.9,1.1,2.6,1.49,2.6,3.27s-2.12,2.35-2.12,4a2.67,2.67,0,0,0,2.76,2.75c1.62,0,2.21-2.11,4-2.11s2.17,1.7,3.27,2.6c-1.1.9-1.5,2.59-3.27,2.59S139.86,133.16,138.24,133.16Z\" fill=\"url(#h81-i)\"/></g>'\n                    )\n                )\n            );\n    }\n\n    function hardware_82() public pure returns (HardwareData memory) {\n        return\n            HardwareData(\n                'Horse-head Gables',\n                HardwareCategories.STANDARD,\n                string(\n                    abi.encodePacked(\n                        '<defs><linearGradient gradientUnits=\"userSpaceOnUse\" id=\"h82-a\" x1=\"-1.14\" x2=\"53.07\" y1=\"73.14\" y2=\"13.59\"><stop offset=\"0\" stop-color=\"#4b4b4b\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient gradientUnits=\"userSpaceOnUse\" id=\"h82-b\" x1=\"22.37\" x2=\"22.37\" y1=\"14.71\" y2=\"65.28\"><stop offset=\"0\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient id=\"h82-c\" x1=\"65.95\" x2=\"65.95\" xlink:href=\"#h82-a\" y1=\"9.06\" y2=\"26.48\"/><linearGradient id=\"h82-d\" x1=\"51.46\" x2=\"51.46\" xlink:href=\"#h82-a\" y1=\"8.63\" y2=\"30.48\"/><linearGradient gradientUnits=\"userSpaceOnUse\" id=\"h82-e\" x2=\"20\" y1=\"63.78\" y2=\"63.78\"><stop offset=\"0\" stop-color=\"#fff\"/><stop offset=\"0.5\" stop-color=\"gray\"/><stop offset=\"1\" stop-color=\"#fff\"/></linearGradient><linearGradient id=\"h82-f\" x1=\"36.65\" x2=\"36.65\" xlink:href=\"#h82-b\" y1=\"1.59\" y2=\"63.28\"/><linearGradient id=\"h82-g\" x1=\"40.65\" x2=\"40.65\" xlink:href=\"#h82-a\" y1=\"15.41\" y2=\"11.58\"/><filter id=\"h82-h\" name=\"shadow\"><feDropShadow dx=\"0\" dy=\"2\" stdDeviation=\"0\"/></filter><linearGradient id=\"h82-i\" x1=\"110\" x2=\"110\" xlink:href=\"#h82-b\" y1=\"128.29\" y2=\"135.29\"/><symbol id=\"h82-j\" viewBox=\"0 0 73.13 65.28\"><path d=\"M73.13,11.68c-1.5-.59-4.09-3.25-5-5-4.7-9-15.14-7.3-19.35-4.14s-8.6,8.53-12.2,9.05l5,3.83L0,65.28H20l29-34.8c0-10.14,1.42-18.9,7.74-18.9-1.11,3.36,1.88,7.1-1.12,11.21A27.62,27.62,0,0,0,59,26.48a129.84,129.84,0,0,1,7.4-12.55C68.08,11.43,70.75,13.52,73.13,11.68Z\" fill=\"url(#h82-a)\"/><polygon fill=\"url(#h82-b)\" points=\"44.74 14.71 41.56 15.41 0 65.28 6.13 62.41 44.74 14.71\"/><path d=\"M73.13,11.68,64.07,9.06l-5.3,14.16L59,26.48a129.84,129.84,0,0,1,7.4-12.55C68.08,11.43,70.75,13.52,73.13,11.68Z\" fill=\"url(#h82-c)\"/><path d=\"M56.74,11.58a19.12,19.12,0,0,1,2.78-2c-14.85-6-16.11,18.87-16.11,18.87l5.59,2C49,20.34,50.42,11.58,56.74,11.58Z\" fill=\"url(#h82-d)\"/><polygon fill=\"url(#h82-e)\" points=\"18.59 62.28 6.13 62.41 0 65.28 20 65.28 18.59 62.28\"/><path d=\"M4.27,63.28,44.74,14.71a15.06,15.06,0,0,1-4.33-2.59c3.83-2.41,7.32-6.31,9.56-8C60.35-3.66,67.49,8.8,69,10.49c0,0-2.82.21-3.68,1.55s-4.9,8.1-6.57,11.18l-1.06-.82C60,18.29,57.19,13,59.52,9.58c0,0-12.46-4.11-12.52,20.17L19.06,63.28Z\" fill=\"url(#h82-f)\"/><path d=\"M36.57,11.58l3.84.54,4.33,2.59-3.18.7S39.4,14.79,36.57,11.58Z\" fill=\"url(#h82-g)\"/></symbol></defs><g filter=\"url(#h82-h)\"><use height=\"65.28\" transform=\"matrix(-1, 0, 0, 1, 145, 96.51)\" width=\"73.13\" xlink:href=\"#h82-j\"/><polygon points=\"121.36 133.41 119.69 134.45 112.42 143.6 112.08 146.31 108.12 141.45 118.98 130.56 121.36 133.41\"/><use height=\"65.28\" transform=\"translate(75 96.51)\" width=\"73.13\" xlink:href=\"#h82-j\"/><circle cx=\"110\" cy=\"131.79\" r=\"3\" stroke=\"url(#h82-i)\"/></g>'\n                    )\n                )\n            );\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}