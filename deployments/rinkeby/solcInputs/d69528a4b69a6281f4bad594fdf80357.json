{
  "language": "Solidity",
  "sources": {
    "contracts/ShieldDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './interfaces/ICategories.sol';\nimport './interfaces/IFrameGenerator.sol';\nimport './interfaces/IFieldGenerator.sol';\nimport './interfaces/IHardwareGenerator.sol';\nimport './interfaces/IShieldBadgeSVGs.sol';\nimport './interfaces/IFrameSVGs.sol';\nimport './interfaces/IShields.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport 'base64-sol/base64.sol';\n\n/// @dev Generate Shield Metadata\ncontract ShieldDescriptor {\n    using Strings for uint8;\n\n    IFieldGenerator public immutable fieldGenerator;\n    IHardwareGenerator public immutable hardwareGenerator;\n    IFrameGenerator public immutable frameGenerator;\n    IShieldBadgeSVGs public immutable shieldBadgeSVGGenerator;\n\n    constructor(\n        IFieldGenerator _fieldGenerator,\n        IHardwareGenerator _hardwareGenerator,\n        IFrameGenerator _frameGenerator,\n        IShieldBadgeSVGs _shieldBadgeSVGGenerator\n    ) {\n        fieldGenerator = _fieldGenerator;\n        hardwareGenerator = _hardwareGenerator;\n        frameGenerator = _frameGenerator;\n        shieldBadgeSVGGenerator = _shieldBadgeSVGGenerator;\n    }\n\n    function generateShieldURI(IShields.Shield memory shield) external view returns (string memory) {\n        IFieldSVGs.FieldData memory field = fieldGenerator.generateField(shield.field, shield.colors);\n        IHardwareSVGs.HardwareData memory hardware = hardwareGenerator.generateHardware(shield.hardware);\n        IFrameSVGs.FrameData memory frame = frameGenerator.generateFrame(shield.frame);\n\n        string memory name = generateTitle(field.title, hardware.title, frame.title, shield.colors);\n        bytes memory attributes = generateAttributesJSON(field, hardware, frame, shield.colors);\n\n        return\n            string(\n                abi.encodePacked(\n                    'data:application/json;base64,',\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                name,\n                                '\", \"description\":\"5000 Shields, designed and built on-chain with Area Technology. Each Shield is composed by the owner of a Shield Badge using the EmblemWeaver software, then built using Area',\n                                \"'\",\n                                's proprietary machinery.\", \"image\": \"data:image/svg+xml;base64,',\n                                Base64.encode(bytes(generateSVG(field.svgString, hardware.svgString, frame.svgString))),\n                                '\", \"attributes\": ',\n                                attributes,\n                                '}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function generateShieldBadgeURI(IShields.ShieldBadge shieldBadge) external view returns (string memory) {\n        string memory badgeTitle;\n\n        if (shieldBadge == IShields.ShieldBadge.MAKER) {\n            badgeTitle = 'Maker ';\n        } else if (shieldBadge == IShields.ShieldBadge.STANDARD) {\n            badgeTitle = '';\n        }\n\n        return\n            string(\n                abi.encodePacked(\n                    'data:application/json;base64,',\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                badgeTitle,\n                                'Shield Badge',\n                                '\", \"description\":\"An unused Shield Badge. Can be used to build 1 Shield.\", \"image\": \"data:image/svg+xml;base64,',\n                                Base64.encode(bytes(shieldBadgeSVGGenerator.generateShieldBadgeSVG(shieldBadge))),\n                                '\", \"attributes\": [{\"trait_type\": \"Status\", \"value\":\"Unbuilt\"}]}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function generateTitle(\n        string memory fieldTitle,\n        string memory hardwareTitle,\n        string memory frameTitle,\n        uint24[4] memory colors\n    ) internal view returns (string memory) {\n        bytes memory frameString = '';\n        if (bytes(frameTitle).length > 0) {\n            frameString = abi.encodePacked(frameTitle, ': ');\n        }\n        return\n            string(abi.encodePacked(frameString, hardwareTitle, ' on ', generateColorTitleSnippet(colors), fieldTitle));\n    }\n\n    function generateColorTitleSnippet(uint24[4] memory colors) internal view returns (string memory) {\n        bytes memory colorTitle = bytes(fieldGenerator.colorTitle(colors[0]));\n        if (colors[1] > 0) {\n            colorTitle = abi.encodePacked(\n                colorTitle,\n                colors[2] > 0 ? ' ' : ' and ',\n                fieldGenerator.colorTitle(colors[1])\n            );\n        }\n        if (colors[2] > 0) {\n            colorTitle = abi.encodePacked(\n                colorTitle,\n                colors[3] > 0 ? ' ' : ' and ',\n                fieldGenerator.colorTitle(colors[2])\n            );\n        }\n        if (colors[3] > 0) {\n            colorTitle = abi.encodePacked(colorTitle, ' and ', fieldGenerator.colorTitle(colors[3]));\n        }\n        colorTitle = abi.encodePacked(colorTitle, ' ');\n        return string(colorTitle);\n    }\n\n    function generateSVG(\n        string memory fieldSVG,\n        string memory hardwareSVG,\n        string memory frameSVG\n    ) internal pure returns (bytes memory svg) {\n        svg = abi.encodePacked(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 220 264\">',\n            fieldSVG,\n            hardwareSVG,\n            frameSVG,\n            '</svg>'\n        );\n    }\n\n    function generateAttributesJSON(\n        IFieldSVGs.FieldData memory fieldData,\n        IHardwareSVGs.HardwareData memory hardwareData,\n        IFrameSVGs.FrameData memory frameData,\n        uint24[4] memory colors\n    ) internal view returns (bytes memory attributesJSON) {\n        attributesJSON = abi.encodePacked(\n            '[{\"trait_type\":\"Field\", \"value\":\"',\n            fieldData.title,\n            '\"}, {\"trait_type\":\"Hardware\", \"value\":\"',\n            hardwareData.title,\n            '\"}, {\"trait_type\":\"Status\", \"value\":\"Built',\n            '\"}, {\"trait_type\":\"Field Type\", \"value\":\"',\n            getFieldTypeString(fieldData.fieldType),\n            '\"}, {\"trait_type\":\"Hardware Type\", \"value\":\"',\n            getHardwareTypeString(hardwareData.hardwareType),\n            conditionalFrameAttribute(frameData.title),\n            colorAttributes(colors)\n        );\n    }\n\n    function getFieldTypeString(ICategories.FieldCategories category) internal pure returns (string memory typeString) {\n        if (category == ICategories.FieldCategories.MYTHIC) {\n            typeString = 'Mythic';\n        } else {\n            typeString = 'Heraldic';\n        }\n    }\n\n    function getHardwareTypeString(ICategories.HardwareCategories category)\n        internal\n        pure\n        returns (string memory typeString)\n    {\n        if (category == ICategories.HardwareCategories.SPECIAL) {\n            typeString = 'Special';\n        } else {\n            typeString = 'Standard';\n        }\n    }\n\n    function conditionalFrameAttribute(string memory frameTitle) internal pure returns (bytes memory frameAttribute) {\n        if (bytes(frameTitle).length > 0) {\n            frameAttribute = abi.encodePacked('\"}, {\"trait_type\":\"Frame\", \"value\":\"', frameTitle);\n        } else {\n            frameAttribute = '';\n        }\n    }\n\n    function colorAttributes(uint24[4] memory colors) private view returns (bytes memory colorArributes) {\n        colorArributes = abi.encodePacked(\n            '\"}, {\"trait_type\":\"Color 1\", \"value\":\"',\n            fieldGenerator.colorTitle(colors[0]),\n            conditionalColorAttribute(colors[1], 2),\n            conditionalColorAttribute(colors[2], 3),\n            conditionalColorAttribute(colors[3], 4),\n            '\"}]'\n        );\n    }\n\n    function conditionalColorAttribute(uint24 color, uint8 nColor) private view returns (bytes memory colorArribute) {\n        if (color != 0) {\n            colorArribute = abi.encodePacked(\n                '\"}, {\"trait_type\":\"Color ',\n                nColor.toString(),\n                '\", \"value\":\"',\n                fieldGenerator.colorTitle(color)\n            );\n        } else {\n            colorArribute = '';\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ICategories.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\n/// @dev Generate Shield SVG\ninterface ICategories {\n    enum FieldCategories {\n        MYTHIC,\n        HERALDIC\n    }\n\n    enum HardwareCategories {\n        STANDARD,\n        SPECIAL\n    }\n}\n"
    },
    "contracts/interfaces/IFrameGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './IFrameSVGs.sol';\n\n/// @dev Generate Shield SVG\ninterface IFrameGenerator {\n    struct FrameSVGs {\n        IFrameSVGs frameSVGs1;\n        IFrameSVGs frameSVGs2;\n    }\n\n    /// @notice Generates Frame snippet of SVG\n    /// @param Frame uint representing Frame selection\n    /// @return FrameData containing svg snippet and Frame title and Frame type\n    function generateFrame(uint16 Frame) external view returns (IFrameSVGs.FrameData memory);\n}\n"
    },
    "contracts/interfaces/IFieldGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './IFieldSVGs.sol';\nimport './IColors.sol';\n\n/// @dev Generate Field SVG\ninterface IFieldGenerator {\n    /// @notice Generates field snippet of SVG of the specified colors\n    /// @param field uint representing field selection\n    /// @param colors to be rendered in the field svg\n    /// @return FieldData containing svg snippet and field title\n    function generateField(uint16 field, uint24[4] memory colors) external view returns (IFieldSVGs.FieldData memory);\n\n    event ColorAdded(uint24 color, string title);\n\n    struct Color {\n        string title;\n        bool exists;\n    }\n\n    /// @notice Returns true if color exists in contract, else false.\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorExists(uint24 color) external view returns (bool);\n\n    /// @notice Returns the title string corresponding to the 3-byte color\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorTitle(uint24 color) external view returns (string memory);\n\n    struct FieldSVGs {\n        IFieldSVGs fieldSVGs1;\n        IFieldSVGs fieldSVGs2;\n        IFieldSVGs fieldSVGs3;\n        IFieldSVGs fieldSVGs4;\n        IFieldSVGs fieldSVGs5;\n        IFieldSVGs fieldSVGs6;\n        IFieldSVGs fieldSVGs7;\n        IFieldSVGs fieldSVGs8;\n        IFieldSVGs fieldSVGs9;\n        IFieldSVGs fieldSVGs10;\n        IFieldSVGs fieldSVGs11;\n        IFieldSVGs fieldSVGs12;\n        IFieldSVGs fieldSVGs13;\n        IFieldSVGs fieldSVGs14;\n        IFieldSVGs fieldSVGs15;\n        IFieldSVGs fieldSVGs16;\n        IFieldSVGs fieldSVGs17;\n        IFieldSVGs fieldSVGs18;\n        IFieldSVGs fieldSVGs19;\n        IFieldSVGs fieldSVGs20;\n        IFieldSVGs fieldSVGs21;\n        IFieldSVGs fieldSVGs22;\n        IFieldSVGs fieldSVGs23;\n        IFieldSVGs fieldSVGs24;\n    }\n}\n"
    },
    "contracts/interfaces/IHardwareGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './IHardwareSVGs.sol';\n\n/// @dev Generate Shield SVG\ninterface IHardwareGenerator {\n    /// @notice Generates hardware snippet of SVG\n    /// @param hardware uint representing hardware selection\n    /// @return HardwareData containing svg snippet and hardware title and hardware type\n    function generateHardware(uint16 hardware) external view returns (IHardwareSVGs.HardwareData memory);\n\n    struct HardwareSVGs {\n        IHardwareSVGs hardwareSVGs1;\n        IHardwareSVGs hardwareSVGs2;\n        IHardwareSVGs hardwareSVGs3;\n        IHardwareSVGs hardwareSVGs4;\n        IHardwareSVGs hardwareSVGs5;\n        IHardwareSVGs hardwareSVGs6;\n        IHardwareSVGs hardwareSVGs7;\n        IHardwareSVGs hardwareSVGs8;\n        IHardwareSVGs hardwareSVGs9;\n        IHardwareSVGs hardwareSVGs10;\n        IHardwareSVGs hardwareSVGs11;\n        IHardwareSVGs hardwareSVGs12;\n        IHardwareSVGs hardwareSVGs13;\n        IHardwareSVGs hardwareSVGs14;\n        IHardwareSVGs hardwareSVGs15;\n        IHardwareSVGs hardwareSVGs16;\n        IHardwareSVGs hardwareSVGs17;\n        IHardwareSVGs hardwareSVGs18;\n        IHardwareSVGs hardwareSVGs19;\n        IHardwareSVGs hardwareSVGs20;\n        IHardwareSVGs hardwareSVGs21;\n        IHardwareSVGs hardwareSVGs22;\n        IHardwareSVGs hardwareSVGs23;\n        IHardwareSVGs hardwareSVGs24;\n        IHardwareSVGs hardwareSVGs25;\n        IHardwareSVGs hardwareSVGs26;\n        IHardwareSVGs hardwareSVGs27;\n        IHardwareSVGs hardwareSVGs28;\n        IHardwareSVGs hardwareSVGs29;\n        IHardwareSVGs hardwareSVGs30;\n        IHardwareSVGs hardwareSVGs31;\n        IHardwareSVGs hardwareSVGs32;\n        IHardwareSVGs hardwareSVGs33;\n        IHardwareSVGs hardwareSVGs34;\n        IHardwareSVGs hardwareSVGs35;\n        IHardwareSVGs hardwareSVGs36;\n        IHardwareSVGs hardwareSVGs37;\n        IHardwareSVGs hardwareSVGs38;\n    }\n}\n"
    },
    "contracts/interfaces/IShieldBadgeSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './IShields.sol';\n\n/// @dev Generate ShieldBadge SVG\ninterface IShieldBadgeSVGs {\n    function generateShieldBadgeSVG(IShields.ShieldBadge shieldBadge) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IFrameSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\ninterface IFrameSVGs {\n    struct FrameData {\n        string title;\n        uint256 fee;\n        string svgString;\n    }\n}\n"
    },
    "contracts/interfaces/IShields.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\n/// @dev Generate Customizable Shields\ninterface IShields is IERC721 {\n    enum ShieldBadge {\n        MAKER,\n        STANDARD\n    }\n\n    struct Shield {\n        bool built;\n        uint16 field;\n        uint16 hardware;\n        uint16 frame;\n        ShieldBadge shieldBadge;\n        uint24[4] colors;\n    }\n\n    function build(\n        uint16 field,\n        uint16 hardware,\n        uint16 frame,\n        uint24[4] memory colors,\n        uint256 tokenId\n    ) external payable;\n\n    function shields(uint256 tokenId)\n        external\n        view\n        returns (\n            uint16 field,\n            uint16 hardware,\n            uint16 frame,\n            uint24 color1,\n            uint24 color2,\n            uint24 color3,\n            uint24 color4,\n            ShieldBadge shieldBadge\n        );\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\nlibrary Base64 {\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n        \n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n            \n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n            \n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n            \n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n            \n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               dataPtr := add(dataPtr, 3)\n               \n               // read 3 bytes\n               let input := mload(dataPtr)\n               \n               // write 4 characters\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\n               resultPtr := add(resultPtr, 1)\n            }\n            \n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n        \n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/IFieldSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './ICategories.sol';\n\n/// @dev Generate Field SVG\ninterface IFieldSVGs {\n    struct FieldData {\n        string title;\n        ICategories.FieldCategories fieldType;\n        string svgString;\n    }\n}\n"
    },
    "contracts/interfaces/IColors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\n/// @dev Generate Shield SVG\ninterface IColors {\n    event ColorAdded(uint24 color, string title);\n\n    struct Color {\n        string title;\n        bool exists;\n    }\n\n    /// @notice Returns true if color exists in contract, else false.\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorExists(uint24 color) external view returns (bool);\n\n    /// @notice Returns the title string corresponding to the 3-byte color\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorTitle(uint24 color) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IHardwareSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.9;\n\nimport './ICategories.sol';\n\ninterface IHardwareSVGs {\n    struct HardwareData {\n        string title;\n        ICategories.HardwareCategories hardwareType;\n        string svgString;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "metadata": {
      "bytecodeHash": "none"
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}