{
  "language": "Solidity",
  "sources": {
    "contracts/test/ShieldsTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport '../Shields.sol';\nimport '../interfaces/IFieldSVGs.sol';\nimport '../interfaces/IHardwareSVGs.sol';\nimport '../interfaces/IFrameSVGs.sol';\nimport '../interfaces/IBuildPassSVGs.sol';\n\n/// @dev Generate Customizable Shields\ncontract ShieldsTest is Shields {\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        IShieldDescriptor _shieldDescriptor,\n        address _makerPassRecipient,\n        address _granteePassReceipient\n    ) Shields(name_, symbol_, _shieldDescriptor, _makerPassRecipient, _granteePassReceipient) {}\n\n    function getNextId() external view returns (uint256) {\n        return _nextId;\n    }\n\n    function setNextId(uint256 nextId) external {\n        _nextId = nextId;\n    }\n}\n"
    },
    "contracts/Shields.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './interfaces/ICategories.sol';\nimport './interfaces/IShields.sol';\nimport './interfaces/IShieldDescriptor.sol';\nimport './interfaces/IFieldSVGs.sol';\nimport './interfaces/IHardwareSVGs.sol';\nimport './interfaces/IFrameSVGs.sol';\nimport './interfaces/IHardwareGenerator.sol';\nimport './interfaces/IFrameGenerator.sol';\nimport './interfaces/IBuildPassSVGs.sol';\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport 'base64-sol/base64.sol';\n\n/// @dev Generate Customizable Shields\ncontract Shields is ERC721, IShields, Ownable {\n    using Strings for uint8;\n\n    event ShieldBuilt(\n        uint256 tokenId,\n        uint16 field,\n        uint16 hardware,\n        uint16 frame,\n        uint24[4] colors,\n        MintPass mintPass\n    );\n\n    IShieldDescriptor public immutable shieldDescriptor;\n    address public immutable makerPassRecipient;\n    address public immutable granteePassReceipient;\n\n    uint256 constant makerPassThreshold = 5;\n    uint256 constant granteePassThreshold = 405;\n    uint256 constant preMintThreshold = 505;\n    uint256 constant standardMintMax = 5000;\n\n    uint256 public constant mythicFee = 0.1 ether;\n    uint256 public constant publicMintPrice = 0.1 ether;\n    bool public publicMintActive = false;\n\n    bool premintedMaker;\n    bool premintedGrantee;\n    bool premintedStandard;\n    uint256 internal _nextId;\n\n    mapping(uint256 => Shield) private _shields;\n    // transient variable that's immediately cleared after checking for duplicate colors\n    mapping(uint24 => bool) private _checkDuplicateColors;\n    // record shieldHashes so that duplicate shields cannot be built\n    mapping(bytes32 => bool) public shieldHashes;\n\n    modifier canPremintMaker() {\n        require(premintedMaker, 'Shields: maker already preminted');\n        _;\n    }\n\n    modifier canPremintGrantee() {\n        require(premintedMaker, 'Shields: grantee already preminted');\n        _;\n    }\n\n    modifier canPremintStandard() {\n        require(premintedMaker, 'Shields: standard already preminted');\n        _;\n    }\n\n    modifier publicMintIsActive() {\n        require(publicMintActive, 'Shields: Public mint not active yet');\n        _;\n    }\n\n    modifier publicMintPaid() {\n        require(msg.value == publicMintPrice, 'Shields: Insufficient mint fee');\n        _;\n    }\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        IShieldDescriptor _shieldDescriptor,\n        address _makerPassRecipient,\n        address _granteePassReceipient\n    ) ERC721(name_, symbol_) Ownable() {\n        shieldDescriptor = _shieldDescriptor;\n        makerPassRecipient = _makerPassRecipient;\n        granteePassReceipient = _granteePassReceipient;\n\n        _nextId = preMintThreshold + 1;\n    }\n\n    function premintMaker() external canPremintMaker {\n        for (uint256 i = 1; i <= makerPassThreshold; i++) {\n            _mint(makerPassRecipient, i);\n        }\n        premintedMaker = true;\n    }\n\n    function premintGrantee() external canPremintGrantee {\n        for (uint256 j = makerPassThreshold + 1; j <= granteePassThreshold; j++) {\n            _mint(granteePassReceipient, j);\n        }\n        premintedGrantee = true;\n    }\n\n    function premintStandard() external canPremintStandard {\n        for (uint256 k = granteePassThreshold + 1; k <= preMintThreshold; k++) {\n            _mint(makerPassRecipient, k);\n        }\n        premintedStandard = true;\n    }\n\n    // ============ OWNER INTERFACE ============\n\n    function collectFees() external onlyOwner {\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(new bytes(0));\n        require(success, 'Shields: ether transfer failed');\n    }\n\n    function setPublicMintActive() external onlyOwner {\n        publicMintActive = true;\n    }\n\n    // ============ PUBLIC INTERFACE ============\n\n    function mint(address to) external payable publicMintIsActive publicMintPaid {\n        uint256 tokenId = _nextId++;\n        require(tokenId <= standardMintMax, 'Shields: minting closed');\n        _mint(to, tokenId);\n    }\n\n    function build(\n        uint16 field,\n        uint16 hardware,\n        uint16 frame,\n        uint24[4] memory colors,\n        uint256 tokenId\n    ) external payable override {\n        require(msg.sender == ERC721.ownerOf(tokenId), 'Shields: only owner can build NFT');\n        require(!_shields[tokenId].built, 'Shields: shield already built');\n        validateColors(colors, field);\n\n        Shield memory shield;\n        shield.built = true;\n        shield.field = field;\n        shield.hardware = hardware;\n        shield.frame = frame;\n        shield.colors = colors;\n        shield.mintPass = calculateMintPass(tokenId);\n\n        bytes32 shieldHash = keccak256(abi.encode(field, hardware, colors));\n        require(!shieldHashes[shieldHash], 'Shields: unique shield already minted');\n\n        uint256 fee;\n        ICategories.Categories fieldType = shieldDescriptor\n            .fieldGenerator()\n            .generateField(shield.field, shield.colors)\n            .fieldType;\n        ICategories.Categories hardwareType = shieldDescriptor\n            .hardwareGenerator()\n            .generateHardware(shield.hardware)\n            .hardwareType;\n        uint256 frameFee = shieldDescriptor.frameGenerator().generateFrame(shield.frame).fee;\n        if (fieldType == ICategories.Categories.MYTHIC) {\n            fee += mythicFee;\n        }\n        if (hardwareType == ICategories.Categories.MYTHIC) {\n            fee += mythicFee;\n        }\n        fee += frameFee;\n\n        require(msg.value == fee, 'Shields: insufficient building fee');\n\n        _shields[tokenId] = shield;\n        shieldHashes[shieldHash] = true;\n\n        emit ShieldBuilt(tokenId, field, hardware, frame, colors, calculateMintPass(tokenId));\n    }\n\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\n        require(_exists(tokenId), 'Shields: URI query for nonexistent token');\n        Shield memory shield = _shields[tokenId];\n\n        if (!shield.built) {\n            return shieldDescriptor.generateBuildPassURI(calculateMintPass(tokenId));\n        } else {\n            return shieldDescriptor.generateShieldURI(shield);\n        }\n    }\n\n    function shields(uint256 tokenId)\n        external\n        view\n        override\n        returns (\n            uint16 field,\n            uint16 hardware,\n            uint16 frame,\n            uint24 color1,\n            uint24 color2,\n            uint24 color3,\n            uint24 color4,\n            MintPass mintPass\n        )\n    {\n        require(_exists(tokenId), 'Shield: tokenID does not exist');\n        Shield memory shield = _shields[tokenId];\n        return (\n            shield.field,\n            shield.hardware,\n            shield.frame,\n            shield.colors[0],\n            shield.colors[1],\n            shield.colors[2],\n            shield.colors[3],\n            shield.mintPass\n        );\n    }\n\n    // ============ INTERNAL INTERFACE ============\n\n    function calculateMintPass(uint256 tokenId) internal pure returns (MintPass) {\n        if (tokenId <= makerPassThreshold) {\n            return MintPass.MAKER;\n        } else {\n            return MintPass.STANDARD;\n        }\n    }\n\n    function validateColors(uint24[4] memory colors, uint16 field) internal {\n        if (field == 0) {\n            checkExistsDupsMax(colors, 1);\n        } else if (field <= 242) {\n            checkExistsDupsMax(colors, 2);\n        } else if (field <= 293) {\n            checkExistsDupsMax(colors, 3);\n        } else {\n            checkExistsDupsMax(colors, 4);\n        }\n    }\n\n    function checkExistsDupsMax(uint24[4] memory colors, uint8 nColors) private {\n        for (uint8 i = 0; i < nColors; i++) {\n            require(_checkDuplicateColors[colors[i]] == false, 'Shields: all colors must be unique');\n            require(shieldDescriptor.fieldGenerator().colorExists(colors[i]), 'Shields: color does not exist');\n            _checkDuplicateColors[colors[i]] = true;\n        }\n        for (uint8 i = 0; i < nColors; i++) {\n            _checkDuplicateColors[colors[i]] = false;\n        }\n        for (uint8 i = nColors; i < 4; i++) {\n            require(colors[i] == 0, 'Shields: max colors exceeded for field');\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IFieldSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './ICategories.sol';\n\n/// @dev Generate Field SVG\ninterface IFieldSVGs {\n    struct FieldData {\n        string title;\n        ICategories.Categories fieldType;\n        string svgString;\n    }\n}\n"
    },
    "contracts/interfaces/IHardwareSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './ICategories.sol';\n\ninterface IHardwareSVGs {\n    struct HardwareData {\n        string title;\n        ICategories.Categories hardwareType;\n        string svgString;\n    }\n}\n"
    },
    "contracts/interfaces/IFrameSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\ninterface IFrameSVGs {\n    struct FrameData {\n        string title;\n        uint256 fee;\n        string svgString;\n    }\n}\n"
    },
    "contracts/interfaces/IBuildPassSVGs.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './IShields.sol';\n\n/// @dev Generate BuildPass SVG\ninterface IBuildPassSVGs {\n    function generateBuildPassSVG(IShields.MintPass mintPass) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/ICategories.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\n/// @dev Generate Shield SVG\ninterface ICategories {\n    enum Categories {\n        MYTHIC,\n        HERALDIC\n    }\n}\n"
    },
    "contracts/interfaces/IShields.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport '@openzeppelin/contracts/access/Ownable.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\nimport 'base64-sol/base64.sol';\n\n/// @dev Generate Customizable Shields\ninterface IShields is IERC721 {\n    enum MintPass {\n        MAKER,\n        STANDARD\n    }\n\n    struct Shield {\n        bool built;\n        uint16 field;\n        uint16 hardware;\n        uint16 frame;\n        MintPass mintPass;\n        uint24[4] colors;\n    }\n\n    function build(\n        uint16 field,\n        uint16 hardware,\n        uint16 frame,\n        uint24[4] memory colors,\n        uint256 tokenId\n    ) external payable;\n\n    function shields(uint256 tokenId)\n        external\n        view\n        returns (\n            uint16 field,\n            uint16 hardware,\n            uint16 frame,\n            uint24 color1,\n            uint24 color2,\n            uint24 color3,\n            uint24 color4,\n            MintPass mintPass\n        );\n}\n"
    },
    "contracts/interfaces/IShieldDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './IShields.sol';\nimport './IFrameGenerator.sol';\nimport './IFieldGenerator.sol';\nimport './IHardwareGenerator.sol';\n\n/// @dev Generate Customizable Shields\ninterface IShieldDescriptor {\n    function fieldGenerator() external returns (IFieldGenerator);\n\n    function hardwareGenerator() external returns (IHardwareGenerator);\n\n    function frameGenerator() external returns (IFrameGenerator);\n\n    function generateShieldURI(IShields.Shield memory shield) external view returns (string memory);\n\n    function generateBuildPassURI(IShields.MintPass mintPass) external view returns (string memory);\n}\n"
    },
    "contracts/interfaces/IHardwareGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './IHardwareSVGs.sol';\n\n/// @dev Generate Shield SVG\ninterface IHardwareGenerator {\n    /// @notice Generates hardware snippet of SVG\n    /// @param hardware uint representing hardware selection\n    /// @return HardwareData containing svg snippet and hardware title and hardware type\n    function generateHardware(uint16 hardware) external view returns (IHardwareSVGs.HardwareData memory);\n\n    struct HardwareSVGs {\n        IHardwareSVGs hardwareSVGs1;\n        IHardwareSVGs hardwareSVGs2;\n        IHardwareSVGs hardwareSVGs3;\n        IHardwareSVGs hardwareSVGs4;\n        IHardwareSVGs hardwareSVGs5;\n        IHardwareSVGs hardwareSVGs6;\n        IHardwareSVGs hardwareSVGs7;\n        IHardwareSVGs hardwareSVGs8;\n        IHardwareSVGs hardwareSVGs9;\n        IHardwareSVGs hardwareSVGs10;\n        IHardwareSVGs hardwareSVGs11;\n        IHardwareSVGs hardwareSVGs12;\n        IHardwareSVGs hardwareSVGs13;\n        IHardwareSVGs hardwareSVGs14;\n        IHardwareSVGs hardwareSVGs15;\n        IHardwareSVGs hardwareSVGs16;\n        IHardwareSVGs hardwareSVGs17;\n        IHardwareSVGs hardwareSVGs18;\n        IHardwareSVGs hardwareSVGs19;\n        IHardwareSVGs hardwareSVGs20;\n        IHardwareSVGs hardwareSVGs21;\n        IHardwareSVGs hardwareSVGs22;\n        IHardwareSVGs hardwareSVGs23;\n        IHardwareSVGs hardwareSVGs24;\n        IHardwareSVGs hardwareSVGs25;\n        IHardwareSVGs hardwareSVGs26;\n        IHardwareSVGs hardwareSVGs27;\n        IHardwareSVGs hardwareSVGs28;\n        IHardwareSVGs hardwareSVGs29;\n        IHardwareSVGs hardwareSVGs30;\n        IHardwareSVGs hardwareSVGs31;\n        IHardwareSVGs hardwareSVGs32;\n        IHardwareSVGs hardwareSVGs33;\n        IHardwareSVGs hardwareSVGs34;\n        IHardwareSVGs hardwareSVGs35;\n        IHardwareSVGs hardwareSVGs36;\n        IHardwareSVGs hardwareSVGs37;\n        IHardwareSVGs hardwareSVGs38;\n    }\n}\n"
    },
    "contracts/interfaces/IFrameGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './IFrameSVGs.sol';\n\n/// @dev Generate Shield SVG\ninterface IFrameGenerator {\n    struct FrameSVGs {\n        IFrameSVGs frameSVGs1;\n        IFrameSVGs frameSVGs2;\n    }\n\n    /// @notice Generates Frame snippet of SVG\n    /// @param Frame uint representing Frame selection\n    /// @return FrameData containing svg snippet and Frame title and Frame type\n    function generateFrame(uint16 Frame) external view returns (IFrameSVGs.FrameData memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../utils/Context.sol\";\nimport \"./IERC721.sol\";\nimport \"./IERC721Metadata.sol\";\nimport \"./IERC721Enumerable.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"../../introspection/ERC165.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/EnumerableSet.sol\";\nimport \"../../utils/EnumerableMap.sol\";\nimport \"../../utils/Strings.sol\";\n\n/**\n * @title ERC721 Non-Fungible Token Standard basic implementation\n * @dev see https://eips.ethereum.org/EIPS/eip-721\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n    using SafeMath for uint256;\n    using Address for address;\n    using EnumerableSet for EnumerableSet.UintSet;\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\n    using Strings for uint256;\n\n    // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n\n    // Mapping from holder address to their (enumerable) set of owned tokens\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n\n    // Enumerable mapping from token ids to their owners\n    EnumerableMap.UintToAddressMap private _tokenOwners;\n\n    // Mapping from token ID to approved address\n    mapping (uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Optional mapping for token URIs\n    mapping (uint256 => string) private _tokenURIs;\n\n    // Base URI\n    string private _baseURI;\n\n    /*\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n     *\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    /*\n     *     bytes4(keccak256('name()')) == 0x06fdde03\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n     *\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n\n    /*\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n     *\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n     */\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n\n        // register the supported interfaces to conform to ERC721 via ERC165\n        _registerInterface(_INTERFACE_ID_ERC721);\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _holderTokens[owner].length();\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        return _tokenOwners.get(tokenId, \"ERC721: owner query for nonexistent token\");\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n        return string(abi.encodePacked(base, tokenId.toString()));\n    }\n\n    /**\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\n    * to the token ID if no specific URI is set for that token ID.\n    */\n    function baseURI() public view virtual returns (string memory) {\n        return _baseURI;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        return _holderTokens[owner].at(index);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n        return _tokenOwners.length();\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        (uint256 tokenId, ) = _tokenOwners.at(index);\n        return tokenId;\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _tokenOwners.contains(tokenId);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     d*\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n        _mint(to, tokenId);\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId); // internal owner\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        // Clear metadata (if any)\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n\n        _holderTokens[owner].remove(tokenId);\n\n        _tokenOwners.remove(tokenId);\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\"); // internal owner\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _holderTokens[from].remove(tokenId);\n        _holderTokens[to].add(tokenId);\n\n        _tokenOwners.set(tokenId, to);\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721Metadata: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n    }\n\n    /**\n     * @dev Internal function to set the base URI for all token IDs. It is\n     * automatically added as a prefix to the value returned in {tokenURI},\n     * or to the token ID if {tokenURI} is empty.\n     */\n    function _setBaseURI(string memory baseURI_) internal virtual {\n        _baseURI = baseURI_;\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n        private returns (bool)\n    {\n        if (!to.isContract()) {\n            return true;\n        }\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n            IERC721Receiver(to).onERC721Received.selector,\n            _msgSender(),\n            from,\n            tokenId,\n            _data\n        ), \"ERC721: transfer to non ERC721Receiver implementer\");\n        bytes4 retval = abi.decode(returndata, (bytes4));\n        return (retval == _ERC721_RECEIVED);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        uint256 index = digits - 1;\n        temp = value;\n        while (temp != 0) {\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\n            temp /= 10;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "base64-sol/base64.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// @title Base64\n/// @author Brecht Devos - <brecht@loopring.org>\n/// @notice Provides a function for encoding some bytes in base64\nlibrary Base64 {\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    function encode(bytes memory data) internal pure returns (string memory) {\n        if (data.length == 0) return '';\n        \n        // load the table into memory\n        string memory table = TABLE;\n\n        // multiply by 4/3 rounded up\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\n\n        // add some extra buffer at the end required for the writing\n        string memory result = new string(encodedLen + 32);\n\n        assembly {\n            // set the actual output length\n            mstore(result, encodedLen)\n            \n            // prepare the lookup table\n            let tablePtr := add(table, 1)\n            \n            // input ptr\n            let dataPtr := data\n            let endPtr := add(dataPtr, mload(data))\n            \n            // result ptr, jump over length\n            let resultPtr := add(result, 32)\n            \n            // run over the input, 3 bytes at a time\n            for {} lt(dataPtr, endPtr) {}\n            {\n               dataPtr := add(dataPtr, 3)\n               \n               // read 3 bytes\n               let input := mload(dataPtr)\n               \n               // write 4 characters\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\n               resultPtr := add(resultPtr, 1)\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\n               resultPtr := add(resultPtr, 1)\n            }\n            \n            // padding with '='\n            switch mod(mload(data), 3)\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\n        }\n        \n        return result;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"../../introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\n      *\n      * Requirements:\n      *\n      * - `from` cannot be the zero address.\n      * - `to` cannot be the zero address.\n      * - `tokenId` token must exist and be owned by `from`.\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n      *\n      * Emits a {Transfer} event.\n      */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n"
    },
    "@openzeppelin/contracts/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IFieldGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './IFieldSVGs.sol';\nimport './IColors.sol';\n\n/// @dev Generate Field SVG\ninterface IFieldGenerator {\n    /// @notice Generates field snippet of SVG of the specified colors\n    /// @param field uint representing field selection\n    /// @param colors to be rendered in the field svg\n    /// @return FieldData containing svg snippet and field title\n    function generateField(uint16 field, uint24[4] memory colors) external view returns (IFieldSVGs.FieldData memory);\n\n    event ColorAdded(uint24 color, string title);\n\n    struct Color {\n        string title;\n        bool exists;\n    }\n\n    /// @notice Returns true if color exists in contract, else false.\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorExists(uint24 color) external view returns (bool);\n\n    /// @notice Returns the title string corresponding to the 3-byte color\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorTitle(uint24 color) external view returns (string memory);\n\n    struct FieldSVGs {\n        IFieldSVGs fieldSVGs1;\n        IFieldSVGs fieldSVGs2;\n        IFieldSVGs fieldSVGs3;\n        IFieldSVGs fieldSVGs4;\n        IFieldSVGs fieldSVGs5;\n        IFieldSVGs fieldSVGs6;\n        IFieldSVGs fieldSVGs7;\n        IFieldSVGs fieldSVGs8;\n        IFieldSVGs fieldSVGs9;\n        IFieldSVGs fieldSVGs10;\n        IFieldSVGs fieldSVGs11;\n        IFieldSVGs fieldSVGs12;\n        IFieldSVGs fieldSVGs13;\n        IFieldSVGs fieldSVGs14;\n        IFieldSVGs fieldSVGs15;\n        IFieldSVGs fieldSVGs16;\n        IFieldSVGs fieldSVGs17;\n        IFieldSVGs fieldSVGs18;\n        IFieldSVGs fieldSVGs19;\n        IFieldSVGs fieldSVGs20;\n        IFieldSVGs fieldSVGs21;\n        IFieldSVGs fieldSVGs22;\n        IFieldSVGs fieldSVGs23;\n    }\n}\n"
    },
    "contracts/interfaces/IColors.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\n/// @dev Generate Shield SVG\ninterface IColors {\n    event ColorAdded(uint24 color, string title);\n\n    struct Color {\n        string title;\n        bool exists;\n    }\n\n    /// @notice Returns true if color exists in contract, else false.\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorExists(uint24 color) external view returns (bool);\n\n    /// @notice Returns the title string corresponding to the 3-byte color\n    /// @param color 3-byte uint representing color\n    /// @return true or false\n    function colorTitle(uint24 color) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts may inherit from this and call {_registerInterface} to declare\n * their support of an interface.\n */\nabstract contract ERC165 is IERC165 {\n    /*\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n     */\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n\n    /**\n     * @dev Mapping of interface ids to whether or not it's supported.\n     */\n    mapping(bytes4 => bool) private _supportedInterfaces;\n\n    constructor () {\n        // Derived contracts need only register support for their own interfaces,\n        // we register support for ERC165 itself here\n        _registerInterface(_INTERFACE_ID_ERC165);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     *\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return _supportedInterfaces[interfaceId];\n    }\n\n    /**\n     * @dev Registers the contract as an implementer of the interface defined by\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n     * registering its interface id is not required.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * Requirements:\n     *\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n     */\n    function _registerInterface(bytes4 interfaceId) internal virtual {\n        require(interfaceId != 0xffffffff, \"ERC165: invalid interface id\");\n        _supportedInterfaces[interfaceId] = true;\n    }\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            bytes32 lastvalue = set._values[lastIndex];\n\n            // Move the last value to the index where the value to delete is\n            set._values[toDeleteIndex] = lastvalue;\n            // Update the index for the moved value\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        require(set._values.length > index, \"EnumerableSet: index out of bounds\");\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n   /**\n    * @dev Returns the value stored at position `index` in the set. O(1).\n    *\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.0;\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n *\n *     // Declare a set state variable\n *     EnumerableMap.UintToAddressMap private myMap;\n * }\n * ```\n *\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n * supported.\n */\nlibrary EnumerableMap {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct MapEntry {\n        bytes32 _key;\n        bytes32 _value;\n    }\n\n    struct Map {\n        // Storage of map keys and values\n        MapEntry[] _entries;\n\n        // Position of the entry defined by a key in the `entries` array, plus 1\n        // because index 0 means a key is not in the map.\n        mapping (bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n            map._entries.push(MapEntry({ _key: key, _value: value }));\n            // The entry is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            map._indexes[key] = map._entries.length;\n            return true;\n        } else {\n            map._entries[keyIndex - 1]._value = value;\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        // We read and store the key's index to prevent multiple reads from the same storage slot\n        uint256 keyIndex = map._indexes[key];\n\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = keyIndex - 1;\n            uint256 lastIndex = map._entries.length - 1;\n\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n\n            MapEntry storage lastEntry = map._entries[lastIndex];\n\n            // Move the last entry to the index where the entry to delete is\n            map._entries[toDeleteIndex] = lastEntry;\n            // Update the index for the moved entry\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n\n            // Delete the slot where the moved entry was stored\n            map._entries.pop();\n\n            // Delete the index for the deleted slot\n            delete map._indexes[key];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._indexes[key] != 0;\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._entries.length;\n    }\n\n   /**\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n    *\n    * Note that there are no guarantees on the ordering of entries inside the\n    * array, and it may change when more entries are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        require(map._entries.length > index, \"EnumerableMap: index out of bounds\");\n\n        MapEntry storage entry = map._entries[index];\n        return (entry._key, entry._value);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, \"EnumerableMap: nonexistent key\"); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n        uint256 keyIndex = map._indexes[key];\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n    }\n\n    // UintToAddressMap\n\n    struct UintToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n        return _remove(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n        return _contains(map._inner, bytes32(key));\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n   /**\n    * @dev Returns the element stored at position `index` in the set. O(1).\n    * Note that there are no guarantees on the ordering of values inside the\n    * array, and it may change when more values are added or removed.\n    *\n    * Requirements:\n    *\n    * - `index` must be strictly less than {length}.\n    */\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (uint256(key), address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\n    }\n}\n"
    },
    "contracts/test/ShieldDescriptorTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport '../interfaces/IShields.sol';\nimport '../interfaces/IFrameGenerator.sol';\nimport '../interfaces/IFieldGenerator.sol';\nimport '../interfaces/IHardwareGenerator.sol';\nimport '../ShieldDescriptor.sol';\n\n/// @dev Generate Shield Metadata\ncontract ShieldDescriptorTest is ShieldDescriptor {\n    constructor(\n        IFieldGenerator _fieldGenerator,\n        IHardwareGenerator _hardwareGenerator,\n        IFrameGenerator _frameGenerator,\n        IBuildPassSVGs _buildPassSVGGenerator\n    ) ShieldDescriptor(_fieldGenerator, _hardwareGenerator, _frameGenerator, _buildPassSVGGenerator) {}\n\n    function generateSVGTest(IShields.Shield memory shield)\n        external\n        view\n        returns (\n            string memory svg,\n            string memory fieldTitle,\n            string memory hardwareTitle,\n            string memory frameTitle\n        )\n    {\n        IFieldSVGs.FieldData memory field = fieldGenerator.generateField(shield.field, shield.colors);\n        IHardwareSVGs.HardwareData memory hardware = hardwareGenerator.generateHardware(shield.hardware);\n        IFrameSVGs.FrameData memory frame = frameGenerator.generateFrame(shield.frame);\n\n        svg = string(generateSVG(field.svgString, hardware.svgString, frame.svgString));\n        fieldTitle = field.title;\n        hardwareTitle = hardware.title;\n        frameTitle = frame.title;\n    }\n}\n"
    },
    "contracts/ShieldDescriptor.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './interfaces/ICategories.sol';\nimport './interfaces/IFrameGenerator.sol';\nimport './interfaces/IFieldGenerator.sol';\nimport './interfaces/IHardwareGenerator.sol';\nimport './interfaces/IBuildPassSVGs.sol';\nimport './interfaces/IFrameSVGs.sol';\nimport './interfaces/IShields.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\n/// @dev Generate Shield Metadata\ncontract ShieldDescriptor {\n    using Strings for uint8;\n\n    IFieldGenerator public immutable fieldGenerator;\n    IHardwareGenerator public immutable hardwareGenerator;\n    IFrameGenerator public immutable frameGenerator;\n    IBuildPassSVGs public immutable buildPassSVGGenerator;\n\n    constructor(\n        IFieldGenerator _fieldGenerator,\n        IHardwareGenerator _hardwareGenerator,\n        IFrameGenerator _frameGenerator,\n        IBuildPassSVGs _buildPassSVGGenerator\n    ) {\n        fieldGenerator = _fieldGenerator;\n        hardwareGenerator = _hardwareGenerator;\n        frameGenerator = _frameGenerator;\n        buildPassSVGGenerator = _buildPassSVGGenerator;\n    }\n\n    function generateShieldURI(IShields.Shield memory shield) external view returns (string memory) {\n        IFieldSVGs.FieldData memory field = fieldGenerator.generateField(shield.field, shield.colors);\n        IHardwareSVGs.HardwareData memory hardware = hardwareGenerator.generateHardware(shield.hardware);\n        IFrameSVGs.FrameData memory frame = frameGenerator.generateFrame(shield.frame);\n\n        string memory name = generateTitle(field.title, hardware.title, frame.title, shield.colors);\n        string memory description = '5000 on-chain shields, designed and built by their owners.';\n        bytes memory attributes = generateAttributesJSON(field, hardware, frame, shield.colors);\n\n        return\n            string(\n                abi.encodePacked(\n                    'data:application/json;base64,',\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                name,\n                                '\", \"description\":\"',\n                                description,\n                                '\", \"image\": \"',\n                                'data:image/svg+xml;base64,',\n                                Base64.encode(bytes(generateSVG(field.svgString, hardware.svgString, frame.svgString))),\n                                '\", \"attributes\": ',\n                                attributes,\n                                '}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function generateBuildPassURI(IShields.MintPass mintPass) external view returns (string memory) {\n        string memory passTitle;\n\n        if (mintPass == IShields.MintPass.MAKER) {\n            passTitle = 'Maker';\n        } else if (mintPass == IShields.MintPass.STANDARD) {\n            passTitle = 'Standard';\n        }\n\n        return\n            string(\n                abi.encodePacked(\n                    'data:application/json;base64,',\n                    Base64.encode(\n                        bytes(\n                            abi.encodePacked(\n                                '{\"name\":\"',\n                                passTitle,\n                                ' Build Pass',\n                                '\", \"description\":\"',\n                                'minted but unbuilt',\n                                '\", \"image\": \"',\n                                'data:image/svg+xml;base64,',\n                                Base64.encode(bytes(buildPassSVGGenerator.generateBuildPassSVG(mintPass))),\n                                /* '\", \"attributes\": [{\"trait_type\":\"MintPass\", \"value\":\"', */\n                                'blabla\"',\n                                '}'\n                            )\n                        )\n                    )\n                )\n            );\n    }\n\n    function generateTitle(\n        string memory fieldTitle,\n        string memory hardwareTitle,\n        string memory frameTitle,\n        uint24[4] memory colors\n    ) internal view returns (string memory) {\n        bytes memory frameString = '';\n        if (bytes(frameTitle).length > 0) {\n            frameString = abi.encodePacked(frameTitle, ': ');\n        }\n        return\n            string(\n                abi.encodePacked(frameString, hardwareTitle, ' on a ', generateColorTitleSnippet(colors), fieldTitle)\n            );\n    }\n\n    function generateColorTitleSnippet(uint24[4] memory colors) internal view returns (string memory) {\n        bytes memory colorTitle = bytes(fieldGenerator.colorTitle(colors[0]));\n        if (colors[1] > 0) {\n            colorTitle = abi.encodePacked(\n                colorTitle,\n                colors[2] > 0 ? ' ' : ' and ',\n                fieldGenerator.colorTitle(colors[1])\n            );\n        }\n        if (colors[2] > 0) {\n            colorTitle = abi.encodePacked(\n                colorTitle,\n                colors[3] > 0 ? ' ' : ' and ',\n                fieldGenerator.colorTitle(colors[2])\n            );\n        }\n        if (colors[3] > 0) {\n            colorTitle = abi.encodePacked(colorTitle, ' and ', fieldGenerator.colorTitle(colors[3]));\n        }\n        colorTitle = abi.encodePacked(colorTitle, ' ');\n        return string(colorTitle);\n    }\n\n    function generateSVG(\n        string memory fieldSVG,\n        string memory hardwareSVG,\n        string memory frameSVG\n    ) internal pure returns (bytes memory svg) {\n        svg = abi.encodePacked(\n            '<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 220 264\">',\n            fieldSVG,\n            hardwareSVG,\n            frameSVG,\n            '</svg>'\n        );\n    }\n\n    function generateAttributesJSON(\n        IFieldSVGs.FieldData memory fieldData,\n        IHardwareSVGs.HardwareData memory hardwareData,\n        IFrameSVGs.FrameData memory frameData,\n        uint24[4] memory colors\n    ) internal view returns (bytes memory attributesJSON) {\n        attributesJSON = abi.encodePacked(\n            '[{\"trait_type\":\"Field\", \"value\":\"',\n            fieldData.title,\n            '\"}, {\"trait_type\":\"Hardware\", \"value\":\"',\n            hardwareData.title,\n            '\"}, {\"trait_type\":\"Field Type\", \"value\":\"',\n            getTypeString(fieldData.fieldType),\n            '\"}, {\"trait_type\":\"Hardware Type\", \"value\":\"',\n            getTypeString(hardwareData.hardwareType),\n            conditionalFrameAttribute(frameData.title),\n            colorAttributes(colors)\n        );\n    }\n\n    function getTypeString(ICategories.Categories category) internal pure returns (string memory typeString) {\n        if (category == ICategories.Categories.MYTHIC) {\n            typeString = 'Mythic';\n        } else {\n            typeString = 'Heraldic';\n        }\n    }\n\n    function conditionalFrameAttribute(string memory frameTitle) internal pure returns (bytes memory frameAttribute) {\n        if (bytes(frameTitle).length > 0) {\n            frameAttribute = abi.encodePacked('\"}, {\"trait_type\":\"Frame\", \"value\":\"', frameTitle);\n        } else {\n            frameAttribute = '';\n        }\n    }\n\n    function colorAttributes(uint24[4] memory colors) private view returns (bytes memory colorArributes) {\n        colorArributes = abi.encodePacked(\n            '\"}, {\"trait_type\":\"Color 1\", \"value\":\"',\n            fieldGenerator.colorTitle(colors[0]),\n            conditionalColorAttribute(colors[1], 2),\n            conditionalColorAttribute(colors[2], 3),\n            conditionalColorAttribute(colors[3], 4),\n            '\"}]'\n        );\n    }\n\n    function conditionalColorAttribute(uint24 color, uint8 nColor) private view returns (bytes memory colorArribute) {\n        if (color != 0) {\n            colorArribute = abi.encodePacked(\n                '\"}, {\"trait_type\":\"Color ',\n                nColor.toString(),\n                '\", \"value\":\"',\n                fieldGenerator.colorTitle(color)\n            );\n        } else {\n            colorArribute = '';\n        }\n    }\n}\n"
    },
    "contracts/test/ShieldsGasTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport '../Shields.sol';\n\n/// @dev Generate Customizable Shields\ncontract ShieldsGasTest {\n    Shields public immutable shields;\n\n    constructor(Shields _shields) {\n        shields = _shields;\n    }\n\n    function gasSnapshotTokenURI(uint256 tokenId) public view returns (uint256) {\n        uint256 gasBefore = gasleft();\n        shields.tokenURI(tokenId);\n        return gasBefore - gasleft();\n    }\n}\n"
    },
    "contracts/SVGs/Fields/FieldSVGs9.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport '../../interfaces/IFieldSVGs.sol';\nimport '../../interfaces/ICategories.sol';\nimport '../../libraries/HexStrings.sol';\n\n/// @dev Generate Field SVG\ncontract FieldSVGs9 is IFieldSVGs, ICategories {\n    using HexStrings for uint24;\n\n    function field_173(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Biletty',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M87.5 109.5h-5v-15h5v15Zm50-15h-5v15h5v-15Zm-50 30h-5v15h5v-15Zm50 0h-5v15h5v-15Zm-25-30h-5v15h5v-15Zm0 30h-5v15h5v-15Zm-25 30h-5v15h5v-15Zm25 0h-5v15h5v-15Zm-12.5-45h-5v15h5v-15Zm0 30h-5v15h5v-15Zm0 30h-5v15h5v-15Zm-30-45h5v-15h-5v15Zm0 30h5v-15h-5v15Zm80-45h-5v15h5v-15Zm0 30h-5v15h5v-15Zm-30-15h5v-15h-5v15Zm-20-45h-5v15h5v-15Zm-30 15h5v-15h-5v15Zm80-15h-5v15h5v-15Zm-30 15h5v-15h-5v15Zm0 60h5v-15h-5v15Zm0 30h5v-15h-5v15Zm17.5-30h-5v15h5v-15Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_174(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Semy of Quatrefoils',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi174-a\" viewBox=\"-4.9 -4.9 9.8 9.8\"><path d=\"M.9 4c.5-.3.7-.6.7-1.1 0-.6-.3-.9-.7-1.3-.3-.3.3-1.1.7-.7.5.4.7.7 1.3.7.5 0 .9-.2 1.1-.7.2-.3.4-.7.9-.9-.5-.2-.7-.6-.9-.9-.3-.5-.6-.7-1.1-.7-.6 0-.9.3-1.3.7-.3.3-1.1-.3-.7-.7.4-.5.7-.7.7-1.3 0-.5-.2-.9-.7-1.1-.3-.2-.7-.4-.9-.9-.2.5-.6.7-.9.9-.5.3-.7.6-.7 1.1 0 .6.3.9.7 1.3.3.3-.3 1.1-.7.7-.5-.4-.7-.7-1.3-.7-.5 0-.9.2-1.1.7-.2.3-.4.7-.9.9.5.2.7.6.9.9.3.5.6.7 1.1.7.6 0 .9-.3 1.3-.7.3-.3 1.1.3.7.7-.4.5-.7.7-.7 1.3 0 .5.2.9.7 1.1.3.2.7.4.9.9.2-.5.6-.7.9-.9z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><symbol id=\"fi174-b\" viewBox=\"-11.2 -12.4 22.3 24.8\"><use height=\"9.8\" overflow=\"visible\" transform=\"translate(-6.25 7.5)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/><use height=\"9.8\" overflow=\"visible\" transform=\"translate(6.25 -7.5)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/></symbol><symbol id=\"fi174-c\" viewBox=\"-17.4 -49.9 34.8 99.8\"><use height=\"24.8\" overflow=\"visible\" transform=\"translate(-6.25 37.5)\" width=\"22.3\" x=\"-11.2\" xlink:href=\"#fi174-b\" y=\"-12.4\"/><use height=\"24.8\" overflow=\"visible\" transform=\"translate(-6.25 7.5)\" width=\"22.3\" x=\"-11.2\" xlink:href=\"#fi174-b\" y=\"-12.4\"/><use height=\"24.8\" overflow=\"visible\" transform=\"translate(-6.25 -22.5)\" width=\"22.3\" x=\"-11.2\" xlink:href=\"#fi174-b\" y=\"-12.4\"/><use height=\"9.8\" overflow=\"visible\" transform=\"translate(12.5 45)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/><use height=\"9.8\" overflow=\"visible\" transform=\"translate(12.5 15)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/><use height=\"9.8\" overflow=\"visible\" transform=\"translate(12.5 -15)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/><use height=\"9.8\" overflow=\"visible\" transform=\"translate(12.5 -45)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><use height=\"99.8\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 85 131.9)\" width=\"34.8\" x=\"-17.4\" xlink:href=\"#fi174-c\" y=\"-49.9\"/><use height=\"99.8\" overflow=\"visible\" transform=\"rotate(180 67.5 65.95)\" width=\"34.8\" x=\"-17.4\" xlink:href=\"#fi174-c\" y=\"-49.9\"/><use height=\"9.8\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 122.5 86.9)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/><use height=\"9.8\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 101.9)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/><use height=\"9.8\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 131.9)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/><use height=\"9.8\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 161.9)\" width=\"9.8\" x=\"-4.9\" xlink:href=\"#fi174-a\" y=\"-4.9\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_175(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Semy-de-Lis',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi175-a\" viewBox=\"-5.7 -7.9 11.3 13.8\"><path d=\"M0 5.9c-.5-1.2-1.7-2.1-1.7-3.6 0-.4.1-.7.2-1.1-1.9 1.3-4.2.2-4.1-1.7 0-1.2.9-2.1 2-2.3-1 .4-1.1 2.4.5 2.4C-.2-.4-.9-4.2-2-5.5l2-2.4 2 2.4C.9-4.2.2-.4 3.1-.4c1.6 0 1.5-2 .5-2.4 1.2.2 2 1.2 2 2.3 0 1.9-2.2 3-4.1 1.7.1.3.2.7.2 1.1C1.7 3.8.5 4.7 0 5.9\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><symbol id=\"fi175-b\" viewBox=\"-11.9 -15.4 23.8 28.8\"><use height=\"13.8\" overflow=\"visible\" transform=\"translate(-6.25 7.5)\" width=\"11.3\" x=\"-5.7\" xlink:href=\"#fi175-a\" y=\"-7.9\"/><use height=\"13.8\" overflow=\"visible\" transform=\"translate(6.25 -7.5)\" width=\"11.3\" x=\"-5.7\" xlink:href=\"#fi175-a\" y=\"-7.9\"/></symbol><symbol id=\"fi175-c\" viewBox=\"-18.2 -52.9 36.3 103.8\"><use height=\"28.8\" overflow=\"visible\" transform=\"translate(-6.25 37.5)\" width=\"23.8\" x=\"-11.9\" xlink:href=\"#fi175-b\" y=\"-15.4\"/><use height=\"28.8\" overflow=\"visible\" transform=\"translate(-6.25 7.5)\" width=\"23.8\" x=\"-11.9\" xlink:href=\"#fi175-b\" y=\"-15.4\"/><use height=\"28.8\" overflow=\"visible\" transform=\"translate(-6.25 -22.5)\" width=\"23.8\" x=\"-11.9\" xlink:href=\"#fi175-b\" y=\"-15.4\"/><use height=\"13.8\" overflow=\"visible\" transform=\"translate(12.5 45)\" width=\"11.3\" x=\"-5.7\" xlink:href=\"#fi175-a\" y=\"-7.9\"/><use height=\"13.8\" overflow=\"visible\" transform=\"translate(12.5 15)\" width=\"11.3\" x=\"-5.7\" xlink:href=\"#fi175-a\" y=\"-7.9\"/><use height=\"13.8\" overflow=\"visible\" transform=\"translate(12.5 -15)\" width=\"11.3\" x=\"-5.7\" xlink:href=\"#fi175-a\" y=\"-7.9\"/><use height=\"13.8\" overflow=\"visible\" transform=\"translate(12.5 -45)\" width=\"11.3\" x=\"-5.7\" xlink:href=\"#fi175-a\" y=\"-7.9\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><use height=\"103.8\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 85 131.9)\" width=\"36.3\" x=\"-18.2\" xlink:href=\"#fi175-c\" y=\"-52.9\"/><use height=\"103.8\" overflow=\"visible\" transform=\"rotate(180 67.5 65.95)\" width=\"36.3\" x=\"-18.2\" xlink:href=\"#fi175-c\" y=\"-52.9\"/><use height=\"13.8\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 101.9)\" width=\"11.3\" x=\"-5.7\" xlink:href=\"#fi175-a\" y=\"-7.9\"/><use height=\"13.8\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 131.9)\" width=\"11.3\" x=\"-5.7\" xlink:href=\"#fi175-a\" y=\"-7.9\"/><use height=\"13.8\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 161.9)\" width=\"11.3\" x=\"-5.7\" xlink:href=\"#fi175-a\" y=\"-7.9\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_176(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Estencelly',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi176-a\" viewBox=\"-1.5 -1.5 3 3\"><circle fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\" r=\"1.5\"/></symbol><symbol id=\"fi176-b\" viewBox=\"-4.1 -3.8 8.2 7.5\"><use height=\"3\" overflow=\"visible\" transform=\"translate(.001 2.254)\" width=\"3\" x=\"-1.5\" xlink:href=\"#fi176-a\" y=\"-1.5\"/><use height=\"3\" overflow=\"visible\" transform=\"translate(-2.595 -2.254)\" width=\"3\" x=\"-1.5\" xlink:href=\"#fi176-a\" y=\"-1.5\"/><use height=\"3\" overflow=\"visible\" transform=\"translate(2.595 -2.254)\" width=\"3\" x=\"-1.5\" xlink:href=\"#fi176-a\" y=\"-1.5\"/></symbol><symbol id=\"fi176-c\" viewBox=\"-16.6 -3.8 33.2 7.5\"><use height=\"7.5\" overflow=\"visible\" transform=\"translate(-12.5)\" width=\"8.2\" x=\"-4.1\" xlink:href=\"#fi176-b\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"translate(12.5)\" width=\"8.2\" x=\"-4.1\" xlink:href=\"#fi176-b\" y=\"-3.8\"/></symbol><symbol id=\"fi176-d\" viewBox=\"-41.6 -3.8 83.2 7.5\"><use height=\"7.5\" overflow=\"visible\" transform=\"translate(-25)\" width=\"33.2\" x=\"-16.6\" xlink:href=\"#fi176-c\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"translate(25)\" width=\"33.2\" x=\"-16.6\" xlink:href=\"#fi176-c\" y=\"-3.8\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 109.999 86.254)\" width=\"83.2\" x=\"-41.6\" xlink:href=\"#fi176-d\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 109.999 116.254)\" width=\"83.2\" x=\"-41.6\" xlink:href=\"#fi176-d\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 109.999 146.254)\" width=\"83.2\" x=\"-41.6\" xlink:href=\"#fi176-d\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 176.254)\" width=\"33.2\" x=\"-16.6\" xlink:href=\"#fi176-c\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 97.5 101.254)\" width=\"33.2\" x=\"-16.6\" xlink:href=\"#fi176-c\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 97.5 131.254)\" width=\"33.2\" x=\"-16.6\" xlink:href=\"#fi176-c\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 97.5 161.254)\" width=\"33.2\" x=\"-16.6\" xlink:href=\"#fi176-c\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 134.999 101.254)\" width=\"8.2\" x=\"-4.1\" xlink:href=\"#fi176-b\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 134.999 131.254)\" width=\"8.2\" x=\"-4.1\" xlink:href=\"#fi176-b\" y=\"-3.8\"/><use height=\"7.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 134.999 161.254)\" width=\"8.2\" x=\"-4.1\" xlink:href=\"#fi176-b\" y=\"-3.8\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_177(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Mullety',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi177-b\" viewBox=\"-6.48 -6.48 12.96 12.96\"><use height=\"7.23\" overflow=\"visible\" transform=\"translate(0 2.863)\" width=\"4.19\" x=\"-2.1\" xlink:href=\"#fi177-a\" y=\"-3.62\"/><use height=\"7.23\" overflow=\"visible\" transform=\"rotate(90 -1.432 -1.432)\" width=\"4.19\" x=\"-2.1\" xlink:href=\"#fi177-a\" y=\"-3.62\"/><use height=\"7.23\" overflow=\"visible\" transform=\"rotate(180 0 -1.432)\" width=\"4.19\" x=\"-2.1\" xlink:href=\"#fi177-a\" y=\"-3.62\"/><use height=\"7.23\" overflow=\"visible\" transform=\"rotate(-90 1.432 -1.432)\" width=\"4.19\" x=\"-2.1\" xlink:href=\"#fi177-a\" y=\"-3.62\"/></symbol><symbol id=\"fi177-a\" viewBox=\"-2.1 -3.62 4.19 7.23\"><path d=\"m0 3.62-2.1-7.24 4.2.01z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><symbol id=\"fi177-c\" viewBox=\"-18.98 -6.48 37.96 12.96\"><use height=\"12.96\" overflow=\"visible\" transform=\"translate(-12.5)\" width=\"12.96\" x=\"-6.48\" xlink:href=\"#fi177-b\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"translate(12.5)\" width=\"12.96\" x=\"-6.48\" xlink:href=\"#fi177-b\" y=\"-6.48\"/></symbol><symbol id=\"fi177-d\" viewBox=\"-31.48 -6.48 62.96 12.96\"><use height=\"12.96\" overflow=\"visible\" transform=\"translate(-25)\" width=\"12.96\" x=\"-6.48\" xlink:href=\"#fi177-b\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" width=\"12.96\" x=\"-6.48\" xlink:href=\"#fi177-b\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"translate(25)\" width=\"12.96\" x=\"-6.48\" xlink:href=\"#fi177-b\" y=\"-6.48\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 85 87)\" width=\"37.96\" x=\"-18.98\" xlink:href=\"#fi177-c\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 135 87)\" width=\"37.96\" x=\"-18.98\" xlink:href=\"#fi177-c\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 85 117)\" width=\"37.96\" x=\"-18.98\" xlink:href=\"#fi177-c\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 135 117)\" width=\"37.96\" x=\"-18.98\" xlink:href=\"#fi177-c\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 85 147)\" width=\"37.96\" x=\"-18.98\" xlink:href=\"#fi177-c\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 135 147)\" width=\"37.96\" x=\"-18.98\" xlink:href=\"#fi177-c\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 177)\" width=\"37.96\" x=\"-18.98\" xlink:href=\"#fi177-c\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 102)\" width=\"62.96\" x=\"-31.48\" xlink:href=\"#fi177-d\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 132)\" width=\"62.96\" x=\"-31.48\" xlink:href=\"#fi177-d\" y=\"-6.48\"/><use height=\"12.96\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 162)\" width=\"62.96\" x=\"-31.48\" xlink:href=\"#fi177-d\" y=\"-6.48\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_178(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Papellony',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi178-a\" viewBox=\"-8.33 -10 16.67 20\"><path d=\"M-8.33 0c0-5.52 3.73-10 8.33-10S8.33-5.52 8.33 0C3.73 0 0 4.48 0 10 0 4.48-3.73 0-8.33 0z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><symbol id=\"fi178-d\" viewBox=\"-50 -10 100 20\"><use height=\"20\" overflow=\"visible\" transform=\"translate(-41.667)\" width=\"16.67\" x=\"-8.33\" xlink:href=\"#fi178-a\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"translate(-25)\" width=\"16.67\" x=\"-8.33\" xlink:href=\"#fi178-a\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"translate(-8.333)\" width=\"16.67\" x=\"-8.33\" xlink:href=\"#fi178-a\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"translate(8.333)\" width=\"16.67\" x=\"-8.33\" xlink:href=\"#fi178-a\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"translate(25)\" width=\"16.67\" x=\"-8.33\" xlink:href=\"#fi178-a\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"translate(41.667)\" width=\"16.67\" x=\"-8.33\" xlink:href=\"#fi178-a\" y=\"-10\"/></symbol><symbol id=\"fi178-e\" viewBox=\"-16.67 -10 33.33 20\"><path d=\"M8.33 10C8.33 4.48 4.6 0 0 0h-16.67l8.33-10H8.33c4.6 0 8.33 4.48 8.33 10-4.59 0-8.33 4.48-8.33 10z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><defs><path d=\"M60 72v75c0 27.61 22.38 50 49.99 50h.01c27.61 0 50-22.38 50-49.99V72H60z\" id=\"fi178-b\"/></defs><clipPath id=\"fi178-c\"><use overflow=\"visible\" xlink:href=\"#fi178-b\"/></clipPath><g clip-path=\"url(#fi178-c)\"><use height=\"20\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 82)\" width=\"100\" x=\"-50\" xlink:href=\"#fi178-d\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 102)\" width=\"100\" x=\"-50\" xlink:href=\"#fi178-d\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 122)\" width=\"100\" x=\"-50\" xlink:href=\"#fi178-d\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 142)\" width=\"100\" x=\"-50\" xlink:href=\"#fi178-d\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 162)\" width=\"100\" x=\"-50\" xlink:href=\"#fi178-d\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 76.667 182)\" width=\"33.33\" x=\"-16.67\" xlink:href=\"#fi178-e\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 101.667 182)\" width=\"16.67\" x=\"-8.33\" xlink:href=\"#fi178-a\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 118.334 182)\" width=\"16.67\" x=\"-8.33\" xlink:href=\"#fi178-a\" y=\"-10\"/><use height=\"20\" overflow=\"visible\" transform=\"rotate(180 71.66 91)\" width=\"33.33\" x=\"-16.67\" xlink:href=\"#fi178-e\" y=\"-10\"/></g>'\n                    )\n                )\n            );\n    }\n\n    function field_179(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Masoned',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M149.5 88H160v-3l-1 1h-22l-1-1V73l1-1h-4l1 1v12l-1 1h-21l-1-1V73l1-1h-4l1 1v12l-1 1H87l-1-1V73l1-1h-4l1 1v12l-1 1H61l-1-1v3h10.5l1 1v11l-1 1H60v17h10.5l1 1v11l-1 1H60v16c0 .335.018.666.025 1H70.5l1 1v11l-1 1H62c.223.766.463 1.524.722 2.275L63 163h20l1 1v11l-1 1H69.282c1.29 1.81 2.7 3.532 4.218 5.155V179l1-1h21l1 1v11l-1 1h-9.265a49.664 49.664 0 0 0 4.142 2H108l1 1v2.975c.137 0 .274 0 .411.01.2 0 .391.015.589.015.198 0 .392-.013.589-.015.137-.005.274-.008.411-.01V194l1-1h17.618a49.321 49.321 0 0 0 4.141-2H124.5l-1-1v-11l1-1h21l1 1v2.154a49.948 49.948 0 0 0 4.217-5.154H137l-1-1v-11l1-1h20l.276.276c.258-.751.499-1.51.722-2.276h-8.5l-1-1v-11l1-1h10.474c.007-.334.026-.665.026-1v-2l-1 1H137l-1-1v-11l1-1h22l1 1v-3h-10.5l-1-1v-11l1-1H160v-3l-1 1h-22l-1-1v-11l1-1h22l1 1v-3h-10.5l-1-1V89l1-1Zm-51 1 1-1h21l1 1v11l-1 1h-21l-1-1V89Zm-3 29 1 1v11l-1 1h-21l-1-1v-11l1-1h21Zm-9.5-3v-11l1-1h21l1 1v11l-1 1H87l-1-1Zm0 19 1-1h21l1 1v11l-1 1H87l-1-1v-11Zm12.5 15 1-1h21l1 1v11l-1 1h-21l-1-1v-11Zm13.5-3-1-1v-11l1-1h21l1 1v11l-1 1h-21Zm9.5-16-1 1h-21l-1-1v-11l1-1h21l1 1v11Zm-9.5-14-1-1v-11l1-1h21l1 1v11l-1 1h-21ZM73.5 89l1-1h21l1 1v11l-1 1h-21l-1-1V89ZM61 116l-1-1v-11l1-1h22l1 1v11l-1 1H61Zm0 30-1-1v-11l1-1h22l1 1v11l-1 1H61Zm13.5 15-1-1v-11l1-1h21l1 1v11l-1 1h-21ZM87 176l-1-1v-11l1-1h21l1 1v11l-1 1H87Zm34.5 14-1 1h-21l-1-1v-11l1-1h21l1 1v11Zm12.5-15-1 1h-21l-1-1v-11l1-1h21l1 1v11Zm11.5-27 1 1v11l-1 1h-21l-1-1v-11l1-1h21Zm0-30 1 1v11l-1 1h-21l-1-1v-11l1-1h21Zm1-18-1 1h-21l-1-1V89l1-1h21l1 1v11Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n}\n"
    },
    "contracts/libraries/HexStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nlibrary HexStrings {\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\n\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = '0';\n        buffer[1] = 'x';\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = ALPHABET[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, 'Strings: hex length insufficient');\n        return string(buffer);\n    }\n\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length);\n        for (uint256 i = buffer.length; i > 0; i--) {\n            buffer[i - 1] = ALPHABET[value & 0xf];\n            value >>= 4;\n        }\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/SVGs/Fields/FieldSVGs11.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport '../../interfaces/IFieldSVGs.sol';\nimport '../../interfaces/ICategories.sol';\nimport '../../libraries/HexStrings.sol';\n\n/// @dev Generate Field SVG\ncontract FieldSVGs11 is IFieldSVGs, ICategories {\n    using HexStrings for uint24;\n\n    function field_196(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Supergrid I',\n                Categories.MYTHIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi196-a\" viewBox=\"-0.5 -70 1 140\"><path d=\"M0 70V-70\" fill=\"none\" stroke=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><symbol id=\"fi196-e\" viewBox=\"-19.3 -70 38.5 140\"><use height=\"140\" overflow=\"visible\" transform=\"translate(18.75)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(12.5)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(6.25)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(-6.25)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(-12.5)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(-18.75)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/></symbol><symbol id=\"fi196-f\" viewBox=\"-70 -26.8 140 53.5\"><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 -13.13 13.13)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 -9.38 9.38)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 -5.63 5.63)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 -1.88 1.88)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 1.88 -1.88)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 5.63 -5.63)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 9.38 -9.38)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 13.13 -13.13)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/></symbol><symbol id=\"fi196-d\" viewBox=\"-88.9 -54.1 177.9 108.2\"><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 21.87 -60.43)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 18.75 -51.8)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 15.62 -43.16)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 12.5 -34.53)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 9.37 -25.9)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 6.25 -17.27)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 3.12 -8.63)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 0 0)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -3.12 8.63)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -6.25 17.27)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -9.37 25.9)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -12.5 34.53)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -15.62 43.16)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -18.75 51.8)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -21.87 60.43)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><defs><path d=\"M110 190.8c-24.1 0-43.8-19.6-43.8-43.8V79.5h87.5V147c.1 24.1-19.6 43.8-43.7 43.8z\" id=\"fi196-b\"/></defs><clipPath id=\"fi196-c\"><use overflow=\"visible\" xlink:href=\"#fi196-b\"/></clipPath><g clip-path=\"url(#fi196-c)\"><use height=\"108.2\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 65.2 133.28)\" width=\"177.9\" x=\"-88.9\" xlink:href=\"#fi196-d\" y=\"-54.1\"/><use height=\"108.2\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 152.7 140.78)\" width=\"177.9\" x=\"-88.9\" xlink:href=\"#fi196-d\" y=\"-54.1\"/><use height=\"140\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 132)\" width=\"1\" x=\"-.5\" xlink:href=\"#fi196-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 85 132)\" width=\"38.5\" x=\"-19.3\" xlink:href=\"#fi196-e\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 135 132)\" width=\"38.5\" x=\"-19.3\" xlink:href=\"#fi196-e\" y=\"-70\"/><use height=\"53.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 105.77)\" width=\"140\" x=\"-70\" xlink:href=\"#fi196-f\" y=\"-26.8\"/><use height=\"53.5\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 165.77)\" width=\"140\" x=\"-70\" xlink:href=\"#fi196-f\" y=\"-26.8\"/></g><path d=\"M110 190.8c-24.1 0-43.8-19.6-43.8-43.8V79.5h87.5V147c.1 24.1-19.6 43.8-43.7 43.8z\" fill=\"none\" stroke=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_197(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Supergrid II',\n                Categories.MYTHIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi197-a\" viewBox=\"-0.2 -70 0.5 140\"><path d=\"M0 70V-70\" fill=\"none\" stroke=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\" stroke-width=\".5\"/></symbol><symbol id=\"fi197-e\" viewBox=\"-19 -70 38 140\"><use height=\"140\" overflow=\"visible\" transform=\"translate(18.75)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(12.5)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(6.25)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(-6.25)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(-12.5)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"translate(-18.75)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/></symbol><symbol id=\"fi197-f\" viewBox=\"-70 -26.5 140 53\"><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 -13.13 13.13)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 -9.38 9.38)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 -5.63 5.63)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 -1.88 1.88)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 1.88 -1.88)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 5.63 -5.63)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 9.38 -9.38)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(90 13.13 -13.13)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/></symbol><symbol id=\"fi197-d\" viewBox=\"-88.7 -53.9 177.5 107.9\"><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 21.87 -60.43)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 18.75 -51.8)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 15.62 -43.16)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 12.5 -34.53)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 9.37 -25.9)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 6.25 -17.27)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 3.12 -8.63)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 0 0)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -3.12 8.63)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -6.25 17.27)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -9.37 25.9)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -12.5 34.53)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -15.62 43.16)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -18.75 51.8)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"rotate(-39.8 -21.87 60.43)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><defs><path d=\"M110 190.8c-24.1 0-43.8-19.6-43.8-43.8V79.5h87.5V147c.1 24.1-19.6 43.8-43.7 43.8z\" id=\"fi197-b\"/></defs><clipPath id=\"fi197-c\"><use overflow=\"visible\" xlink:href=\"#fi197-b\"/></clipPath><g clip-path=\"url(#fi197-c)\"><use height=\"107.9\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 65.2 133.28)\" width=\"177.5\" x=\"-88.7\" xlink:href=\"#fi197-d\" y=\"-53.9\"/><use height=\"107.9\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 152.7 140.78)\" width=\"177.5\" x=\"-88.7\" xlink:href=\"#fi197-d\" y=\"-53.9\"/><use height=\"140\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 132)\" width=\".5\" x=\"-.2\" xlink:href=\"#fi197-a\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 85 132)\" width=\"38\" x=\"-19\" xlink:href=\"#fi197-e\" y=\"-70\"/><use height=\"140\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 135 132)\" width=\"38\" x=\"-19\" xlink:href=\"#fi197-e\" y=\"-70\"/><use height=\"53\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 105.77)\" width=\"140\" x=\"-70\" xlink:href=\"#fi197-f\" y=\"-26.5\"/><use height=\"53\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 165.77)\" width=\"140\" x=\"-70\" xlink:href=\"#fi197-f\" y=\"-26.5\"/></g><path d=\"M110 190.8c-24.1 0-43.8-19.6-43.8-43.8V79.5h87.5V147c.1 24.1-19.6 43.8-43.7 43.8z\" fill=\"none\" stroke=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\" stroke-width=\"2\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_198(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Microdot',\n                Categories.MYTHIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi198-a\" viewBox=\"-1 -4 2 8\"><circle cy=\"3\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\" r=\"1\"/><circle cy=\"-3\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\" r=\"1\"/></symbol><symbol id=\"fi198-b\" viewBox=\"-1 -58 2 116\"><use height=\"8\" overflow=\"visible\" transform=\"translate(0 54)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/><use height=\"8\" overflow=\"visible\" transform=\"translate(0 42)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/><use height=\"8\" overflow=\"visible\" transform=\"translate(0 30)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/><use height=\"8\" overflow=\"visible\" transform=\"translate(0 18)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/><use height=\"8\" overflow=\"visible\" transform=\"translate(0 6)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/><use height=\"8\" overflow=\"visible\" transform=\"translate(0 -6)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/><use height=\"8\" overflow=\"visible\" transform=\"translate(0 -18)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/><use height=\"8\" overflow=\"visible\" transform=\"translate(0 -30)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/><use height=\"8\" overflow=\"visible\" transform=\"translate(0 -42)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/><use height=\"8\" overflow=\"visible\" transform=\"translate(0 -54)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-a\" y=\"-4\"/></symbol><symbol id=\"fi198-c\" viewBox=\"-6 -58 12 116\"><use height=\"116\" overflow=\"visible\" transform=\"translate(-5)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-b\" y=\"-58\"/><use height=\"116\" overflow=\"visible\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-b\" y=\"-58\"/><use height=\"116\" overflow=\"visible\" transform=\"translate(5)\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-b\" y=\"-58\"/></symbol><symbol id=\"fi198-d\" viewBox=\"-21 -58 42 116\"><use height=\"116\" overflow=\"visible\" transform=\"translate(-15)\" width=\"12\" x=\"-6\" xlink:href=\"#fi198-c\" y=\"-58\"/><use height=\"116\" overflow=\"visible\" width=\"12\" x=\"-6\" xlink:href=\"#fi198-c\" y=\"-58\"/><use height=\"116\" overflow=\"visible\" transform=\"translate(15)\" width=\"12\" x=\"-6\" xlink:href=\"#fi198-c\" y=\"-58\"/></symbol><symbol id=\"fi198-g\" viewBox=\"-46 -58 92 116\"><use height=\"116\" overflow=\"visible\" transform=\"translate(-25)\" width=\"42\" x=\"-21\" xlink:href=\"#fi198-d\" y=\"-58\"/><use height=\"116\" overflow=\"visible\" transform=\"translate(25)\" width=\"42\" x=\"-21\" xlink:href=\"#fi198-d\" y=\"-58\"/><use height=\"116\" overflow=\"visible\" width=\"2\" x=\"-1\" xlink:href=\"#fi198-b\" y=\"-58\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><defs><path d=\"M110 75H63v76.3l4.2 3.9.4 14.5 3.7 2.1 2.8 5.1 3.2 1.6 1.3 4.1 8.2.9 1.8 5 12.8.8 1.7 4.7h13.8l1.7-4.7 12.8-.8 1.8-5 8.2-.9 1.3-4.1 3.2-1.6 2.8-5.1 3.7-2.1.4-14.5 4.2-3.9V75z\" id=\"fi198-e\"/></defs><clipPath id=\"fi198-f\"><use overflow=\"visible\" xlink:href=\"#fi198-e\"/></clipPath><g clip-path=\"url(#fi198-f)\"><use height=\"116\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 135)\" width=\"92\" x=\"-46\" xlink:href=\"#fi198-g\" y=\"-58\"/></g>'\n                    )\n                )\n            );\n    }\n}\n"
    },
    "contracts/SVGs/Fields/FieldSVGs10.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport '../../interfaces/IFieldSVGs.sol';\nimport '../../interfaces/ICategories.sol';\nimport '../../libraries/HexStrings.sol';\n\n/// @dev Generate Field SVG\ncontract FieldSVGs10 is IFieldSVGs, ICategories {\n    using HexStrings for uint24;\n\n    function field_180(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Fretty I',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi180-a\" viewBox=\"-13.5 -16 27 32\"><path d=\"M7.68 14.22-11.85-9.22l4.17-5L11.85 9.22zM12.5-10 4.82-.78l-4.17-5L8.33-15l5.17-1zm-25 0-1-6 5.17 1zM-.65 5.78-8.33 15l-5.17 1 1-6L-4.82.78zM13.5 16l-5.17-1 4.17-5z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><symbol id=\"fi180-b\" viewBox=\"-26 -16 52 32\"><use height=\"32\" overflow=\"visible\" transform=\"translate(-12.5)\" width=\"27\" x=\"-13.5\" xlink:href=\"#fi180-a\" y=\"-16\"/><use height=\"32\" overflow=\"visible\" transform=\"translate(12.5)\" width=\"27\" x=\"-13.5\" xlink:href=\"#fi180-a\" y=\"-16\"/></symbol><symbol id=\"fi180-e\" viewBox=\"-51 -16 102 32\"><use height=\"32\" overflow=\"visible\" transform=\"translate(-25)\" width=\"52\" x=\"-26\" xlink:href=\"#fi180-b\" y=\"-16\"/><use height=\"32\" overflow=\"visible\" transform=\"translate(25)\" width=\"52\" x=\"-26\" xlink:href=\"#fi180-b\" y=\"-16\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><defs><path d=\"M60 72v75c0 27.61 22.38 50 49.99 50h.01c27.61 0 50-22.38 50-49.99V72H60z\" id=\"fi180-c\"/></defs><clipPath id=\"fi180-d\"><use overflow=\"visible\" xlink:href=\"#fi180-c\"/></clipPath><g clip-path=\"url(#fi180-d)\"><use height=\"32\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 87)\" width=\"102\" x=\"-51\" xlink:href=\"#fi180-e\" y=\"-16\"/><use height=\"32\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 117)\" width=\"102\" x=\"-51\" xlink:href=\"#fi180-e\" y=\"-16\"/><use height=\"32\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 147)\" width=\"102\" x=\"-51\" xlink:href=\"#fi180-e\" y=\"-16\"/><use height=\"32\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 177)\" width=\"102\" x=\"-51\" xlink:href=\"#fi180-e\" y=\"-16\"/><use height=\"32\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 207)\" width=\"102\" x=\"-51\" xlink:href=\"#fi180-e\" y=\"-16\"/></g>'\n                    )\n                )\n            );\n    }\n\n    function field_181(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Fretty II',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi181-a\" viewBox=\"-13.21 -15.57 26.15 31.6\"><path d=\"m12.5-1.56.44 2.6L2.6 13.44l-1.3-1.56zm-9.9 15zM-1.3-15l2.12-.57L11.2-3.12 9.9-1.56zM-9.9 1.56 1.3 15l-1.74 1.03L-11.2 3.12zm8.6-13.44L-12.5 1.56l-.71-2.27L-2.6-13.44z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><symbol id=\"fi181-d\" viewBox=\"-50.71 -15.57 101.15 31.6\"><use height=\"31.6\" overflow=\"visible\" transform=\"translate(-37.5)\" width=\"26.15\" x=\"-13.21\" xlink:href=\"#fi181-a\" y=\"-15.57\"/><use height=\"31.6\" overflow=\"visible\" transform=\"translate(-12.5)\" width=\"26.15\" x=\"-13.21\" xlink:href=\"#fi181-a\" y=\"-15.57\"/><use height=\"31.6\" overflow=\"visible\" transform=\"translate(12.5)\" width=\"26.15\" x=\"-13.21\" xlink:href=\"#fi181-a\" y=\"-15.57\"/><use height=\"31.6\" overflow=\"visible\" transform=\"translate(37.5)\" width=\"26.15\" x=\"-13.21\" xlink:href=\"#fi181-a\" y=\"-15.57\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><defs><path d=\"M60 72v75c0 27.61 22.38 50 49.99 50h.01c27.61 0 50-22.38 50-49.99V72H60z\" id=\"fi181-b\"/></defs><clipPath id=\"fi181-c\"><use overflow=\"visible\" xlink:href=\"#fi181-b\"/></clipPath><g clip-path=\"url(#fi181-c)\"><use height=\"31.6\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 87)\" width=\"101.15\" x=\"-50.71\" xlink:href=\"#fi181-d\" y=\"-15.57\"/><use height=\"31.6\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 117)\" width=\"101.15\" x=\"-50.71\" xlink:href=\"#fi181-d\" y=\"-15.57\"/><use height=\"31.6\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 147)\" width=\"101.15\" x=\"-50.71\" xlink:href=\"#fi181-d\" y=\"-15.57\"/><use height=\"31.6\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 177)\" width=\"101.15\" x=\"-50.71\" xlink:href=\"#fi181-d\" y=\"-15.57\"/><use height=\"31.6\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 207)\" width=\"101.15\" x=\"-50.71\" xlink:href=\"#fi181-d\" y=\"-15.57\"/></g>'\n                    )\n                )\n            );\n    }\n\n    function field_182(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Grillage',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M112.5 166.5v30.437c-.828.041-1.661.062-2.5.063-.839.001-1.672-.02-2.5-.063V166.5h5Zm0-60h-5v51h5v-51Zm-23 58h41v-5h-41v5Zm25-30H160v-5h-45.5v5Zm-9-5H60v5h45.5v-5Zm27 62.148a49.95 49.95 0 0 0 5-2.9V136.5h-5v55.148Zm5-64.148V72h-5v55.5h5Zm-7-28h-41v5h41v-5Zm-18-2V72h-5v25.5h5Zm27 7H160v-5h-20.5v5Zm-59 60v-5H61.575a49.638 49.638 0 0 0 1.58 5H80.5Zm0-60v-5H60v5h20.5Zm7-32.5h-5v55.5h5V72Zm52 92.5h17.344a49.325 49.325 0 0 0 1.58-5H139.5v5Zm-52 27.148V136.5h-5v52.253a49.703 49.703 0 0 0 5 2.895Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_183(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Vair',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M101.666 79.653 93.333 72h33.333l-8.333 7.653v14.694L110 102l-8.334-7.653V79.653Zm0 60v14.694L110 162l8.333-7.653v-14.694l8.333-7.653H93.333l8.333 7.653Zm50 34.982A49.813 49.813 0 0 0 157.707 162h-14.374l8.333 7.653v4.982Zm0-50.288L160 132v-30h-16.667l8.333 7.653v14.694Zm-83.333 50.287v-4.981L76.666 162H62.292a49.773 49.773 0 0 0 6.041 12.634ZM76.666 162 85 169.653v20.641a49.624 49.624 0 0 0 16.666 6v-26.641L110 162H76.666ZM85 79.653 93.333 72H60l8.333 7.653v14.694L76.666 102 85 94.347V79.653Zm33.333 30v14.694l8.333 7.653 8.334-7.653v-14.694l8.333-7.653H110l8.333 7.653ZM110 162l8.334 7.653V196.3a49.673 49.673 0 0 0 16.666-6v-20.647l8.333-7.653H110Zm41.667-82.347L160 72h-33.334L135 79.653v14.694l8.333 7.653 8.333-7.653.001-14.694Zm-16.666 60v14.694l8.332 7.653 8.333-7.653v-14.694L160 132h-33.334l8.335 7.653Zm-50 0L93.333 132H60l8.333 7.653v14.694L76.666 162 85 154.347l.001-14.694Zm16.666-30L110 102H60v30l8.333-7.653v-14.694L76.666 102 85 109.653v14.694L93.333 132l8.333-7.653.001-14.694Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_184(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Counter-Vair',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M128.75 169.5 135 162l6.251 7.5v15l.756.907a49.87 49.87 0 0 1-17.2 9.361L122.5 192l-3.477 4.172a49.572 49.572 0 0 1-18.045 0L97.5 192l-2.307 2.769a49.878 49.878 0 0 1-17.2-9.361l.756-.907v-15L85 162l6.251 7.5v15L97.5 192l6.25-7.5v-15L110 162l6.25 7.5v15l6.25 7.5 6.25-7.5v-15Zm25-45-6.25 7.5-6.249-7.5v-15L135 102l-6.249 7.5v15L122.5 132l-6.25-7.5v-15L110 102l-6.25 7.5v15L97.5 132l-6.249-7.5v-15L85 102l-6.25 7.5v15L72.5 132l-6.25-7.5v-15L60 102v45c-.002 4.374.57 8.73 1.7 12.955l4.547-5.456v-15L72.5 132l6.249 7.5v15L85 162l6.251-7.5v-15L97.5 132l6.25 7.5v15L110 162l6.25-7.5v-15l6.25-7.5 6.25 7.5v15L135 162l6.251-7.5v-15l6.25-7.5 6.249 7.5v15l4.546 5.456A50.024 50.024 0 0 0 160 147v-45l-6.25 7.5v15Zm0-30L160 102V72h-12.5l6.249 7.5.001 15Zm-25 0L135 102l6.251-7.5v-15L147.5 72h-25l6.25 7.5v15ZM60 102l6.25-7.5v-15L72.5 72H60v30Zm18.75-7.5L85 102l6.251-7.5v-15L97.5 72h-25l6.249 7.5.001 15Zm25 0L110 102l6.25-7.5v-15l6.25-7.5h-25l6.25 7.5v15Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_185(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Vair Ancient',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M157.707 162H62.292a49.754 49.754 0 0 1-1.6-6.75c10.527-.61 4.86-16.529 16.032-16.529 11.39 0 5.265 16.558 16.656 16.558 11.391 0 5.265-16.558 16.656-16.558 11.391 0 5.265 16.558 16.656 16.558 11.391 0 5.265-16.558 16.655-16.558 11.15 0 5.528 15.854 15.967 16.526a49.813 49.813 0 0 1-1.607 6.753Zm-14.363-53.279c-11.39 0-5.265 16.558-16.655 16.558s-5.266-16.558-16.656-16.558c-11.39 0-5.265 16.558-16.656 16.558-11.391 0-5.265-16.558-16.656-16.558-11.391 0-5.265 16.558-16.655 16.558V132H160v-6.721c-11.391 0-5.266-16.558-16.656-16.558Zm7.805 66.673c-1.21-3.54-2.85-6.673-7.805-6.673-11.39 0-5.265 16.558-16.655 16.558s-5.266-16.558-16.656-16.558c-11.39 0-5.265 16.558-16.656 16.558-11.391 0-5.265-16.558-16.656-16.558-4.984 0-6.614 3.17-7.825 6.736A49.993 49.993 0 0 0 110.039 197a49.992 49.992 0 0 0 41.11-21.606Zm-7.805-96.673c-11.39 0-5.265 16.558-16.655 16.558s-5.266-16.558-16.656-16.558c-11.39 0-5.265 16.558-16.656 16.558-11.391 0-5.265-16.558-16.656-16.558-11.391 0-5.265 16.558-16.655 16.558V102H160v-6.721c-11.391 0-5.266-16.558-16.656-16.558Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_186(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale and Per Chevron',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M110 102.021V197a50.014 50.014 0 0 1-48.3-37.047L109.983 102l.017.021ZM160 72h-50v30.021l48.284 57.921A49.833 49.833 0 0 0 160 147V72Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_187(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale and Per Fess Indented',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"m97.5 162 12.5-60v95a50 50 0 0 1-50-50v-45l12.5 60L85 102l12.5 60ZM110 72v30l12.5 60 12.5-60 12.5 60 12.5-60V72h-50Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_188(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess and Per Pale Wavy',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M115 177c0 7.181-10 7.82-10 15a7.68 7.68 0 0 0 2 4.9A49.997 49.997 0 0 1 60 147v-15h45c0 7.181 10 7.819 10 15s-10 7.819-10 15 10 7.821 10 15ZM105 72c0 7.18 10 7.819 10 15s-10 7.819-10 15 10 7.819 10 15-10 7.82-10 15h55V72h-55Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_189(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Saltire and Per Fess',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M160 72v60h-50l50-60ZM60 72v60h50L60 72Zm11.213 106.544a49.962 49.962 0 0 0 77.562-.013L110 132l-38.787 46.544Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_190(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale and Barry of Four',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M60 102h50v30H60v-30Zm50 0h50V72h-50v30Zm47.708 60A49.972 49.972 0 0 0 160 147v-15h-50v30h47.708Zm-48.63 34.977H110V162H62.292a50.016 50.016 0 0 0 46.786 34.977Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_191(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale and Barry of Eight',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M110 72h50v15h-50V72Zm-50 30h50V87H60v15Zm0 30h50v-15H60v15Zm90 45a49.85 49.85 0 0 0 7.707-15H110v15h40Zm-90-30a49.97 49.97 0 0 0 2.292 15H110v-15H60Zm100-30v-15h-50v15h50Zm0 30v-15h-50v15h50Zm-50 50v-20H70a49.916 49.916 0 0 0 40 20Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_192(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess and Paly of Five',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M135 72h25v60h-25V72Zm-25 125a49.747 49.747 0 0 0 25-6.706V132h-25v65Zm-50-50a49.97 49.97 0 0 0 25 43.294V132H60v15Zm25-75v60h25V72H85Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_193(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess and Two Pallets',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M100 72v60H80V72h20Zm0 124a50.207 50.207 0 0 0 10 1 50.2 50.2 0 0 0 10-1v-64h-20v64Zm40-9a49.923 49.923 0 0 0 20-40v-15h-20v55Zm-80-40a49.924 49.924 0 0 0 20 40v-55H60v15Zm60-75v60h20V72h-20Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_194(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Cross and Saltire I',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M160 140.5h-31.2l25.209 30.249a50.203 50.203 0 0 1-11.545 14.263L118.5 156.257V197h-17v-40.745l-23.964 28.756a50.186 50.186 0 0 1-11.545-14.263L91.2 140.5H60v-17h31.2L60 86.06V72h11.714l29.786 35.742V72h17v35.74L148.284 72H160v14.06l-31.2 37.44H160v17Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_195(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Grid',\n                Categories.MYTHIC,\n                string(\n                    abi.encodePacked(\n                        '<symbol id=\"fi195-b\" viewBox=\"-5.25 -7 10.5 14\"><path d=\"M5.25-6V6l-1 1h-8.5l-1-1V-6l1-1h8.5z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><symbol id=\"fi195-a\" viewBox=\"-5.75 -7 11.5 14\"><path d=\"M4.75 7h-9.5l-1-1V-6l1-1h9.5l1 1V6z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/></symbol><symbol id=\"fi195-c\" viewBox=\"-50 -7 100 14\"><use height=\"14\" overflow=\"visible\" transform=\"translate(-44.25)\" width=\"11.5\" x=\"-5.75\" xlink:href=\"#fi195-a\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(44.25)\" width=\"11.5\" x=\"-5.75\" xlink:href=\"#fi195-a\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(-31.25)\" width=\"10.5\" x=\"-5.25\" xlink:href=\"#fi195-b\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(-18.75)\" width=\"10.5\" x=\"-5.25\" xlink:href=\"#fi195-b\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(-6.25)\" width=\"10.5\" x=\"-5.25\" xlink:href=\"#fi195-b\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(6.25)\" width=\"10.5\" x=\"-5.25\" xlink:href=\"#fi195-b\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(18.75)\" width=\"10.5\" x=\"-5.25\" xlink:href=\"#fi195-b\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(31.25)\" width=\"10.5\" x=\"-5.25\" xlink:href=\"#fi195-b\" y=\"-7\"/></symbol><symbol id=\"fi195-f\" viewBox=\"-50 -31 100 62\"><use height=\"14\" overflow=\"visible\" transform=\"translate(0 24)\" width=\"100\" x=\"-50\" xlink:href=\"#fi195-c\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(0 8)\" width=\"100\" x=\"-50\" xlink:href=\"#fi195-c\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(0 -8)\" width=\"100\" x=\"-50\" xlink:href=\"#fi195-c\" y=\"-7\"/><use height=\"14\" overflow=\"visible\" transform=\"translate(0 -24)\" width=\"100\" x=\"-50\" xlink:href=\"#fi195-c\" y=\"-7\"/></symbol><path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><defs><path d=\"M60 72v75c0 27.61 22.38 50 49.99 50h.01c27.61 0 50-22.38 50-49.99V72H60z\" id=\"fi195-d\"/></defs><clipPath id=\"fi195-e\"><use overflow=\"visible\" xlink:href=\"#fi195-d\"/></clipPath><g clip-path=\"url(#fi195-e)\"><use height=\"62\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 103)\" width=\"100\" x=\"-50\" xlink:href=\"#fi195-f\" y=\"-31\"/><use height=\"62\" overflow=\"visible\" transform=\"matrix(1 0 0 -1 110 167)\" width=\"100\" x=\"-50\" xlink:href=\"#fi195-f\" y=\"-31\"/></g>'\n                    )\n                )\n            );\n    }\n}\n"
    },
    "contracts/SVGs/Fields/FieldSVGs1.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport '../../interfaces/IFieldSVGs.sol';\nimport '../../interfaces/ICategories.sol';\nimport '../../libraries/HexStrings.sol';\n\n/// @dev Generate Field SVG\ncontract FieldSVGs1 is IFieldSVGs, ICategories {\n    using HexStrings for uint24;\n\n    function field_0(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Perfect',\n                Categories.MYTHIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_1(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M110 197a49.997 49.997 0 0 0 50-50V72h-50v125Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_2(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M60 147a49.997 49.997 0 0 0 50 50 49.997 49.997 0 0 0 50-50v-15H60v15Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_3(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Bend Sinister',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M160 147V72L71.213 178.544a49.998 49.998 0 0 0 55.529 15.572A49.995 49.995 0 0 0 160 147Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_4(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Quarterly I',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M60 132h50v65a50 50 0 0 1-50-50v-15Zm50-60v60h50V72h-50Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_5(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Saltire',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M148.787 178.544 110 132l50-60v75a49.787 49.787 0 0 1-11.213 31.544ZM60 147a49.788 49.788 0 0 0 11.213 31.545L110 132 60 72v75Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_6(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Gyronny',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M110 132v65a49.903 49.903 0 0 1-38.788-18.456L110 132Zm-50 0h50L60 72v60Zm100 15v-15h-50l38.787 46.544A49.782 49.782 0 0 0 160 147Zm-50-75v60l50-60h-50Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_7(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Chevron',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"m110 102-48.3 57.955a50 50 0 0 0 96.591 0L110 102Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_8(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Chevron Inverted',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"m60 102 50 60 50-59.999V72H60v30Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_9(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                unicode'Per Chevron Ployé',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M110 102c-6.1 27.234-23.986 52.3-45.333 66.091A50.006 50.006 0 0 0 110.001 197a50.008 50.008 0 0 0 26.884-7.842 50.007 50.007 0 0 0 18.45-21.067C133.985 154.3 116.1 129.235 110 102Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_10(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                unicode'Per Chevron Inverted Ployé',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M60 93.1c23.375 12.99 43.456 39.7 50 68.9 6.543-29.2 26.625-55.911 50-68.9V72H60v21.1Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_11(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale Indented',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"m100 92 20 10-20 10 20 10-20 10 20 10-20 10 20 10-20 10 20 10-20 10 10 5a49.997 49.997 0 0 0 50-50V72h-60l20 10-20 10Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_12(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale Raguly',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M160 147V72h-54.219L115 82.926v10l-10-11.852v10l10 11.852v10l-10-11.852v10l10 11.852v10l-10-11.852v10l10 11.852v10l-10-11.852v10l10 11.852v10l-10-11.852v10l10 11.852v10l-10-11.852v10l5 5.926a49.997 49.997 0 0 0 50-50Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_13(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale Embattled ',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M104.444 178.785v17.894A49.987 49.987 0 0 0 159.999 147V72h-54.781l-.774.119v13.333h11.111v13.334h-11.111v13.333h11.111v13.333h-11.111v13.333h11.111v13.334h-11.111v13.333h11.111v13.333h-11.111Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_14(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale Wavy',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M115 87c0 7.181-10 7.819-10 15s10 7.819 10 15-10 7.82-10 15 10 7.819 10 15-10 7.819-10 15 10 7.82 10 15-10 7.82-10 15a6.977 6.977 0 0 0 2.027 4.9c.985.058 1.975.1 2.974.1a49.997 49.997 0 0 0 50-50V72H105c0 7.18 10 7.819 10 15Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_15(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale Rayonny',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M95 75.068c8.437 11 21.564-2.763 30 7.119-11.043-5.1-18.956 13.676-30 7.114 8.437 11 21.564-2.763 30 7.119-11.043-5.1-18.956 13.676-30 7.114 8.437 11 21.564-2.763 30 7.119-11.043-5.1-18.956 13.677-30 7.114 8.437 11 21.564-2.763 30 7.119-11.043-5.1-18.956 13.676-30 7.114 8.437 11 21.564-2.763 30 7.119-11.043-5.1-18.956 13.676-30 7.114 8.437 11 21.564-2.763 30 7.118-11.043-5.1-18.956 13.677-30 7.115 8.437 11 21.564-2.763 30 7.119-11.043-5.1-18.956 13.676-30 7.114 8.437 11 21.564-2.763 30 7.119-11.043-5.1-18.956 13.676-30 7.114 8.105 10.566 20.537-1.707 28.982 6.072A50.013 50.013 0 0 0 160 147V72h-49.913c-4.768 3.258-9.531 6.37-15.087 3.068Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_16(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale Nebuly',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M95 79.5a10.607 10.607 0 0 0 15 0 10.604 10.604 0 0 1 11.559-2.3A10.607 10.607 0 1 1 110 94.5a10.604 10.604 0 0 0-11.56-2.3A10.607 10.607 0 1 0 110 109.5a10.605 10.605 0 0 1 16.32 1.607 10.61 10.61 0 0 1-4.761 15.693A10.615 10.615 0 0 1 110 124.5a10.603 10.603 0 0 0-11.558-2.299 10.61 10.61 0 0 0-4.76 15.691 10.61 10.61 0 0 0 10.887 4.51A10.603 10.603 0 0 0 110 139.5a10.605 10.605 0 0 1 16.32 1.607 10.61 10.61 0 0 1-4.761 15.693A10.615 10.615 0 0 1 110 154.5a10.603 10.603 0 0 0-11.558-2.299 10.61 10.61 0 0 0-4.76 15.691 10.61 10.61 0 0 0 10.887 4.51A10.603 10.603 0 0 0 110 169.5a10.605 10.605 0 0 1 16.32 1.607 10.61 10.61 0 0 1-4.761 15.693A10.615 10.615 0 0 1 110 184.5a10.596 10.596 0 0 0-12.312-1.949 10.597 10.597 0 0 0-5.653 11.11A50.001 50.001 0 0 0 160 147V72H91.893A10.576 10.576 0 0 0 95 79.5Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_17(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pall Nebuly II',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M110 177a21.176 21.176 0 0 0-18.835-5.881 21.171 21.171 0 0 0-15.504 12.206 49.98 49.98 0 0 0 54.126 9.598A49.981 49.981 0 0 0 160 147V72H73.787A21.213 21.213 0 0 0 110 87c13.364-13.363 36.213-3.9 36.213 15S123.364 130.363 110 117a21.206 21.206 0 0 0-10.861-5.805 21.205 21.205 0 0 0-21.777 9.02 21.21 21.21 0 0 0 9.52 31.383 21.205 21.205 0 0 0 12.257 1.207A21.206 21.206 0 0 0 110 147c13.364-13.363 36.213-3.9 36.213 15S123.364 190.363 110 177Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_18(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Pale Indented Pometty',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M140 72a5.001 5.001 0 0 1-9.9.98l-40.2 8.04a5 5 0 1 0 0 1.96l40.2 8.04a5 5 0 1 1 0 1.96l-40.2 8.04a5 5 0 1 0 0 1.96l40.2 8.04a4.997 4.997 0 0 1 5.395-3.996 5 5 0 1 1-5.395 5.956l-40.2 8.04a4.998 4.998 0 0 0-5.395-3.996A5.002 5.002 0 0 0 79.997 122a5 5 0 0 0 9.903.98l40.2 8.04a4.997 4.997 0 0 1 5.395-3.996 5 5 0 1 1-5.395 5.956l-40.2 8.04a4.998 4.998 0 0 0-5.395-3.996A4.998 4.998 0 0 0 79.997 142a5 5 0 0 0 9.903.98l40.2 8.04a4.997 4.997 0 0 1 5.395-3.996 5.001 5.001 0 1 1-5.395 5.956l-40.2 8.04a4.998 4.998 0 0 0-5.395-3.996A4.998 4.998 0 0 0 79.997 162a5 5 0 0 0 9.903.98l40.2 8.04a4.997 4.997 0 0 1 5.395-3.996 5.001 5.001 0 1 1-5.395 5.956l-40.2 8.04a4.998 4.998 0 0 0-5.395-3.996A4.998 4.998 0 0 0 79.997 182a5 5 0 0 0 9.903.98l40.2 8.04a4.974 4.974 0 0 1 3.272-3.753 4.968 4.968 0 0 1 4.885.967A49.928 49.928 0 0 0 160 147V72h-20Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_19(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess Indented',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M147.5 147 135 117l-12.5 30-12.5-30-12.5 30L85 117l-12.5 30L60 117v30a49.997 49.997 0 0 0 50 50 49.997 49.997 0 0 0 50-50v-30l-12.5 30Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_20(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess Raguly',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"m150.28 127 8.334 10H147.5l-8.334-10h-11.108l8.334 10H125.28l-8.333-10h-11.111l8.333 10h-11.111l-8.333-10H83.614l8.333 10H80.836L72.5 127H61.393l8.333 10H60v10a49.997 49.997 0 0 0 50 50 49.997 49.997 0 0 0 50-50v-20h-9.72Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_21(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess Embattled',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M148.889 125.333v13.333h-11.112v-13.333h-11.11v13.333h-11.112v-13.333h-11.111v13.333H93.333v-13.333H82.222v13.333H71.111v-13.333H60v21.684A50 50 0 1 0 160 147v-21.667h-11.111Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_22(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess Wavy',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M143.333 137c-7.978 0-8.687-10-16.666-10-7.979 0-8.688 10-16.667 10-7.979 0-8.688-10-16.667-10-7.979 0-8.688 10-16.666 10S67.979 127 60 127v20a49.997 49.997 0 0 0 50 50 49.997 49.997 0 0 0 50-50v-20c-7.979 0-8.688 10-16.667 10Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_23(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess Rayonny',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M110 197a49.996 49.996 0 0 0 50-50v-9.031c-2.447-7.71-12.568-14.388-7.484-22.945-11 8.437 2.763 21.564-7.118 30 5.1-11.043-13.677-18.956-7.115-30-11 8.437 2.764 21.564-7.118 30 5.1-11.043-13.677-18.956-7.114-30-11 8.437 2.763 21.564-7.119 30 5.1-11.043-13.677-18.956-7.114-30-11 8.437 2.763 21.564-7.119 30 5.1-11.043-13.677-18.956-7.114-30-11 8.437 2.763 21.564-7.119 30 5.1-11.043-13.676-18.956-7.114-30-11 8.437 2.763 21.564-7.119 30 5.1-11.043-13.676-18.956-7.114-30-11 8.437 2.763 21.564-7.119 30v1.99A50.001 50.001 0 0 0 110 197Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_24(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess Nebuly I',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M160 147v-26.111a7.853 7.853 0 0 0-11.111 0 7.858 7.858 0 0 0 0 11.111 7.855 7.855 0 0 1 1.703 8.562 7.856 7.856 0 0 1-14.964-4.539 7.855 7.855 0 0 1 2.15-4.023 7.855 7.855 0 0 0 1.703-8.563 7.853 7.853 0 0 0-7.258-4.85 7.853 7.853 0 0 0-7.706 9.39 7.855 7.855 0 0 0 2.15 4.023 7.855 7.855 0 0 1 1.703 8.562 7.856 7.856 0 0 1-14.964-4.539 7.855 7.855 0 0 1 2.15-4.023 7.855 7.855 0 0 0 1.703-8.563 7.853 7.853 0 0 0-7.258-4.85 7.853 7.853 0 0 0-7.706 9.39 7.855 7.855 0 0 0 2.15 4.023 7.855 7.855 0 0 1-5.556 13.412 7.851 7.851 0 0 1-7.259-4.85A7.855 7.855 0 0 1 93.333 132a7.858 7.858 0 0 0-5.555-13.413 7.86 7.86 0 0 0-7.26 4.85A7.86 7.86 0 0 0 82.222 132a7.858 7.858 0 0 1-5.555 13.413 7.86 7.86 0 0 1-7.26-4.851A7.855 7.855 0 0 1 71.111 132 7.857 7.857 0 0 0 60 120.889v26.123a49.997 49.997 0 0 0 50.006 49.994 50.014 50.014 0 0 0 19.134-3.808A50.003 50.003 0 0 0 160 147Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_25(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess Nebuly II',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M60 147a49.999 49.999 0 1 0 100 0v-45.178a17.681 17.681 0 0 0-16.332 10.913A17.676 17.676 0 0 0 147.5 132c11.136 11.136 3.249 30.178-12.5 30.178S111.364 143.136 122.5 132a17.68 17.68 0 0 0-2.679-27.199 17.674 17.674 0 0 0-26.153 7.933A17.68 17.68 0 0 0 97.5 132c11.136 11.136 3.249 30.178-12.5 30.178S61.364 143.136 72.5 132A17.68 17.68 0 0 0 60 101.822V147Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_26(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess Indented Pometty',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M160 102.006v.001-.001ZM160 97a5.001 5.001 0 0 0-4.034 7.952 5 5 0 0 0 3.016 1.943L148.519 157.1a5.005 5.005 0 0 1 3.017 1.943 5.004 5.004 0 0 1-4.036 7.952 5.002 5.002 0 0 1-4.974-4.488 5.007 5.007 0 0 1 .938-3.464 5.005 5.005 0 0 1 3.017-1.943l-10.462-50.2a5.005 5.005 0 0 0 3.017-1.943A5.004 5.004 0 0 0 135 97.005a5.002 5.002 0 0 0-4.974 4.488 5.007 5.007 0 0 0 .938 3.464 5.005 5.005 0 0 0 3.017 1.943l-10.462 50.2a5.005 5.005 0 0 1 3.017 1.943 5.004 5.004 0 0 1-4.036 7.952 5.002 5.002 0 0 1-4.974-4.488 5.007 5.007 0 0 1 .938-3.464 5.005 5.005 0 0 1 3.017-1.943l-10.462-50.2a5.005 5.005 0 0 0 3.017-1.943A5.004 5.004 0 0 0 110 97.005a5.002 5.002 0 0 0-4.974 4.488 5.007 5.007 0 0 0 .938 3.464 5.005 5.005 0 0 0 3.017 1.943l-10.462 50.2a5.004 5.004 0 0 1 3.955 5.407 5.004 5.004 0 0 1-4.974 4.488 5 5 0 0 1-1.019-9.895l-10.462-50.2a5.002 5.002 0 0 0 3.955-5.407 5 5 0 1 0-5.993 5.407l-10.462 50.2a5.002 5.002 0 0 1 3.955 5.407 5 5 0 1 1-5.993-5.407l-10.462-50.2A5.001 5.001 0 0 0 60 97v50a49.997 49.997 0 0 0 50 50 49.997 49.997 0 0 0 50-50V97Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_27(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess with a Left Step',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M110 197a49.997 49.997 0 0 0 50-50v-30h-50v30H60a49.997 49.997 0 0 0 50 50Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_28(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Fess Enarched',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M60 147a49.997 49.997 0 0 0 50 50 49.997 49.997 0 0 0 50-50v-5s-17.443-20-50-20-50 20-50 20v5Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n\n    function field_29(uint24[4] memory colors) public pure returns (FieldData memory) {\n        return\n            FieldData(\n                'Per Bend Sinister Engrailed',\n                Categories.HERALDIC,\n                string(\n                    abi.encodePacked(\n                        '<path d=\"M60 72v75a50 50 0 0 0 50 50 50 50 0 0 0 50-50V72Z\" fill=\"#',\n                        colors[0].toHexStringNoPrefix(3),\n                        '\"/><path d=\"M160 147V72h-.433a12.47 12.47 0 0 1-8.614 6.634 12.464 12.464 0 0 1-10.544-2.65 12.495 12.495 0 0 1 4.665 8.511 12.52 12.52 0 0 1-.478 4.928 12.515 12.515 0 0 1-6.214 7.456 12.497 12.497 0 0 1-13.973-1.695 12.5 12.5 0 1 1-16 19.206 12.5 12.5 0 1 1-16 19.2 12.506 12.506 0 0 1 4.086 13.392 12.505 12.505 0 0 1-10.904 8.783 12.5 12.5 0 0 1-9.182-2.969A12.495 12.495 0 0 1 68.5 174.9a49.994 49.994 0 0 0 24.751 19.223 49.995 49.995 0 0 0 56.934-17.36A49.995 49.995 0 0 0 160 147Z\" fill=\"#',\n                        colors[1].toHexStringNoPrefix(3),\n                        '\"/>'\n                    )\n                )\n            );\n    }\n}\n"
    },
    "contracts/FrameGenerator.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.7.6;\npragma abicoder v2;\n\nimport './interfaces/IFrameGenerator.sol';\nimport './interfaces/IFrameSVGs.sol';\nimport '@openzeppelin/contracts/utils/Strings.sol';\n\n/// @dev Generate Shield SVG\ncontract FrameGenerator is IFrameGenerator {\n    using Strings for uint16;\n\n    IFrameSVGs immutable frameSVGs1;\n    IFrameSVGs immutable frameSVGs2;\n\n    constructor(FrameSVGs memory svgs) {\n        frameSVGs1 = svgs.frameSVGs1;\n        frameSVGs2 = svgs.frameSVGs2;\n    }\n\n    function generateFrame(uint16 frame) external view override returns (IFrameSVGs.FrameData memory) {\n        if (frame <= 3) {\n            return callFrameSVGs(frameSVGs1, frame);\n        }\n\n        if (frame <= 5) {\n            return callFrameSVGs(frameSVGs2, frame);\n        }\n\n        revert('invalid frame selection');\n    }\n\n    function callFrameSVGs(IFrameSVGs target, uint16 frame) internal view returns (IFrameSVGs.FrameData memory) {\n        bytes memory functionSelector = abi.encodePacked('frame_', uint16(frame).toString(), '()');\n\n        bool success;\n        bytes memory result;\n        (success, result) = address(target).staticcall(abi.encodeWithSelector(bytes4(keccak256(functionSelector))));\n\n        return abi.decode(result, (IFrameSVGs.FrameData));\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}