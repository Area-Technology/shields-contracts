{
  "address": "0xC40ab83661395b1e7F75840752BDAeCcf468D54D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFieldGenerator",
          "name": "_fieldGenerator",
          "type": "address"
        },
        {
          "internalType": "contract IHardwareGenerator",
          "name": "_hardwareGenerator",
          "type": "address"
        },
        {
          "internalType": "contract IFrameGenerator",
          "name": "_frameGenerator",
          "type": "address"
        },
        {
          "internalType": "contract IBuildPassSVGs",
          "name": "_buildPassSVGGenerator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "buildPassSVGGenerator",
      "outputs": [
        {
          "internalType": "contract IBuildPassSVGs",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fieldGenerator",
      "outputs": [
        {
          "internalType": "contract IFieldGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frameGenerator",
      "outputs": [
        {
          "internalType": "contract IFrameGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IShields.MintPass",
          "name": "mintPass",
          "type": "uint8"
        }
      ],
      "name": "generateBuildPassURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "built",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "field",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hardware",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "frame",
              "type": "uint16"
            },
            {
              "internalType": "enum IShields.MintPass",
              "name": "mintPass",
              "type": "uint8"
            },
            {
              "internalType": "uint24[4]",
              "name": "colors",
              "type": "uint24[4]"
            }
          ],
          "internalType": "struct IShields.Shield",
          "name": "shield",
          "type": "tuple"
        }
      ],
      "name": "generateShieldURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hardwareGenerator",
      "outputs": [
        {
          "internalType": "contract IHardwareGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x34472463e54a590c8426fa112c84b45b78e42a019b6d9ec25745e42bf3cd76e7",
  "receipt": {
    "to": null,
    "from": "0x177be9F3051e25F3732112572A19BD22e14066ED",
    "contractAddress": "0xC40ab83661395b1e7F75840752BDAeCcf468D54D",
    "transactionIndex": 46,
    "gasUsed": "2296756",
    "logsBloom": "0x
    "blockHash": "0xf65eddd4279d65a6079c89cd35788ac9ae1adee0414bbf8d115ca14bc852164d",
    "transactionHash": "0x34472463e54a590c8426fa112c84b45b78e42a019b6d9ec25745e42bf3cd76e7",
    "logs": [],
    "blockNumber": 6168376,
    "cumulativeGasUsed": "12899342",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4A840D460f327b70796D599D6B97609c00cA334c",
    "0xDb15c4D2bfbC6F71B0FDe4b980D88e129C1CBd25",
    "0x92be217cb85e1560d49840c0f39e1d19f2e1235c",
    "0x6b9d81f6F743fe60E20fC1269c208E844a375cFb"
  ],
  "solcInputHash": "f13209de5f6765da42f325a73fb27d59",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFieldGenerator\",\"name\":\"_fieldGenerator\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareGenerator\",\"name\":\"_hardwareGenerator\",\"type\":\"address\"},{\"internalType\":\"contract IFrameGenerator\",\"name\":\"_frameGenerator\",\"type\":\"address\"},{\"internalType\":\"contract IBuildPassSVGs\",\"name\":\"_buildPassSVGGenerator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"buildPassSVGGenerator\",\"outputs\":[{\"internalType\":\"contract IBuildPassSVGs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fieldGenerator\",\"outputs\":[{\"internalType\":\"contract IFieldGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frameGenerator\",\"outputs\":[{\"internalType\":\"contract IFrameGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IShields.MintPass\",\"name\":\"mintPass\",\"type\":\"uint8\"}],\"name\":\"generateBuildPassURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"built\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"},{\"internalType\":\"enum IShields.MintPass\",\"name\":\"mintPass\",\"type\":\"uint8\"},{\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"}],\"internalType\":\"struct IShields.Shield\",\"name\":\"shield\",\"type\":\"tuple\"}],\"name\":\"generateShieldURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardwareGenerator\",\"outputs\":[{\"internalType\":\"contract IHardwareGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Generate Shield Metadata\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShieldDescriptor.sol\":\"ShieldDescriptor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x08e38e034333372aea8cb1b8846085b7fbab42c6b77a0af464d2c6827827c4f0\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/ShieldDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './interfaces/ICategories.sol';\\nimport './interfaces/IFrameGenerator.sol';\\nimport './interfaces/IFieldGenerator.sol';\\nimport './interfaces/IHardwareGenerator.sol';\\nimport './interfaces/IBuildPassSVGs.sol';\\nimport './interfaces/IFrameSVGs.sol';\\nimport './interfaces/IShields.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\n/// @dev Generate Shield Metadata\\ncontract ShieldDescriptor {\\n    using Strings for uint8;\\n\\n    IFieldGenerator public immutable fieldGenerator;\\n    IHardwareGenerator public immutable hardwareGenerator;\\n    IFrameGenerator public immutable frameGenerator;\\n    IBuildPassSVGs public immutable buildPassSVGGenerator;\\n\\n    constructor(\\n        IFieldGenerator _fieldGenerator,\\n        IHardwareGenerator _hardwareGenerator,\\n        IFrameGenerator _frameGenerator,\\n        IBuildPassSVGs _buildPassSVGGenerator\\n    ) {\\n        fieldGenerator = _fieldGenerator;\\n        hardwareGenerator = _hardwareGenerator;\\n        frameGenerator = _frameGenerator;\\n        buildPassSVGGenerator = _buildPassSVGGenerator;\\n    }\\n\\n    function generateShieldURI(IShields.Shield memory shield) external view returns (string memory) {\\n        IFieldSVGs.FieldData memory field = fieldGenerator.generateField(shield.field, shield.colors);\\n        IHardwareSVGs.HardwareData memory hardware = hardwareGenerator.generateHardware(shield.hardware);\\n        IFrameSVGs.FrameData memory frame = frameGenerator.generateFrame(shield.frame);\\n\\n        string memory name = generateTitle(field.title, hardware.title, frame.title, shield.colors);\\n        string memory description = '5000 on-chain shields, designed and built by their owners.';\\n        bytes memory attributes = generateAttributesJSON(field, hardware, frame, shield.colors);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;base64,',\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                name,\\n                                '\\\", \\\"description\\\":\\\"',\\n                                description,\\n                                '\\\", \\\"image\\\": \\\"',\\n                                'data:image/svg+xml;base64,',\\n                                Base64.encode(bytes(generateSVG(field.svgString, hardware.svgString, frame.svgString))),\\n                                '\\\", \\\"attributes\\\": ',\\n                                attributes,\\n                                '}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateBuildPassURI(IShields.MintPass mintPass) external view returns (string memory) {\\n        string memory passTitle;\\n\\n        if (mintPass == IShields.MintPass.MAKER) {\\n            passTitle = 'Maker';\\n        } else if (mintPass == IShields.MintPass.STANDARD) {\\n            passTitle = 'Standard';\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;base64,',\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                passTitle,\\n                                ' Build Pass',\\n                                '\\\", \\\"description\\\":\\\"',\\n                                'minted but unbuilt',\\n                                '\\\", \\\"image\\\": \\\"',\\n                                'data:image/svg+xml;base64,',\\n                                Base64.encode(bytes(buildPassSVGGenerator.generateBuildPassSVG(mintPass))),\\n                                /* '\\\", \\\"attributes\\\": [{\\\"trait_type\\\":\\\"MintPass\\\", \\\"value\\\":\\\"', */\\n                                'blabla\\\"',\\n                                '}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateTitle(\\n        string memory fieldTitle,\\n        string memory hardwareTitle,\\n        string memory frameTitle,\\n        uint24[4] memory colors\\n    ) internal view returns (string memory) {\\n        bytes memory frameString = '';\\n        if (bytes(frameTitle).length > 0) {\\n          frameString = abi.encodePacked(frameTitle, ': ');\\n        }\\n        return string(abi.encodePacked(frameString, hardwareTitle, ' on a ', generateColorTitleSnippet(colors), fieldTitle));\\n    }\\n\\n    function generateColorTitleSnippet(uint24[4] memory colors) internal view returns (string memory) {\\n        bytes memory colorTitle = bytes(fieldGenerator.colorTitle(colors[0]));\\n        if (colors[1] > 0) {\\n            colorTitle = abi.encodePacked(\\n                colorTitle,\\n                colors[2] > 0 ? ' ' : ' and ',\\n                fieldGenerator.colorTitle(colors[1])\\n            );\\n        }\\n        if (colors[2] > 0) {\\n            colorTitle = abi.encodePacked(\\n                colorTitle,\\n                colors[3] > 0 ? ' ' : ' and ',\\n                fieldGenerator.colorTitle(colors[2])\\n            );\\n        }\\n        if (colors[3] > 0) {\\n            colorTitle = abi.encodePacked(colorTitle, ' and ', fieldGenerator.colorTitle(colors[3]));\\n        }\\n        colorTitle = abi.encodePacked(colorTitle, ' ');\\n        return string(colorTitle);\\n    }\\n\\n    function generateSVG(\\n        string memory fieldSVG,\\n        string memory hardwareSVG,\\n        string memory frameSVG\\n    ) internal pure returns (bytes memory svg) {\\n        svg = abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 220 264\\\">',\\n            fieldSVG,\\n            hardwareSVG,\\n            frameSVG,\\n            '</svg>'\\n        );\\n    }\\n\\n    function generateAttributesJSON(\\n        IFieldSVGs.FieldData memory fieldData,\\n        IHardwareSVGs.HardwareData memory hardwareData,\\n        IFrameSVGs.FrameData memory frameData,\\n        uint24[4] memory colors\\n    ) internal view returns (bytes memory attributesJSON) {\\n        attributesJSON = abi.encodePacked(\\n            '[{\\\"trait_type\\\":\\\"Field\\\", \\\"value\\\":\\\"',\\n            fieldData.title,\\n            '\\\"}, {\\\"trait_type\\\":\\\"Hardware\\\", \\\"value\\\":\\\"',\\n            hardwareData.title,\\n            '\\\"}, {\\\"trait_type\\\":\\\"Field Type\\\", \\\"value\\\":\\\"',\\n            getTypeString(fieldData.fieldType),\\n            '\\\"}, {\\\"trait_type\\\":\\\"Hardware Type\\\", \\\"value\\\":\\\"',\\n            getTypeString(hardwareData.hardwareType),\\n            conditionalFrameAttribute(frameData.title),\\n            colorAttributes(colors)\\n        );\\n    }\\n\\n    function getTypeString(ICategories.Categories category) internal pure returns (string memory typeString) {\\n        if (category == ICategories.Categories.MYTHIC) {\\n            typeString = 'Mythic';\\n        } else {\\n            typeString = 'Heraldic';\\n        }\\n    }\\n\\n    function conditionalFrameAttribute(string memory frameTitle) internal pure returns (bytes memory frameAttribute) {\\n        if (bytes(frameTitle).length > 0) {\\n            frameAttribute = abi.encodePacked('\\\"}, {\\\"trait_type\\\":\\\"Frame\\\", \\\"value\\\":\\\"', frameTitle);\\n        } else {\\n            frameAttribute = '';\\n        }\\n    }\\n\\n    function colorAttributes(uint24[4] memory colors) private view returns (bytes memory colorArributes) {\\n        colorArributes = abi.encodePacked(\\n            '\\\"}, {\\\"trait_type\\\":\\\"Color 1\\\", \\\"value\\\":\\\"',\\n            fieldGenerator.colorTitle(colors[0]),\\n            conditionalColorAttribute(colors[1], 2),\\n            conditionalColorAttribute(colors[2], 3),\\n            conditionalColorAttribute(colors[3], 4),\\n            '\\\"}]'\\n        );\\n    }\\n\\n    function conditionalColorAttribute(uint24 color, uint8 nColor) private view returns (bytes memory colorArribute) {\\n        if (color != 0) {\\n            colorArribute = abi.encodePacked(\\n                '\\\"}, {\\\"trait_type\\\":\\\"Color ',\\n                nColor.toString(),\\n                '\\\", \\\"value\\\":\\\"',\\n                fieldGenerator.colorTitle(color)\\n            );\\n        } else {\\n            colorArribute = '';\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfd77951e87d7f225191b6f735da4b285393e526a8275d3388fe67b3346e0863e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBuildPassSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IShields.sol';\\n\\n/// @dev Generate BuildPass SVG\\ninterface IBuildPassSVGs {\\n    function generateBuildPassSVG(IShields.MintPass mintPass) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x60436002be6f4a071b4b8d4f3f18f27adf6f412644cdd86666b886895e2601dd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ICategories.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/// @dev Generate Shield SVG\\ninterface ICategories {\\n    enum Categories {\\n        MYTHIC,\\n        HERALDIC\\n    }\\n}\\n\",\"keccak256\":\"0x1769d481cd2a69427ca954be1a53d71f0ddfc80a928903163baa7e661b5db22a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IColors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/// @dev Generate Shield SVG\\ninterface IColors {\\n    event ColorAdded(uint24 color, string title);\\n\\n    struct Color {\\n        string title;\\n        bool exists;\\n    }\\n\\n    /// @notice Returns true if color exists in contract, else false.\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorExists(uint24 color) external view returns (bool);\\n\\n    /// @notice Returns the title string corresponding to the 3-byte color\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorTitle(uint24 color) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0bdc1c70d09754ba49dbba2ad619d57aa1f53de0e36fd1a8583ded1a1a2343f2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFieldGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IFieldSVGs.sol';\\nimport './IColors.sol';\\n\\n/// @dev Generate Field SVG\\ninterface IFieldGenerator {\\n    /// @notice Generates field snippet of SVG of the specified colors\\n    /// @param field uint representing field selection\\n    /// @param colors to be rendered in the field svg\\n    /// @return FieldData containing svg snippet and field title\\n    function generateField(uint16 field, uint24[4] memory colors) external view returns (IFieldSVGs.FieldData memory);\\n\\n    event ColorAdded(uint24 color, string title);\\n\\n    struct Color {\\n        string title;\\n        bool exists;\\n    }\\n\\n    /// @notice Returns true if color exists in contract, else false.\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorExists(uint24 color) external view returns (bool);\\n\\n    /// @notice Returns the title string corresponding to the 3-byte color\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorTitle(uint24 color) external view returns (string memory);\\n\\n    struct FieldSVGs {\\n        IFieldSVGs fieldSVGs1;\\n        IFieldSVGs fieldSVGs2;\\n        IFieldSVGs fieldSVGs3;\\n        IFieldSVGs fieldSVGs4;\\n        IFieldSVGs fieldSVGs5;\\n        IFieldSVGs fieldSVGs6;\\n        IFieldSVGs fieldSVGs7;\\n        IFieldSVGs fieldSVGs8;\\n        IFieldSVGs fieldSVGs9;\\n        IFieldSVGs fieldSVGs10;\\n        IFieldSVGs fieldSVGs11;\\n        IFieldSVGs fieldSVGs12;\\n        IFieldSVGs fieldSVGs13;\\n        IFieldSVGs fieldSVGs14;\\n        IFieldSVGs fieldSVGs15;\\n        IFieldSVGs fieldSVGs16;\\n        IFieldSVGs fieldSVGs17;\\n        IFieldSVGs fieldSVGs18;\\n        IFieldSVGs fieldSVGs19;\\n        IFieldSVGs fieldSVGs20;\\n        IFieldSVGs fieldSVGs21;\\n        IFieldSVGs fieldSVGs22;\\n        IFieldSVGs fieldSVGs23;\\n    }\\n}\\n\",\"keccak256\":\"0x7121e53a6e954f1a3d71f51d7657b4f21c87e52f5afa0bc2fb8f5d3266797070\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFieldSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './ICategories.sol';\\n\\n/// @dev Generate Field SVG\\ninterface IFieldSVGs {\\n    struct FieldData {\\n        string title;\\n        ICategories.Categories fieldType;\\n        string svgString;\\n    }\\n}\\n\",\"keccak256\":\"0xd7ec88c39f90bf32d12dffd34fa4db9c4532eaaeacc5af064255d7e97fa5547b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFrameGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IFrameSVGs.sol';\\n\\n/// @dev Generate Shield SVG\\ninterface IFrameGenerator {\\n\\n  struct FrameSVGs {\\n      IFrameSVGs frameSVGs1;\\n      IFrameSVGs frameSVGs2;\\n    }\\n    /// @notice Generates Frame snippet of SVG\\n    /// @param Frame uint representing Frame selection\\n    /// @return FrameData containing svg snippet and Frame title and Frame type\\n    function generateFrame(uint16 Frame) external view returns (IFrameSVGs.FrameData memory);\\n}\\n\",\"keccak256\":\"0x7b2b29cb6cb508660eba70abeca4a1cdf43aa5b20458396bf70302901871f8a9\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFrameSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IFrameSVGs {\\n    struct FrameData {\\n        string title;\\n        uint256 fee;\\n        string svgString;\\n    }\\n}\\n\",\"keccak256\":\"0xf755a8a81543ec9a9faa3127d8f2ad099b961385f860489460258b42a3d3de0f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IHardwareGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IHardwareSVGs.sol';\\n\\n/// @dev Generate Shield SVG\\ninterface IHardwareGenerator {\\n    /// @notice Generates hardware snippet of SVG\\n    /// @param hardware uint representing hardware selection\\n    /// @return HardwareData containing svg snippet and hardware title and hardware type\\n    function generateHardware(uint16 hardware) external view returns (IHardwareSVGs.HardwareData memory);\\n\\n    struct HardwareSVGs {\\n        IHardwareSVGs hardwareSVGs1;\\n        IHardwareSVGs hardwareSVGs2;\\n        IHardwareSVGs hardwareSVGs3;\\n        IHardwareSVGs hardwareSVGs4;\\n        IHardwareSVGs hardwareSVGs5;\\n        IHardwareSVGs hardwareSVGs6;\\n        IHardwareSVGs hardwareSVGs7;\\n        IHardwareSVGs hardwareSVGs8;\\n        IHardwareSVGs hardwareSVGs9;\\n        IHardwareSVGs hardwareSVGs10;\\n        IHardwareSVGs hardwareSVGs11;\\n        IHardwareSVGs hardwareSVGs12;\\n        IHardwareSVGs hardwareSVGs13;\\n        IHardwareSVGs hardwareSVGs14;\\n        IHardwareSVGs hardwareSVGs15;\\n        IHardwareSVGs hardwareSVGs16;\\n        IHardwareSVGs hardwareSVGs17;\\n        IHardwareSVGs hardwareSVGs18;\\n        IHardwareSVGs hardwareSVGs19;\\n        IHardwareSVGs hardwareSVGs20;\\n        IHardwareSVGs hardwareSVGs21;\\n        IHardwareSVGs hardwareSVGs22;\\n        IHardwareSVGs hardwareSVGs23;\\n        IHardwareSVGs hardwareSVGs24;\\n        IHardwareSVGs hardwareSVGs25;\\n        IHardwareSVGs hardwareSVGs26;\\n        IHardwareSVGs hardwareSVGs27;\\n        IHardwareSVGs hardwareSVGs28;\\n        IHardwareSVGs hardwareSVGs29;\\n        IHardwareSVGs hardwareSVGs30;\\n        IHardwareSVGs hardwareSVGs31;\\n        IHardwareSVGs hardwareSVGs32;\\n        IHardwareSVGs hardwareSVGs33;\\n        IHardwareSVGs hardwareSVGs34;\\n        IHardwareSVGs hardwareSVGs35;\\n        IHardwareSVGs hardwareSVGs36;\\n        IHardwareSVGs hardwareSVGs37;\\n        IHardwareSVGs hardwareSVGs38;\\n    }\\n}\\n\",\"keccak256\":\"0x7bc5e6777d74641427bc2e0bc4be5702959867a4127c28948e6891a90906669e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IHardwareSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './ICategories.sol';\\n\\ninterface IHardwareSVGs {\\n    struct HardwareData {\\n        string title;\\n        ICategories.Categories hardwareType;\\n        string svgString;\\n    }\\n}\\n\",\"keccak256\":\"0x03aafba3c6ac2d51ef02c05051db580c8162ac60970527824d6c661e092a4efa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IShields.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport 'base64-sol/base64.sol';\\n\\n/// @dev Generate Customizable Shields\\ninterface IShields is IERC721 {\\n    enum MintPass {\\n        MAKER,\\n        STANDARD\\n    }\\n\\n    struct Shield {\\n        bool built;\\n        uint16 field;\\n        uint16 hardware;\\n        uint16 frame;\\n        MintPass mintPass;\\n        uint24[4] colors;\\n    }\\n\\n    function build(\\n        uint16 field,\\n        uint16 hardware,\\n        uint16 frame,\\n        uint24[4] memory colors,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function shields(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint16 field,\\n            uint16 hardware,\\n            uint16 frame,\\n            uint24 color1,\\n            uint24 color2,\\n            uint24 color3,\\n            uint24 color4,\\n            MintPass mintPass\\n        );\\n}\\n\",\"keccak256\":\"0x437ac4f4d44ebab09ee06be0d42cf45211bab8f21b52498b7076c57c1519a027\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631b740a33146100675780632900a9aa14610085578063291c881d146100a357806336da1a64146100c15780638ee1d84c146100f1578063c691f41e14610121575b600080fd5b61006f61013f565b60405161007c9190612454565b60405180910390f35b61008d610163565b60405161009a919061246f565b60405180910390f35b6100ab610187565b6040516100b8919061248a565b60405180910390f35b6100db60048036038101906100d69190611644565b6101ab565b6040516100e891906124c0565b60405180910390f35b61010b60048036038101906101069190611771565b610368565b60405161011891906124c0565b60405180910390f35b61012961065b565b6040516101369190612439565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b606080600060018111156101bb57fe5b8360018111156101c757fe5b141561020a576040518060400160405280600581526020017f4d616b65720000000000000000000000000000000000000000000000000000008152509050610262565b60018081111561021657fe5b83600181111561022257fe5b1415610261576040518060400160405280600881526020017f5374616e6461726400000000000000000000000000000000000000000000000081525090505b5b6103418161031c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e3142b83876040518263ffffffff1660e01b81526004016102c291906124a5565b60006040518083038186803b1580156102da57600080fd5b505afa1580156102ee573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610317919061166d565b61067f565b60405160200161032d9291906121a0565b60405160208183030381529060405261067f565b6040516020016103519190612417565b604051602081830303815290604052915050919050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ccf27bea84602001518560a001516040518363ffffffff1660e01b81526004016103cf9291906124fd565b60006040518083038186803b1580156103e757600080fd5b505afa1580156103fb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061042491906116ae565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6e2e97c85604001516040518263ffffffff1660e01b815260040161048591906124e2565b60006040518083038186803b15801561049d57600080fd5b505afa1580156104b1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104da9190611730565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0b7314f86606001516040518263ffffffff1660e01b815260040161053b91906124e2565b60006040518083038186803b15801561055357600080fd5b505afa158015610567573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061059091906116ef565b905060006105b08460000151846000015184600001518960a001516107e5565b905060006040518060600160405280603a8152602001612851603a9139905060006105e18686868b60a00151610861565b905061062f83836106076106028a604001518a604001518a604001516108cb565b61067f565b8460405160200161061b949392919061221c565b60405160208183030381529060405261067f565b60405160200161063f9190612417565b6040516020818303038152906040529650505050505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606000825114156106a2576040518060200160405280600081525090506107e0565b6000604051806060016040528060408152602001612811604091399050600060036002855101816106cf57fe5b04600402905060006020820167ffffffffffffffff811180156106f157600080fd5b506040519080825280601f01601f1916602001820160405280156107245781602001600182028036833780820191505090505b509050818152600183018586518101602084015b8183101561079f576003830192508251603f8160121c1685015160f81b8252600182019150603f81600c1c1685015160f81b8252600182019150603f8160061c1685015160f81b8252600182019150603f811685015160f81b825260018201915050610738565b6003895106600181146107b957600281146107c9576107d4565b613d3d60f01b60028303526107d4565b603d60f81b60018303525b50505050508093505050505b919050565b606060006040518060200160405280600081525090506000845111156108285783604051602001610816919061217e565b60405160208183030381529060405290505b8085610833856108fa565b8860405160200161084794939291906120e4565b604051602081830303815290604052915050949350505050565b60608460000151846000015161087a8760200151610e12565b6108878760200151610e12565b6108948760000151610eae565b61089d87610ef9565b6040516020016108b29695949392919061234c565b6040516020818303038152906040529050949350505050565b60608383836040516020016108e2939291906123d0565b60405160208183030381529060405290509392505050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c9478460006004811061094757fe5b60200201516040518263ffffffff1660e01b81526004016109689190612526565b60006040518083038186803b15801561098057600080fd5b505afa158015610994573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109bd919061166d565b90506000836001600481106109ce57fe5b602002015162ffffff161115610b5257806000846002600481106109ee57fe5b602002015162ffffff1611610a38576040518060400160405280600581526020017f20616e6420000000000000000000000000000000000000000000000000000000815250610a6f565b6040518060400160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c94786600160048110610ab857fe5b60200201516040518263ffffffff1660e01b8152600401610ad99190612526565b60006040518083038186803b158015610af157600080fd5b505afa158015610b05573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b2e919061166d565b604051602001610b40939291906120b3565b60405160208183030381529060405290505b600083600260048110610b6157fe5b602002015162ffffff161115610ce55780600084600360048110610b8157fe5b602002015162ffffff1611610bcb576040518060400160405280600581526020017f20616e6420000000000000000000000000000000000000000000000000000000815250610c02565b6040518060400160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c94786600260048110610c4b57fe5b60200201516040518263ffffffff1660e01b8152600401610c6c9190612526565b60006040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cc1919061166d565b604051602001610cd3939291906120b3565b60405160208183030381529060405290505b600083600360048110610cf457fe5b602002015162ffffff161115610de757807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c94785600360048110610d4e57fe5b60200201516040518263ffffffff1660e01b8152600401610d6f9190612526565b60006040518083038186803b158015610d8757600080fd5b505afa158015610d9b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dc4919061166d565b604051602001610dd592919061212d565b60405160208183030381529060405290505b80604051602001610df8919061215c565b604051602081830303815290604052905080915050919050565b606060006001811115610e2157fe5b826001811115610e2d57fe5b1415610e70576040518060400160405280600681526020017f4d797468696300000000000000000000000000000000000000000000000000008152509050610ea9565b6040518060400160405280600881526020017f486572616c64696300000000000000000000000000000000000000000000000081525090505b919050565b6060600082511115610ee15781604051602001610ecb919061232a565b6040516020818303038152906040529050610ef4565b6040518060200160405280600081525090505b919050565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c94783600060048110610f4457fe5b60200201516040518263ffffffff1660e01b8152600401610f659190612526565b60006040518083038186803b158015610f7d57600080fd5b505afa158015610f91573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610fba919061166d565b610fd683600160048110610fca57fe5b60200201516002611037565b610ff284600260048110610fe657fe5b60200201516003611037565b61100e8560036004811061100257fe5b60200201516004611037565b604051602001611021949392919061229c565b6040516020818303038152906040529050919050565b606060008362ffffff1614611127576110528260ff16611140565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c947856040518263ffffffff1660e01b81526004016110ab9190612526565b60006040518083038186803b1580156110c357600080fd5b505afa1580156110d7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611100919061166d565b6040516020016111119291906122f0565b604051602081830303815290604052905061113a565b6040518060200160405280600081525090505b92915050565b60606000821415611188576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611282565b600082905060005b600082146111b2578080600101915050600a82816111aa57fe5b049150611190565b60008167ffffffffffffffff811180156111cb57600080fd5b506040519080825280601f01601f1916602001820160405280156111fe5781602001600182028036833780820191505090505b50905060006001830390508593505b6000841461127a57600a848161121f57fe5b0660300160f81b8282806001900393508151811061123957fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a848161127257fe5b04935061120d565b819450505050505b919050565b600061129a61129584612572565b612541565b905080828560208602820111156112b057600080fd5b60005b858110156112e057816112c6888261161a565b8452602084019350602083019250506001810190506112b3565b5050509392505050565b60006112fd6112f884612598565b612541565b90508281526020810184848401111561131557600080fd5b61132084828561273a565b509392505050565b600082601f83011261133957600080fd5b6004611346848285611287565b91505092915050565b60008135905061135e81612794565b92915050565b600081519050611373816127ab565b92915050565b600081359050611388816127bb565b92915050565b600082601f83011261139f57600080fd5b81516113af8482602086016112ea565b91505092915050565b6000606082840312156113ca57600080fd5b6113d46060612541565b9050600082015167ffffffffffffffff8111156113f057600080fd5b6113fc8482850161138e565b600083015250602061141084828501611364565b602083015250604082015167ffffffffffffffff81111561143057600080fd5b61143c8482850161138e565b60408301525092915050565b60006060828403121561145a57600080fd5b6114646060612541565b9050600082015167ffffffffffffffff81111561148057600080fd5b61148c8482850161138e565b60008301525060206114a08482850161162f565b602083015250604082015167ffffffffffffffff8111156114c057600080fd5b6114cc8482850161138e565b60408301525092915050565b6000606082840312156114ea57600080fd5b6114f46060612541565b9050600082015167ffffffffffffffff81111561151057600080fd5b61151c8482850161138e565b600083015250602061153084828501611364565b602083015250604082015167ffffffffffffffff81111561155057600080fd5b61155c8482850161138e565b60408301525092915050565b6000610120828403121561157b57600080fd5b61158560c0612541565b905060006115958482850161134f565b60008301525060206115a984828501611605565b60208301525060406115bd84828501611605565b60408301525060606115d184828501611605565b60608301525060806115e584828501611379565b60808301525060a06115f984828501611328565b60a08301525092915050565b600081359050611614816127cb565b92915050565b600081359050611629816127e2565b92915050565b60008151905061163e816127f9565b92915050565b60006020828403121561165657600080fd5b600061166484828501611379565b91505092915050565b60006020828403121561167f57600080fd5b600082015167ffffffffffffffff81111561169957600080fd5b6116a58482850161138e565b91505092915050565b6000602082840312156116c057600080fd5b600082015167ffffffffffffffff8111156116da57600080fd5b6116e6848285016113b8565b91505092915050565b60006020828403121561170157600080fd5b600082015167ffffffffffffffff81111561171b57600080fd5b61172784828501611448565b91505092915050565b60006020828403121561174257600080fd5b600082015167ffffffffffffffff81111561175c57600080fd5b611768848285016114d8565b91505092915050565b6000610120828403121561178457600080fd5b600061179284828501611568565b91505092915050565b60006117a78383612095565b60208301905092915050565b6117bc816125d2565b6117c68184612600565b92506117d1826125c8565b8060005b838110156118025781516117e9878261179b565b96506117f4836125f3565b9250506001810190506117d5565b505050505050565b6000611815826125dd565b61181f818561260b565b935061182f81856020860161273a565b80840191505092915050565b61184481612698565b82525050565b611853816126bc565b82525050565b611862816126e0565b82525050565b61187181612704565b82525050565b61188081612728565b82525050565b6000611891826125e8565b61189b8185612616565b93506118ab81856020860161273a565b6118b48161276f565b840191505092915050565b60006118ca826125e8565b6118d48185612627565b93506118e481856020860161273a565b80840191505092915050565b60006118fd600983612627565b91507f7b226e616d65223a2200000000000000000000000000000000000000000000006000830152600982019050919050565b600061193d602683612627565b91507f227d2c207b2274726169745f74797065223a22436f6c6f722031222c2022766160008301527f6c7565223a2200000000000000000000000000000000000000000000000000006020830152602682019050919050565b60006119a3600c83612627565b91507f222c202276616c7565223a2200000000000000000000000000000000000000006000830152600c82019050919050565b60006119e3601183612627565b91507f222c202261747472696275746573223a200000000000000000000000000000006000830152601182019050919050565b6000611a23601983612627565b91507f227d2c207b2274726169745f74797065223a22436f6c6f7220000000000000006000830152601982019050919050565b6000611a63602483612627565b91507f227d2c207b2274726169745f74797065223a224672616d65222c202276616c7560008301527f65223a22000000000000000000000000000000000000000000000000000000006020830152602482019050919050565b6000611ac9600583612627565b91507f20616e64200000000000000000000000000000000000000000000000000000006000830152600582019050919050565b6000611b09602983612627565b91507f227d2c207b2274726169745f74797065223a224669656c642054797065222c2060008301527f2276616c7565223a2200000000000000000000000000000000000000000000006020830152602982019050919050565b6000611b6f602c83612627565b91507f227d2c207b2274726169745f74797065223a224861726477617265205479706560008301527f222c202276616c7565223a2200000000000000000000000000000000000000006020830152602c82019050919050565b6000611bd5600783612627565b91507f626c61626c6122000000000000000000000000000000000000000000000000006000830152600782019050919050565b6000611c15600b83612627565b91507f204275696c6420506173730000000000000000000000000000000000000000006000830152600b82019050919050565b6000611c55600383612627565b91507f227d5d00000000000000000000000000000000000000000000000000000000006000830152600382019050919050565b6000611c95602183612627565b91507f5b7b2274726169745f74797065223a224669656c64222c202276616c7565223a60008301527f22000000000000000000000000000000000000000000000000000000000000006020830152602182019050919050565b6000611cfb600183612627565b91507f20000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000611d3b600d83612627565b91507f222c2022696d616765223a2022000000000000000000000000000000000000006000830152600d82019050919050565b6000611d7b600183612627565b91507f7d000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000611dbb601283612627565b91507f222c20226465736372697074696f6e223a2200000000000000000000000000006000830152601282019050919050565b6000611dfb602783612627565b91507f227d2c207b2274726169745f74797065223a224861726477617265222c20227660008301527f616c7565223a22000000000000000000000000000000000000000000000000006020830152602782019050919050565b6000611e61606983612627565b91507f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008301527f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e60208301527f77332e6f72672f313939392f786c696e6b222076696577426f783d223020302060408301527f32323020323634223e00000000000000000000000000000000000000000000006060830152606982019050919050565b6000611f13600683612627565b91507f206f6e20612000000000000000000000000000000000000000000000000000006000830152600682019050919050565b6000611f53601d83612627565b91507f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000006000830152601d82019050919050565b6000611f93600283612627565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000611fd3600683612627565b91507f3c2f7376673e00000000000000000000000000000000000000000000000000006000830152600682019050919050565b6000612013601a83612627565b91507f646174613a696d6167652f7376672b786d6c3b6261736536342c0000000000006000830152601a82019050919050565b6000612053601283612627565b91507f6d696e7465642062757420756e6275696c7400000000000000000000000000006000830152601282019050919050565b61208f81612651565b82525050565b61209e8161267f565b82525050565b6120ad8161267f565b82525050565b60006120bf828661180a565b91506120cb82856118bf565b91506120d782846118bf565b9150819050949350505050565b60006120f0828761180a565b91506120fc82866118bf565b915061210782611f06565b915061211382856118bf565b915061211f82846118bf565b915081905095945050505050565b6000612139828561180a565b915061214482611abc565b915061215082846118bf565b91508190509392505050565b6000612168828461180a565b915061217382611cee565b915081905092915050565b600061218a82846118bf565b915061219582611f86565b915081905092915050565b60006121ab826118f0565b91506121b782856118bf565b91506121c282611c08565b91506121cd82611dae565b91506121d882612046565b91506121e382611d2e565b91506121ee82612006565b91506121fa82846118bf565b915061220582611bc8565b915061221082611d6e565b91508190509392505050565b6000612227826118f0565b915061223382876118bf565b915061223e82611dae565b915061224a82866118bf565b915061225582611d2e565b915061226082612006565b915061226c82856118bf565b9150612277826119d6565b9150612283828461180a565b915061228e82611d6e565b915081905095945050505050565b60006122a782611930565b91506122b382876118bf565b91506122bf828661180a565b91506122cb828561180a565b91506122d7828461180a565b91506122e282611c48565b915081905095945050505050565b60006122fb82611a16565b915061230782856118bf565b915061231282611996565b915061231e82846118bf565b91508190509392505050565b600061233582611a56565b915061234182846118bf565b915081905092915050565b600061235782611c88565b915061236382896118bf565b915061236e82611dee565b915061237a82886118bf565b915061238582611afc565b915061239182876118bf565b915061239c82611b62565b91506123a882866118bf565b91506123b4828561180a565b91506123c0828461180a565b9150819050979650505050505050565b60006123db82611e54565b91506123e782866118bf565b91506123f382856118bf565b91506123ff82846118bf565b915061240a82611fc6565b9150819050949350505050565b600061242282611f46565b915061242e82846118bf565b915081905092915050565b600060208201905061244e600083018461183b565b92915050565b6000602082019050612469600083018461184a565b92915050565b60006020820190506124846000830184611859565b92915050565b600060208201905061249f6000830184611868565b92915050565b60006020820190506124ba6000830184611877565b92915050565b600060208201905081810360008301526124da8184611886565b905092915050565b60006020820190506124f76000830184612086565b92915050565b600060a0820190506125126000830185612086565b61251f60208301846117b3565b9392505050565b600060208201905061253b60008301846120a4565b92915050565b6000604051905081810181811067ffffffffffffffff821117156125685761256761276d565b5b8060405250919050565b600067ffffffffffffffff82111561258d5761258c61276d565b5b602082029050919050565b600067ffffffffffffffff8211156125b3576125b261276d565b5b601f19601f8301169050602081019050919050565b6000819050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60008115159050919050565b600081905061264c82612780565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006126a3826126aa565b9050919050565b60006126b58261265f565b9050919050565b60006126c7826126ce565b9050919050565b60006126d98261265f565b9050919050565b60006126eb826126f2565b9050919050565b60006126fd8261265f565b9050919050565b600061270f82612716565b9050919050565b60006127218261265f565b9050919050565b60006127338261263e565b9050919050565b60005b8381101561275857808201518184015260208101905061273d565b83811115612767576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b600281106127915761279061276d565b5b50565b61279d81612632565b81146127a857600080fd5b50565b600281106127b857600080fd5b50565b600281106127c857600080fd5b50565b6127d481612651565b81146127df57600080fd5b50565b6127eb8161267f565b81146127f657600080fd5b50565b6128028161268e565b811461280d57600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f35303030206f6e2d636861696e20736869656c64732c2064657369676e656420616e64206275696c74206279207468656972206f776e6572732ea164736f6c6343000706000a",
  "devdoc": {
    "details": "Generate Shield Metadata",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}