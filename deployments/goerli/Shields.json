{
  "address": "0xbCC1839676905e5e3897bC252a8B75849c25dc49",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "contract IShieldDescriptor",
          "name": "_shieldDescriptor",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_makerPassRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_granteePassReceipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "field",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "hardware",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "frame",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint24[4]",
          "name": "colors",
          "type": "uint24[4]"
        },
        {
          "indexed": false,
          "internalType": "enum IShields.MintPass",
          "name": "mintPass",
          "type": "uint8"
        }
      ],
      "name": "ShieldBuilt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "field",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "hardware",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "frame",
          "type": "uint16"
        },
        {
          "internalType": "uint24[4]",
          "name": "colors",
          "type": "uint24[4]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "build",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collectFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "granteePassReceipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makerPassRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mythicFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premintGrantee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premintMaker",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "premintStandard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setPublicMintActive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shieldDescriptor",
      "outputs": [
        {
          "internalType": "contract IShieldDescriptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "shieldHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "shields",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "field",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "hardware",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "frame",
          "type": "uint16"
        },
        {
          "internalType": "uint24",
          "name": "color1",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "color2",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "color3",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "color4",
          "type": "uint24"
        },
        {
          "internalType": "enum IShields.MintPass",
          "name": "mintPass",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf08277d31a26d5e1520c31d6bf610324d0db3f6fbdbb0b305ba9add5dd92b914",
  "receipt": {
    "to": null,
    "from": "0x177be9F3051e25F3732112572A19BD22e14066ED",
    "contractAddress": "0xbCC1839676905e5e3897bC252a8B75849c25dc49",
    "transactionIndex": 13,
    "gasUsed": "5156315",
    "logsBloom": "0x
    "blockHash": "0x39778c42b14e02a1c93ed64d524828956643846e2720a2eba121b13bff91187b",
    "transactionHash": "0xf08277d31a26d5e1520c31d6bf610324d0db3f6fbdbb0b305ba9add5dd92b914",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 6171656,
        "transactionHash": "0xf08277d31a26d5e1520c31d6bf610324d0db3f6fbdbb0b305ba9add5dd92b914",
        "address": "0xbCC1839676905e5e3897bC252a8B75849c25dc49",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000177be9f3051e25f3732112572a19bd22e14066ed"
        ],
        "data": "0x",
        "logIndex": 134,
        "blockHash": "0x39778c42b14e02a1c93ed64d524828956643846e2720a2eba121b13bff91187b"
      }
    ],
    "blockNumber": 6171656,
    "cumulativeGasUsed": "8018414",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "test",
    "TEST",
    "0xC40ab83661395b1e7F75840752BDAeCcf468D54D",
    "0x42aaEEe1201EC5D1f3a3DCcc23AB8c01391d182d",
    "0x42aaEEe1201EC5D1f3a3DCcc23AB8c01391d182d"
  ],
  "solcInputHash": "f83fc13fabc733ee8b83028c3110d7b0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"contract IShieldDescriptor\",\"name\":\"_shieldDescriptor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_makerPassRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_granteePassReceipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"},{\"indexed\":false,\"internalType\":\"enum IShields.MintPass\",\"name\":\"mintPass\",\"type\":\"uint8\"}],\"name\":\"ShieldBuilt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"},{\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"build\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"granteePassReceipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makerPassRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mythicFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premintGrantee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premintMaker\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"premintStandard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setPublicMintActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shieldDescriptor\",\"outputs\":[{\"internalType\":\"contract IShieldDescriptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"shieldHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"shields\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"},{\"internalType\":\"uint24\",\"name\":\"color1\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"color2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"color3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"color4\",\"type\":\"uint24\"},{\"internalType\":\"enum IShields.MintPass\",\"name\":\"mintPass\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Generate Customizable Shields\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"baseURI()\":{\"details\":\"Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Shields.sol\":\"Shields\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x549c5343ad9f7e3f38aa4c4761854403502574bbc15b822db2ce892ff9b79da7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x234cdf2c3efd5f0dc17d32fe65d33c21674ca17de1e945eb60ac1076d7152d96\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xd2f30fad5b24c4120f96dbac83aacdb7993ee610a9092bc23c44463da292bf8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x93e4f65a89c3c888afbaa3ee18c3fa4f51c422419bbcd9cca47676a0f8e507ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb11597841d47f7a773bca63ca323c76f804cb5d944788de0327db5526319dc82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2789dfea2d73182683d637db5729201f6730dae6113030a94c828f8688f38f2f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc82c7d1d732081d9bd23f1555ebdf8f3bc1738bc42c2bfc4b9aa7564d9fa3573\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x05604ffcf69e416b8a42728bb0e4fd75170d8fac70bf1a284afeb4752a9bc52f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x2114555153edb5f273008b3d34205f511db9af06b88f752e4c280dd612c4c549\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x9a2c1eebb65250f0e11882237038600f22a62376f0547db4acc0dfe0a3d8d34f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x08e38e034333372aea8cb1b8846085b7fbab42c6b77a0af464d2c6827827c4f0\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/Shields.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './interfaces/ICategories.sol';\\nimport './interfaces/IShields.sol';\\nimport './interfaces/IShieldDescriptor.sol';\\nimport './interfaces/IFieldSVGs.sol';\\nimport './interfaces/IHardwareSVGs.sol';\\nimport './interfaces/IFrameSVGs.sol';\\nimport './interfaces/IHardwareGenerator.sol';\\nimport './interfaces/IFrameGenerator.sol';\\nimport './interfaces/IBuildPassSVGs.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport 'base64-sol/base64.sol';\\n\\n/// @dev Generate Customizable Shields\\ncontract Shields is ERC721, IShields, Ownable {\\n    using Strings for uint8;\\n\\n    event ShieldBuilt(\\n        uint256 tokenId,\\n        uint16 field,\\n        uint16 hardware,\\n        uint16 frame,\\n        uint24[4] colors,\\n        MintPass mintPass\\n    );\\n\\n    IShieldDescriptor public immutable shieldDescriptor;\\n    address public immutable makerPassRecipient;\\n    address public immutable granteePassReceipient;\\n\\n    uint256 constant makerPassThreshold = 5;\\n    uint256 constant granteePassThreshold = 405;\\n    uint256 constant preMintThreshold = 505;\\n    uint256 constant standardMintMax = 5000;\\n\\n    uint256 constant makerReservedHardware = 120;\\n\\n    uint256 public constant mythicFee = 0.1 ether;\\n    uint256 public constant publicMintPrice = 0.1 ether;\\n    bool public publicMintActive = false;\\n\\n    bool premintedMaker;\\n    bool premintedGrantee;\\n    bool premintedStandard;\\n    uint256 internal _nextId;\\n\\n    mapping(uint256 => Shield) private _shields;\\n    // transient variable that's immediately cleared after checking for duplicate colors\\n    mapping(uint24 => bool) private _checkDuplicateColors;\\n    // record shieldHashes so that duplicate shields cannot be built\\n    mapping(bytes32 => bool) public shieldHashes;\\n\\n    modifier canPremintMaker() {\\n        require(!premintedMaker, 'Shields: maker already preminted');\\n        _;\\n    }\\n\\n    modifier canPremintGrantee() {\\n        require(!premintedMaker, 'Shields: grantee already preminted');\\n        _;\\n    }\\n\\n    modifier canPremintStandard() {\\n        require(!premintedMaker, 'Shields: standard already preminted');\\n        _;\\n    }\\n\\n    modifier publicMintIsActive() {\\n        require(publicMintActive, 'Shields: Public mint not active yet');\\n        _;\\n    }\\n\\n    modifier publicMintPaid() {\\n        require(msg.value == publicMintPrice, 'Shields: Insufficient mint fee');\\n        _;\\n    }\\n\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        IShieldDescriptor _shieldDescriptor,\\n        address _makerPassRecipient,\\n        address _granteePassReceipient\\n    ) ERC721(name_, symbol_) Ownable() {\\n        shieldDescriptor = _shieldDescriptor;\\n        makerPassRecipient = _makerPassRecipient;\\n        granteePassReceipient = _granteePassReceipient;\\n\\n        _nextId = preMintThreshold + 1;\\n    }\\n\\n    function premintMaker() external canPremintMaker {\\n        for (uint256 i = 1; i <= makerPassThreshold; i++) {\\n            _mint(makerPassRecipient, i);\\n        }\\n        premintedMaker = true;\\n    }\\n\\n    // TODO: Figure out gas issues with the premint\\n    function premintGrantee() external canPremintGrantee {\\n        for (uint256 j = makerPassThreshold + 1; j <= granteePassThreshold / 2; j++) {\\n            _mint(granteePassReceipient, j);\\n        }\\n        premintedGrantee = true;\\n    }\\n\\n    function premintStandard() external canPremintStandard {\\n        for (uint256 k = granteePassThreshold + 1; k <= preMintThreshold; k++) {\\n            _mint(makerPassRecipient, k);\\n        }\\n        premintedStandard = true;\\n    }\\n\\n    // ============ OWNER INTERFACE ============\\n\\n    function collectFees() external onlyOwner {\\n        (bool success, ) = payable(msg.sender).call{value: address(this).balance}(new bytes(0));\\n        require(success, 'Shields: ether transfer failed');\\n    }\\n\\n    function setPublicMintActive() external onlyOwner {\\n        publicMintActive = true;\\n    }\\n\\n    // ============ PUBLIC INTERFACE ============\\n\\n    function mint(address to) external payable publicMintIsActive publicMintPaid {\\n        uint256 tokenId = _nextId++;\\n        require(tokenId <= standardMintMax, 'Shields: minting closed');\\n        _mint(to, tokenId);\\n    }\\n\\n    function build(\\n        uint16 field,\\n        uint16 hardware,\\n        uint16 frame,\\n        uint24[4] memory colors,\\n        uint256 tokenId\\n    ) external payable override {\\n        // Upfront Validation\\n        require(msg.sender == ERC721.ownerOf(tokenId), 'Shields: only owner can build NFT');\\n        require(!_shields[tokenId].built, 'Shields: shield already built');\\n        if (hardware == makerReservedHardware) {\\n          require(tokenId <= makerPassThreshold, \\\"Shields: Three Shields hardware reserved for Maker Pass\\\");\\n        }\\n        validateColors(colors, field);\\n\\n\\n        // Construct Shield\\n        Shield memory shield;\\n        shield.built = true;\\n        shield.field = field;\\n        shield.hardware = hardware;\\n        shield.frame = frame;\\n        shield.colors = colors;\\n        shield.mintPass = calculateMintPass(tokenId);\\n\\n        // Check for duplicate Shields: field, hardware, color combos must be unique\\n        bytes32 shieldHash = keccak256(abi.encode(field, hardware, colors));\\n        require(!shieldHashes[shieldHash], 'Shields: unique shield already minted');\\n\\n        // Calculate Fee\\n        uint256 fee;\\n        ICategories.Categories fieldType = shieldDescriptor\\n            .fieldGenerator()\\n            .generateField(shield.field, shield.colors)\\n            .fieldType;\\n        ICategories.Categories hardwareType = shieldDescriptor\\n            .hardwareGenerator()\\n            .generateHardware(shield.hardware)\\n            .hardwareType;\\n        uint256 frameFee = shieldDescriptor.frameGenerator().generateFrame(shield.frame).fee;\\n        if (fieldType == ICategories.Categories.MYTHIC) {\\n            fee += mythicFee;\\n        }\\n        if (hardwareType == ICategories.Categories.MYTHIC) {\\n            fee += mythicFee;\\n        }\\n        fee += frameFee;\\n        require(msg.value == fee, 'Shields: insufficient building fee');\\n\\n        // Store Shield\\n        _shields[tokenId] = shield;\\n        shieldHashes[shieldHash] = true;\\n\\n        emit ShieldBuilt(tokenId, field, hardware, frame, colors, calculateMintPass(tokenId));\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\n        require(_exists(tokenId), 'Shields: URI query for nonexistent token');\\n        Shield memory shield = _shields[tokenId];\\n\\n        if (!shield.built) {\\n            return shieldDescriptor.generateBuildPassURI(calculateMintPass(tokenId));\\n        } else {\\n            return shieldDescriptor.generateShieldURI(shield);\\n        }\\n    }\\n\\n    function shields(uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            uint16 field,\\n            uint16 hardware,\\n            uint16 frame,\\n            uint24 color1,\\n            uint24 color2,\\n            uint24 color3,\\n            uint24 color4,\\n            MintPass mintPass\\n        )\\n    {\\n        require(_exists(tokenId), 'Shield: tokenID does not exist');\\n        Shield memory shield = _shields[tokenId];\\n        return (\\n            shield.field,\\n            shield.hardware,\\n            shield.frame,\\n            shield.colors[0],\\n            shield.colors[1],\\n            shield.colors[2],\\n            shield.colors[3],\\n            shield.mintPass\\n        );\\n    }\\n\\n    // ============ INTERNAL INTERFACE ============\\n\\n    function calculateMintPass(uint256 tokenId) internal pure returns (MintPass) {\\n        if (tokenId <= makerPassThreshold) {\\n            return MintPass.MAKER;\\n        } else {\\n            return MintPass.STANDARD;\\n        }\\n    }\\n\\n    function validateColors(uint24[4] memory colors, uint16 field) internal {\\n        if (field == 0) {\\n            checkExistsDupsMax(colors, 1);\\n        } else if (field <= 242) {\\n            checkExistsDupsMax(colors, 2);\\n        } else if (field <= 293) {\\n            checkExistsDupsMax(colors, 3);\\n        } else {\\n            checkExistsDupsMax(colors, 4);\\n        }\\n    }\\n\\n    function checkExistsDupsMax(uint24[4] memory colors, uint8 nColors) private {\\n        for (uint8 i = 0; i < nColors; i++) {\\n            require(_checkDuplicateColors[colors[i]] == false, 'Shields: all colors must be unique');\\n            require(shieldDescriptor.fieldGenerator().colorExists(colors[i]), 'Shields: color does not exist');\\n            _checkDuplicateColors[colors[i]] = true;\\n        }\\n        for (uint8 i = 0; i < nColors; i++) {\\n            _checkDuplicateColors[colors[i]] = false;\\n        }\\n        for (uint8 i = nColors; i < 4; i++) {\\n            require(colors[i] == 0, 'Shields: max colors exceeded for field');\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc4eae34c8da5cebd1c6b4abb5cff38b1a4c644f9dbf81d65a2cabe2a1cf4f82f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IBuildPassSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IShields.sol';\\n\\n/// @dev Generate BuildPass SVG\\ninterface IBuildPassSVGs {\\n    function generateBuildPassSVG(IShields.MintPass mintPass) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x60436002be6f4a071b4b8d4f3f18f27adf6f412644cdd86666b886895e2601dd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ICategories.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/// @dev Generate Shield SVG\\ninterface ICategories {\\n    enum Categories {\\n        MYTHIC,\\n        HERALDIC\\n    }\\n}\\n\",\"keccak256\":\"0x1769d481cd2a69427ca954be1a53d71f0ddfc80a928903163baa7e661b5db22a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IColors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/// @dev Generate Shield SVG\\ninterface IColors {\\n    event ColorAdded(uint24 color, string title);\\n\\n    struct Color {\\n        string title;\\n        bool exists;\\n    }\\n\\n    /// @notice Returns true if color exists in contract, else false.\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorExists(uint24 color) external view returns (bool);\\n\\n    /// @notice Returns the title string corresponding to the 3-byte color\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorTitle(uint24 color) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x0bdc1c70d09754ba49dbba2ad619d57aa1f53de0e36fd1a8583ded1a1a2343f2\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFieldGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IFieldSVGs.sol';\\nimport './IColors.sol';\\n\\n/// @dev Generate Field SVG\\ninterface IFieldGenerator {\\n    /// @notice Generates field snippet of SVG of the specified colors\\n    /// @param field uint representing field selection\\n    /// @param colors to be rendered in the field svg\\n    /// @return FieldData containing svg snippet and field title\\n    function generateField(uint16 field, uint24[4] memory colors) external view returns (IFieldSVGs.FieldData memory);\\n\\n    event ColorAdded(uint24 color, string title);\\n\\n    struct Color {\\n        string title;\\n        bool exists;\\n    }\\n\\n    /// @notice Returns true if color exists in contract, else false.\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorExists(uint24 color) external view returns (bool);\\n\\n    /// @notice Returns the title string corresponding to the 3-byte color\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorTitle(uint24 color) external view returns (string memory);\\n\\n    struct FieldSVGs {\\n        IFieldSVGs fieldSVGs1;\\n        IFieldSVGs fieldSVGs2;\\n        IFieldSVGs fieldSVGs3;\\n        IFieldSVGs fieldSVGs4;\\n        IFieldSVGs fieldSVGs5;\\n        IFieldSVGs fieldSVGs6;\\n        IFieldSVGs fieldSVGs7;\\n        IFieldSVGs fieldSVGs8;\\n        IFieldSVGs fieldSVGs9;\\n        IFieldSVGs fieldSVGs10;\\n        IFieldSVGs fieldSVGs11;\\n        IFieldSVGs fieldSVGs12;\\n        IFieldSVGs fieldSVGs13;\\n        IFieldSVGs fieldSVGs14;\\n        IFieldSVGs fieldSVGs15;\\n        IFieldSVGs fieldSVGs16;\\n        IFieldSVGs fieldSVGs17;\\n        IFieldSVGs fieldSVGs18;\\n        IFieldSVGs fieldSVGs19;\\n        IFieldSVGs fieldSVGs20;\\n        IFieldSVGs fieldSVGs21;\\n        IFieldSVGs fieldSVGs22;\\n        IFieldSVGs fieldSVGs23;\\n    }\\n}\\n\",\"keccak256\":\"0x7121e53a6e954f1a3d71f51d7657b4f21c87e52f5afa0bc2fb8f5d3266797070\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFieldSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './ICategories.sol';\\n\\n/// @dev Generate Field SVG\\ninterface IFieldSVGs {\\n    struct FieldData {\\n        string title;\\n        ICategories.Categories fieldType;\\n        string svgString;\\n    }\\n}\\n\",\"keccak256\":\"0xd7ec88c39f90bf32d12dffd34fa4db9c4532eaaeacc5af064255d7e97fa5547b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFrameGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IFrameSVGs.sol';\\n\\n/// @dev Generate Shield SVG\\ninterface IFrameGenerator {\\n    struct FrameSVGs {\\n        IFrameSVGs frameSVGs1;\\n        IFrameSVGs frameSVGs2;\\n    }\\n\\n    /// @notice Generates Frame snippet of SVG\\n    /// @param Frame uint representing Frame selection\\n    /// @return FrameData containing svg snippet and Frame title and Frame type\\n    function generateFrame(uint16 Frame) external view returns (IFrameSVGs.FrameData memory);\\n}\\n\",\"keccak256\":\"0x187a5ae85fbedefeff4aa57dae69257938bc2341612b41a9dc34d0d1f5b0baea\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFrameSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IFrameSVGs {\\n    struct FrameData {\\n        string title;\\n        uint256 fee;\\n        string svgString;\\n    }\\n}\\n\",\"keccak256\":\"0xf755a8a81543ec9a9faa3127d8f2ad099b961385f860489460258b42a3d3de0f\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IHardwareGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IHardwareSVGs.sol';\\n\\n/// @dev Generate Shield SVG\\ninterface IHardwareGenerator {\\n    /// @notice Generates hardware snippet of SVG\\n    /// @param hardware uint representing hardware selection\\n    /// @return HardwareData containing svg snippet and hardware title and hardware type\\n    function generateHardware(uint16 hardware) external view returns (IHardwareSVGs.HardwareData memory);\\n\\n    struct HardwareSVGs {\\n        IHardwareSVGs hardwareSVGs1;\\n        IHardwareSVGs hardwareSVGs2;\\n        IHardwareSVGs hardwareSVGs3;\\n        IHardwareSVGs hardwareSVGs4;\\n        IHardwareSVGs hardwareSVGs5;\\n        IHardwareSVGs hardwareSVGs6;\\n        IHardwareSVGs hardwareSVGs7;\\n        IHardwareSVGs hardwareSVGs8;\\n        IHardwareSVGs hardwareSVGs9;\\n        IHardwareSVGs hardwareSVGs10;\\n        IHardwareSVGs hardwareSVGs11;\\n        IHardwareSVGs hardwareSVGs12;\\n        IHardwareSVGs hardwareSVGs13;\\n        IHardwareSVGs hardwareSVGs14;\\n        IHardwareSVGs hardwareSVGs15;\\n        IHardwareSVGs hardwareSVGs16;\\n        IHardwareSVGs hardwareSVGs17;\\n        IHardwareSVGs hardwareSVGs18;\\n        IHardwareSVGs hardwareSVGs19;\\n        IHardwareSVGs hardwareSVGs20;\\n        IHardwareSVGs hardwareSVGs21;\\n        IHardwareSVGs hardwareSVGs22;\\n        IHardwareSVGs hardwareSVGs23;\\n        IHardwareSVGs hardwareSVGs24;\\n        IHardwareSVGs hardwareSVGs25;\\n        IHardwareSVGs hardwareSVGs26;\\n        IHardwareSVGs hardwareSVGs27;\\n        IHardwareSVGs hardwareSVGs28;\\n        IHardwareSVGs hardwareSVGs29;\\n        IHardwareSVGs hardwareSVGs30;\\n        IHardwareSVGs hardwareSVGs31;\\n        IHardwareSVGs hardwareSVGs32;\\n        IHardwareSVGs hardwareSVGs33;\\n        IHardwareSVGs hardwareSVGs34;\\n        IHardwareSVGs hardwareSVGs35;\\n        IHardwareSVGs hardwareSVGs36;\\n        IHardwareSVGs hardwareSVGs37;\\n        IHardwareSVGs hardwareSVGs38;\\n    }\\n}\\n\",\"keccak256\":\"0x7bc5e6777d74641427bc2e0bc4be5702959867a4127c28948e6891a90906669e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IHardwareSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './ICategories.sol';\\n\\ninterface IHardwareSVGs {\\n    struct HardwareData {\\n        string title;\\n        ICategories.Categories hardwareType;\\n        string svgString;\\n    }\\n}\\n\",\"keccak256\":\"0x03aafba3c6ac2d51ef02c05051db580c8162ac60970527824d6c661e092a4efa\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IShieldDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport './IShields.sol';\\nimport './IFrameGenerator.sol';\\nimport './IFieldGenerator.sol';\\nimport './IHardwareGenerator.sol';\\n\\n/// @dev Generate Customizable Shields\\ninterface IShieldDescriptor {\\n    function fieldGenerator() external returns (IFieldGenerator);\\n\\n    function hardwareGenerator() external returns (IHardwareGenerator);\\n\\n    function frameGenerator() external returns (IFrameGenerator);\\n\\n    function generateShieldURI(IShields.Shield memory shield) external view returns (string memory);\\n\\n    function generateBuildPassURI(IShields.MintPass mintPass) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xcab6d307de9661ecd2bd1c510197184a6d9b935ad5107860abf761ad6fcbf43d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IShields.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport 'base64-sol/base64.sol';\\n\\n/// @dev Generate Customizable Shields\\ninterface IShields is IERC721 {\\n    enum MintPass {\\n        MAKER,\\n        STANDARD\\n    }\\n\\n    struct Shield {\\n        bool built;\\n        uint16 field;\\n        uint16 hardware;\\n        uint16 frame;\\n        MintPass mintPass;\\n        uint24[4] colors;\\n    }\\n\\n    function build(\\n        uint16 field,\\n        uint16 hardware,\\n        uint16 frame,\\n        uint24[4] memory colors,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function shields(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint16 field,\\n            uint16 hardware,\\n            uint16 frame,\\n            uint24 color1,\\n            uint24 color2,\\n            uint24 color3,\\n            uint24 color4,\\n            MintPass mintPass\\n        );\\n}\\n\",\"keccak256\":\"0x437ac4f4d44ebab09ee06be0d42cf45211bab8f21b52498b7076c57c1519a027\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040526000600a60146101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162005fdc38038062005fdc8339818101604052810190620000529190620004bc565b84846200006c6301ffc9a760e01b6200025560201b60201c565b81600690805190602001906200008492919062000366565b5080600790805190602001906200009d92919062000366565b50620000b66380ac58cd60e01b6200025560201b60201c565b620000ce635b5e139f60e01b6200025560201b60201c565b620000e663780e9d6360e01b6200025560201b60201c565b50506000620000fa6200035e60201b60201c565b905080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3508273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505060016101f901600b8190555050505050506200068b565b63ffffffff60e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415620002f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433136353a20696e76616c696420696e746572666163652069640000000081525060200191505060405180910390fd5b6001600080837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600033905090565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200039e5760008555620003ea565b82601f10620003b957805160ff1916838001178555620003ea565b82800160010185558215620003ea579182015b82811115620003e9578251825591602001919060010190620003cc565b5b509050620003f99190620003fd565b5090565b5b8082111562000418576000816000905550600101620003fe565b5090565b6000620004336200042d84620005a4565b62000570565b9050828152602081018484840111156200044c57600080fd5b620004598482856200061f565b509392505050565b600081519050620004728162000657565b92915050565b600081519050620004898162000671565b92915050565b600082601f830112620004a157600080fd5b8151620004b38482602086016200041c565b91505092915050565b600080600080600060a08688031215620004d557600080fd5b600086015167ffffffffffffffff811115620004f057600080fd5b620004fe888289016200048f565b955050602086015167ffffffffffffffff8111156200051c57600080fd5b6200052a888289016200048f565b94505060406200053d8882890162000478565b9350506060620005508882890162000461565b9250506080620005638882890162000461565b9150509295509295909350565b6000604051905081810181811067ffffffffffffffff821117156200059a576200059962000655565b5b8060405250919050565b600067ffffffffffffffff821115620005c257620005c162000655565b5b601f19601f8301169050602081019050919050565b6000620005e482620005ff565b9050919050565b6000620005f882620005d7565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156200063f57808201518184015260208101905062000622565b838111156200064f576000848401525b50505050565bfe5b6200066281620005d7565b81146200066e57600080fd5b50565b6200067c81620005eb565b81146200068857600080fd5b50565b60805160601c60a05160601c60c05160601c6158ee620006ee600039806119585280611d905250806113d95280611c935280612260525080610a555280610b945280610ccd52806120eb52806121a95280612284528061304e52506158ee6000f3fe6080604052600436106102035760003560e01c80638da5cb5b11610118578063c87b56dd116100a0578063df1100c61161006f578063df1100c614610716578063e985e9c514610741578063f2fde38b1461077e578063f862ab1b146107a7578063fbe41874146107eb57610203565b8063c87b56dd14610658578063ce2aabba14610695578063d77d5d48146106c0578063dc53fd92146106eb57610203565b8063b51d2512116100e7578063b51d251214610585578063b67c25a3146105c2578063b88d4fde146105ed578063c099c4e214610616578063c87965721461064157610203565b80638da5cb5b146104ef57806395d89b411461051a578063a22cb46514610545578063a36a68cb1461056e57610203565b80632f745c591161019b5780636a6278421161016a5780636a6278421461043d5780636c0360eb1461045957806370a0823114610484578063715018a6146104c15780638311b9d8146104d857610203565b80632f745c591461035d57806342842e0e1461039a5780634f6ccce7146103c35780636352211e1461040057610203565b8063095ea7b3116101d7578063095ea7b3146102c957806318160ddd146102f257806323b872dd1461031d5780632ee4cdaa1461034657610203565b806272e9c71461020857806301ffc9a71461022457806306fdde0314610261578063081812fc1461028c575b600080fd5b610222600480360381019061021d91906145e2565b610802565b005b34801561023057600080fd5b5061024b6004803603810190610246919061443a565b611006565b6040516102589190614ec2565b60405180910390f35b34801561026d57600080fd5b5061027661106d565b6040516102839190614f13565b60405180910390f35b34801561029857600080fd5b506102b360048036038101906102ae919061465a565b61110f565b6040516102c09190614ea7565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb91906143ac565b6111aa565b005b3480156102fe57600080fd5b506103076112ee565b6040516103149190615285565b60405180910390f35b34801561032957600080fd5b50610344600480360381019061033f91906142a6565b6112ff565b005b34801561035257600080fd5b5061035b611375565b005b34801561036957600080fd5b50610384600480360381019061037f91906143ac565b611429565b6040516103919190615285565b60405180910390f35b3480156103a657600080fd5b506103c160048036038101906103bc91906142a6565b611484565b005b3480156103cf57600080fd5b506103ea60048036038101906103e5919061465a565b6114a4565b6040516103f79190615285565b60405180910390f35b34801561040c57600080fd5b506104276004803603810190610422919061465a565b6114c7565b6040516104349190614ea7565b60405180910390f35b61045760048036038101906104529190614241565b6114fe565b005b34801561046557600080fd5b5061046e6115ff565b60405161047b9190614f13565b60405180910390f35b34801561049057600080fd5b506104ab60048036038101906104a69190614241565b6116a1565b6040516104b89190615285565b60405180910390f35b3480156104cd57600080fd5b506104d6611776565b005b3480156104e457600080fd5b506104ed6118e6565b005b3480156104fb57600080fd5b506105046119a8565b6040516105119190614ea7565b60405180910390f35b34801561052657600080fd5b5061052f6119d2565b60405161053c9190614f13565b60405180910390f35b34801561055157600080fd5b5061056c60048036038101906105679190614370565b611a74565b005b34801561057a57600080fd5b50610583611c2a565b005b34801561059157600080fd5b506105ac60048036038101906105a79190614411565b611ce3565b6040516105b99190614ec2565b60405180910390f35b3480156105ce57600080fd5b506105d7611d03565b6040516105e49190614ec2565b60405180910390f35b3480156105f957600080fd5b50610614600480360381019061060f91906142f5565b611d16565b005b34801561062257600080fd5b5061062b611d8e565b6040516106389190614ea7565b60405180910390f35b34801561064d57600080fd5b50610656611db2565b005b34801561066457600080fd5b5061067f600480360381019061067a919061465a565b611f5d565b60405161068c9190614f13565b60405180910390f35b3480156106a157600080fd5b506106aa61225e565b6040516106b79190614ea7565b60405180910390f35b3480156106cc57600080fd5b506106d5612282565b6040516106e29190614edd565b60405180910390f35b3480156106f757600080fd5b506107006122a6565b60405161070d9190615285565b60405180910390f35b34801561072257600080fd5b5061072b6122b2565b6040516107389190615285565b60405180910390f35b34801561074d57600080fd5b506107686004803603810190610763919061426a565b6122be565b6040516107759190614ec2565b60405180910390f35b34801561078a57600080fd5b506107a560048036038101906107a09190614241565b612352565b005b3480156107b357600080fd5b506107ce60048036038101906107c9919061465a565b612547565b6040516107e29897969594939291906151ec565b60405180910390f35b3480156107f757600080fd5b5061080061275c565b005b61080b816114c7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086f90615075565b60405180910390fd5b600c600082815260200190815260200160002060000160009054906101000a900460ff16156108dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d390614fb5565b60405180910390fd5b60788461ffff16141561092e57600581111561092d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092490614f55565b60405180910390fd5b5b6109388286612828565b610940613cf2565b600181600001901515908115158152505085816020019061ffff16908161ffff168152505084816040019061ffff16908161ffff168152505083816060019061ffff16908161ffff1681525050828160a0018190525061099f82612890565b816080019060018111156109af57fe5b908160018111156109bc57fe5b8152505060008686856040516020016109d7939291906151b5565b604051602081830303815290604052805190602001209050600e600082815260200190815260200160002060009054906101000a900460ff1615610a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4790614ff5565b60405180910390fd5b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b740a336040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610abb57600080fd5b505af1158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af39190614463565b73ffffffffffffffffffffffffffffffffffffffff1663ccf27bea85602001518660a001516040518363ffffffff1660e01b8152600401610b3592919061518c565b60006040518083038186803b158015610b4d57600080fd5b505afa158015610b61573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b8a919061451f565b60200151905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663291c881d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bfa57600080fd5b505af1158015610c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3291906144b5565b73ffffffffffffffffffffffffffffffffffffffff1663e6e2e97c86604001516040518263ffffffff1660e01b8152600401610c6e9190615171565b60006040518083038186803b158015610c8657600080fd5b505afa158015610c9a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cc391906145a1565b60200151905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632900a9aa6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d3357600080fd5b505af1158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b919061448c565b73ffffffffffffffffffffffffffffffffffffffff1663d0b7314f87606001516040518263ffffffff1660e01b8152600401610da79190615171565b60006040518083038186803b158015610dbf57600080fd5b505afa158015610dd3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dfc9190614560565b60200151905060006001811115610e0f57fe5b836001811115610e1b57fe5b1415610e2f5767016345785d8a0000840193505b60006001811115610e3c57fe5b826001811115610e4857fe5b1415610e5c5767016345785d8a0000840193505b8084019350833414610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a90615035565b60405180910390fd5b85600c600089815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548161ffff021916908361ffff16021790555060408201518160000160036101000a81548161ffff021916908361ffff16021790555060608201518160000160056101000a81548161ffff021916908361ffff16021790555060808201518160000160076101000a81548160ff02191690836001811115610f6457fe5b021790555060a082015181600101906004610f80929190613d47565b509050506001600e600087815260200190815260200160002060006101000a81548160ff0219169083151502179055507f10dee8726629fad96af1a24a83560cb19b9a4f436ecdd488ebc59ad81c623459878c8c8c8c610fdf8d612890565b604051610ff1969594939291906152a0565b60405180910390a15050505050505050505050565b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111055780601f106110da57610100808354040283529160200191611105565b820191906000526020600020905b8154815290600101906020018083116110e857829003601f168201915b5050505050905090565b600061111a826128ad565b61116f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061583b602c913960400191505060405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006111b5826114c7565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561123c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806158906021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661125b6128ca565b73ffffffffffffffffffffffffffffffffffffffff16148061128a5750611289816112846128ca565b6122be565b5b6112df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603881526020018061578e6038913960400191505060405180910390fd5b6112e983836128d2565b505050565b60006112fa600261298b565b905090565b61131061130a6128ca565b826129a0565b611365576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806158b16031913960400191505060405180910390fd5b611370838383612a94565b505050565b600a60159054906101000a900460ff16156113c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bc90614f75565b60405180910390fd5b6000600190505b6005811161140b576113fe7f000000000000000000000000000000000000000000000000000000000000000082612cd7565b80806001019150506113cc565b506001600a60156101000a81548160ff021916908315150217905550565b600061147c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612ecb90919063ffffffff16565b905092915050565b61149f83838360405180602001604052806000815250611d16565b505050565b6000806114bb836002612ee590919063ffffffff16565b50905080915050919050565b60006114f7826040518060600160405280602981526020016157f0602991396002612f119092919063ffffffff16565b9050919050565b600a60149054906101000a900460ff1661154d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154490614fd5565b60405180910390fd5b67016345785d8a00003414611597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158e90615135565b60405180910390fd5b6000600b60008154809291906001019190505590506113888111156115f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e890615055565b60405180910390fd5b6115fb8282612cd7565b5050565b606060098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116975780601f1061166c57610100808354040283529160200191611697565b820191906000526020600020905b81548152906001019060200180831161167a57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806157c6602a913960400191505060405180910390fd5b61176f600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f30565b9050919050565b61177e6128ca565b73ffffffffffffffffffffffffffffffffffffffff1661179c6119a8565b73ffffffffffffffffffffffffffffffffffffffff1614611825576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600a60159054906101000a900460ff1615611936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192d906150f5565b60405180910390fd5b6000600160050190505b60026101958161194c57fe5b04811161198a5761197d7f000000000000000000000000000000000000000000000000000000000000000082612cd7565b8080600101915050611940565b506001600a60166101000a81548160ff021916908315150217905550565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a6a5780601f10611a3f57610100808354040283529160200191611a6a565b820191906000526020600020905b815481529060010190602001808311611a4d57829003601f168201915b5050505050905090565b611a7c6128ca565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b8060056000611b2a6128ca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611bd76128ca565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b600a60159054906101000a900460ff1615611c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c71906150d5565b60405180910390fd5b600060016101950190505b6101f98111611cc557611cb87f000000000000000000000000000000000000000000000000000000000000000082612cd7565b8080600101915050611c85565b506001600a60176101000a81548160ff021916908315150217905550565b600e6020528060005260406000206000915054906101000a900460ff1681565b600a60149054906101000a900460ff1681565b611d27611d216128ca565b836129a0565b611d7c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806158b16031913960400191505060405180910390fd5b611d8884848484612f45565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b611dba6128ca565b73ffffffffffffffffffffffffffffffffffffffff16611dd86119a8565b73ffffffffffffffffffffffffffffffffffffffff1614611e61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1647600067ffffffffffffffff81118015611e9357600080fd5b506040519080825280601f01601f191660200182016040528015611ec65781602001600182028036833780820191505090505b50604051611ed49190614e90565b60006040518083038185875af1925050503d8060008114611f11576040519150601f19603f3d011682016040523d82523d6000602084013e611f16565b606091505b5050905080611f5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5190614f35565b60405180910390fd5b50565b6060611f68826128ad565b611fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9e90615015565b60405180910390fd5b6000600c60008481526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900461ffff1661ffff1661ffff1681526020016000820160039054906101000a900461ffff1661ffff1661ffff1681526020016000820160059054906101000a900461ffff1661ffff1661ffff1681526020016000820160079054906101000a900460ff16600181111561206057fe5b600181111561206b57fe5b8152602001600182016004806020026040519081016040528092919082600480156120d5576020028201916000905b82829054906101000a900462ffffff1662ffffff168152602001906003019060208260020104928301926001038202915080841161209a5790505b505050505081525050905080600001516121a7577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166336da1a6461212e85612890565b6040518263ffffffff1660e01b815260040161214a9190614ef8565b60006040518083038186803b15801561216257600080fd5b505afa158015612176573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061219f91906144de565b915050612259565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638ee1d84c826040518263ffffffff1660e01b81526004016122009190615155565b60006040518083038186803b15801561221857600080fd5b505afa15801561222c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061225591906144de565b9150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b67016345785d8a000081565b67016345785d8a000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61235a6128ca565b73ffffffffffffffffffffffffffffffffffffffff166123786119a8565b73ffffffffffffffffffffffffffffffffffffffff1614612401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806156f26026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008060008060008061255c896128ad565b61259b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259290615115565b60405180910390fd5b6000600c60008b81526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900461ffff1661ffff1661ffff1681526020016000820160039054906101000a900461ffff1661ffff1661ffff1681526020016000820160059054906101000a900461ffff1661ffff1661ffff1681526020016000820160079054906101000a900460ff16600181111561265457fe5b600181111561265f57fe5b8152602001600182016004806020026040519081016040528092919082600480156126c9576020028201916000905b82829054906101000a900462ffffff1662ffffff168152602001906003019060208260020104928301926001038202915080841161268e5790505b50505050508152505090508060200151816040015182606001518360a001516000600481106126f457fe5b60200201518460a0015160016004811061270a57fe5b60200201518560a0015160026004811061272057fe5b60200201518660a0015160036004811061273657fe5b602002015187608001519850985098509850985098509850985050919395975091939597565b6127646128ca565b73ffffffffffffffffffffffffffffffffffffffff166127826119a8565b73ffffffffffffffffffffffffffffffffffffffff161461280b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6001600a60146101000a81548160ff021916908315150217905550565b60008161ffff16141561284557612840826001612fb7565b61288c565b60f28161ffff16116128615761285c826002612fb7565b61288b565b6101258161ffff161161287e57612879826003612fb7565b61288a565b612889826004612fb7565b5b5b5b5050565b6000600582116128a357600090506128a8565b600190505b919050565b60006128c382600261330490919063ffffffff16565b9050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612945836114c7565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006129998260000161331e565b9050919050565b60006129ab826128ad565b612a00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180615762602c913960400191505060405180910390fd5b6000612a0b836114c7565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612a7a57508373ffffffffffffffffffffffffffffffffffffffff16612a628461110f565b73ffffffffffffffffffffffffffffffffffffffff16145b80612a8b5750612a8a81856122be565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612ab4826114c7565b73ffffffffffffffffffffffffffffffffffffffff1614612b20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806158676029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ba6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806157186024913960400191505060405180910390fd5b612bb183838361332f565b612bbc6000826128d2565b612c0d81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061333490919063ffffffff16565b50612c5f81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061334e90919063ffffffff16565b50612c76818360026133689092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d7a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b612d83816128ad565b15612df6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b612e026000838361332f565b612e5381600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061334e90919063ffffffff16565b50612e6a818360026133689092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000612eda836000018361339d565b60001c905092915050565b600080600080612ef88660000186613420565b915091508160001c8160001c9350935050509250929050565b6000612f24846000018460001b846134b9565b60001c90509392505050565b6000612f3e826000016135af565b9050919050565b612f50848484612a94565b612f5c848484846135c0565b612fb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806156c06032913960400191505060405180910390fd5b50505050565b60005b8160ff168160ff16101561321c5760001515600d6000858460ff1660048110612fdf57fe5b602002015162ffffff1662ffffff16815260200190815260200160002060009054906101000a900460ff1615151461304c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304390615095565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b740a336040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156130b457600080fd5b505af11580156130c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ec9190614463565b73ffffffffffffffffffffffffffffffffffffffff166339b24bd2848360ff166004811061311657fe5b60200201516040518263ffffffff1660e01b8152600401613137919061526a565b60206040518083038186803b15801561314f57600080fd5b505afa158015613163573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318791906143e8565b6131c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131bd90614f95565b60405180910390fd5b6001600d6000858460ff16600481106131db57fe5b602002015162ffffff1662ffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050612fba565b5060005b8160ff168160ff161015613284576000600d6000858460ff166004811061324357fe5b602002015162ffffff1662ffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050613220565b5060008190505b60048160ff1610156132ff576000838260ff16600481106132a857fe5b602002015162ffffff16146132f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132e9906150b5565b60405180910390fd5b808060010191505061328b565b505050565b6000613316836000018360001b6137d9565b905092915050565b600081600001805490509050919050565b505050565b6000613346836000018360001b6137fc565b905092915050565b6000613360836000018360001b6138e4565b905092915050565b6000613394846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b613954565b90509392505050565b6000818360000180549050116133fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061569e6022913960400191505060405180910390fd5b82600001828154811061340d57fe5b9060005260206000200154905092915050565b60008082846000018054905011613482576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806158196022913960400191505060405180910390fd5b600084600001848154811061349357fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390613580576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561354557808201518184015260208101905061352a565b50505050905090810190601f1680156135725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061359357fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b60006135e18473ffffffffffffffffffffffffffffffffffffffff16613a30565b6135ee57600190506137d1565b600061375863150b7a0260e01b6136036128ca565b888787604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561368757808201518184015260208101905061366c565b50505050905090810190601f1680156136b45780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518060600160405280603281526020016156c0603291398773ffffffffffffffffffffffffffffffffffffffff16613a439092919063ffffffff16565b9050600081806020019051602081101561377157600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081146138d8576000600182039050600060018660000180549050039050600086600001828154811061384757fe5b906000526020600020015490508087600001848154811061386457fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061389c57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506138de565b60009150505b92915050565b60006138f08383613a5b565b61394957826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061394e565b600090505b92915050565b60008084600101600085815260200190815260200160002054905060008114156139fb57846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050613a29565b82856000016001830381548110613a0e57fe5b90600052602060002090600202016001018190555060009150505b9392505050565b600080823b905060008111915050919050565b6060613a528484600085613a7e565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b606082471015613ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061573c6026913960400191505060405180910390fd5b613ae285613a30565b613b54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310613ba35780518252602082019150602081019050602083039250613b80565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613c05576040519150601f19603f3d011682016040523d82523d6000602084013e613c0a565b606091505b5091509150613c1a828286613c26565b92505050949350505050565b60608315613c3657829050613ceb565b600083511115613c495782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613cb0578082015181840152602081019050613c95565b50505050905090810190601f168015613cdd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6040518060c00160405280600015158152602001600061ffff168152602001600061ffff168152602001600061ffff16815260200160006001811115613d3457fe5b8152602001613d41613de7565b81525090565b826004600901600a90048101928215613dd65791602002820160005b83821115613da557835183826101000a81548162ffffff021916908362ffffff1602179055509260200192600301602081600201049283019260010302613d63565b8015613dd45782816101000a81549062ffffff0219169055600301602081600201049283019260010302613da5565b505b509050613de39190613e09565b5090565b6040518060800160405280600490602082028036833780820191505090505090565b5b80821115613e22576000816000905550600101613e0a565b5090565b6000613e39613e3484615334565b615303565b90508082856020860282011115613e4f57600080fd5b60005b85811015613e7f5781613e658882614202565b845260208401935060208301925050600181019050613e52565b5050509392505050565b6000613e9c613e978461535a565b615303565b905082815260208101848484011115613eb457600080fd5b613ebf84828561553e565b509392505050565b6000613eda613ed58461538a565b615303565b905082815260208101848484011115613ef257600080fd5b613efd84828561554d565b509392505050565b600081359050613f14816155a7565b92915050565b600082601f830112613f2b57600080fd5b6004613f38848285613e26565b91505092915050565b600081359050613f50816155be565b92915050565b600081519050613f65816155be565b92915050565b600081359050613f7a816155d5565b92915050565b600081359050613f8f816155ec565b92915050565b600082601f830112613fa657600080fd5b8135613fb6848260208601613e89565b91505092915050565b600081519050613fce81615603565b92915050565b600081519050613fe38161561a565b92915050565b600081519050613ff881615631565b92915050565b60008151905061400d81615648565b92915050565b600082601f83011261402457600080fd5b8151614034848260208601613ec7565b91505092915050565b60006060828403121561404f57600080fd5b6140596060615303565b9050600082015167ffffffffffffffff81111561407557600080fd5b61408184828501614013565b600083015250602061409584828501613ffe565b602083015250604082015167ffffffffffffffff8111156140b557600080fd5b6140c184828501614013565b60408301525092915050565b6000606082840312156140df57600080fd5b6140e96060615303565b9050600082015167ffffffffffffffff81111561410557600080fd5b61411184828501614013565b60008301525060206141258482850161422c565b602083015250604082015167ffffffffffffffff81111561414557600080fd5b61415184828501614013565b60408301525092915050565b60006060828403121561416f57600080fd5b6141796060615303565b9050600082015167ffffffffffffffff81111561419557600080fd5b6141a184828501614013565b60008301525060206141b584828501613ffe565b602083015250604082015167ffffffffffffffff8111156141d557600080fd5b6141e184828501614013565b60408301525092915050565b6000813590506141fc81615658565b92915050565b6000813590506142118161566f565b92915050565b60008135905061422681615686565b92915050565b60008151905061423b81615686565b92915050565b60006020828403121561425357600080fd5b600061426184828501613f05565b91505092915050565b6000806040838503121561427d57600080fd5b600061428b85828601613f05565b925050602061429c85828601613f05565b9150509250929050565b6000806000606084860312156142bb57600080fd5b60006142c986828701613f05565b93505060206142da86828701613f05565b92505060406142eb86828701614217565b9150509250925092565b6000806000806080858703121561430b57600080fd5b600061431987828801613f05565b945050602061432a87828801613f05565b935050604061433b87828801614217565b925050606085013567ffffffffffffffff81111561435857600080fd5b61436487828801613f95565b91505092959194509250565b6000806040838503121561438357600080fd5b600061439185828601613f05565b92505060206143a285828601613f41565b9150509250929050565b600080604083850312156143bf57600080fd5b60006143cd85828601613f05565b92505060206143de85828601614217565b9150509250929050565b6000602082840312156143fa57600080fd5b600061440884828501613f56565b91505092915050565b60006020828403121561442357600080fd5b600061443184828501613f6b565b91505092915050565b60006020828403121561444c57600080fd5b600061445a84828501613f80565b91505092915050565b60006020828403121561447557600080fd5b600061448384828501613fbf565b91505092915050565b60006020828403121561449e57600080fd5b60006144ac84828501613fd4565b91505092915050565b6000602082840312156144c757600080fd5b60006144d584828501613fe9565b91505092915050565b6000602082840312156144f057600080fd5b600082015167ffffffffffffffff81111561450a57600080fd5b61451684828501614013565b91505092915050565b60006020828403121561453157600080fd5b600082015167ffffffffffffffff81111561454b57600080fd5b6145578482850161403d565b91505092915050565b60006020828403121561457257600080fd5b600082015167ffffffffffffffff81111561458c57600080fd5b614598848285016140cd565b91505092915050565b6000602082840312156145b357600080fd5b600082015167ffffffffffffffff8111156145cd57600080fd5b6145d98482850161415d565b91505092915050565b600080600080600061010086880312156145fb57600080fd5b6000614609888289016141ed565b955050602061461a888289016141ed565b945050604061462b888289016141ed565b935050606061463c88828901613f1a565b92505060e061464d88828901614217565b9150509295509295909350565b60006020828403121561466c57600080fd5b600061467a84828501614217565b91505092915050565b600061468f8383614e63565b60208301905092915050565b6146a481615424565b82525050565b6146b3816153c4565b6146bd81846153f2565b92506146c8826153ba565b8060005b838110156146f95781516146e08782614683565b96506146eb836153e5565b9250506001810190506146cc565b505050505050565b61470a816153c4565b61471481846153fd565b925061471f826153ba565b8060005b838110156147505781516147378782614683565b9650614742836153e5565b925050600181019050614723565b505050505050565b61476181615436565b82525050565b61477081615436565b82525050565b6000614781826153cf565b61478b8185615408565b935061479b81856020860161554d565b80840191505092915050565b6147b081615508565b82525050565b6147bf8161552c565b82525050565b6147ce8161552c565b82525050565b60006147df826153da565b6147e98185615413565b93506147f981856020860161554d565b61480281615582565b840191505092915050565b600061481a601e83615413565b91507f536869656c64733a206574686572207472616e73666572206661696c656400006000830152602082019050919050565b600061485a603783615413565b91507f536869656c64733a20546872656520536869656c64732068617264776172652060008301527f726573657276656420666f72204d616b657220506173730000000000000000006020830152604082019050919050565b60006148c0602083615413565b91507f536869656c64733a206d616b657220616c7265616479207072656d696e7465646000830152602082019050919050565b6000614900601d83615413565b91507f536869656c64733a20636f6c6f7220646f6573206e6f742065786973740000006000830152602082019050919050565b6000614940601d83615413565b91507f536869656c64733a20736869656c6420616c7265616479206275696c740000006000830152602082019050919050565b6000614980602383615413565b91507f536869656c64733a205075626c6963206d696e74206e6f74206163746976652060008301527f79657400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006149e6602583615413565b91507f536869656c64733a20756e6971756520736869656c6420616c7265616479206d60008301527f696e7465640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614a4c602883615413565b91507f536869656c64733a2055524920717565727920666f72206e6f6e65786973746560008301527f6e7420746f6b656e0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614ab2602283615413565b91507f536869656c64733a20696e73756666696369656e74206275696c64696e67206660008301527f65650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614b18601783615413565b91507f536869656c64733a206d696e74696e6720636c6f7365640000000000000000006000830152602082019050919050565b6000614b58602183615413565b91507f536869656c64733a206f6e6c79206f776e65722063616e206275696c64204e4660008301527f54000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614bbe602283615413565b91507f536869656c64733a20616c6c20636f6c6f7273206d75737420626520756e697160008301527f75650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614c24602683615413565b91507f536869656c64733a206d617820636f6c6f727320657863656564656420666f7260008301527f206669656c6400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614c8a602383615413565b91507f536869656c64733a207374616e6461726420616c7265616479207072656d696e60008301527f74656400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614cf0602283615413565b91507f536869656c64733a206772616e74656520616c7265616479207072656d696e7460008301527f65640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614d56601e83615413565b91507f536869656c643a20746f6b656e494420646f6573206e6f7420657869737400006000830152602082019050919050565b6000614d96601e83615413565b91507f536869656c64733a20496e73756666696369656e74206d696e742066656500006000830152602082019050919050565b61012082016000820151614de06000850182614758565b506020820151614df36020850182614e45565b506040820151614e066040850182614e45565b506060820151614e196060850182614e45565b506080820151614e2c60808501826147b6565b5060a0820151614e3f60a08501826146aa565b50505050565b614e4e816154c1565b82525050565b614e5d816154c1565b82525050565b614e6c816154ef565b82525050565b614e7b816154ef565b82525050565b614e8a816154fe565b82525050565b6000614e9c8284614776565b915081905092915050565b6000602082019050614ebc600083018461469b565b92915050565b6000602082019050614ed76000830184614767565b92915050565b6000602082019050614ef260008301846147a7565b92915050565b6000602082019050614f0d60008301846147c5565b92915050565b60006020820190508181036000830152614f2d81846147d4565b905092915050565b60006020820190508181036000830152614f4e8161480d565b9050919050565b60006020820190508181036000830152614f6e8161484d565b9050919050565b60006020820190508181036000830152614f8e816148b3565b9050919050565b60006020820190508181036000830152614fae816148f3565b9050919050565b60006020820190508181036000830152614fce81614933565b9050919050565b60006020820190508181036000830152614fee81614973565b9050919050565b6000602082019050818103600083015261500e816149d9565b9050919050565b6000602082019050818103600083015261502e81614a3f565b9050919050565b6000602082019050818103600083015261504e81614aa5565b9050919050565b6000602082019050818103600083015261506e81614b0b565b9050919050565b6000602082019050818103600083015261508e81614b4b565b9050919050565b600060208201905081810360008301526150ae81614bb1565b9050919050565b600060208201905081810360008301526150ce81614c17565b9050919050565b600060208201905081810360008301526150ee81614c7d565b9050919050565b6000602082019050818103600083015261510e81614ce3565b9050919050565b6000602082019050818103600083015261512e81614d49565b9050919050565b6000602082019050818103600083015261514e81614d89565b9050919050565b60006101208201905061516b6000830184614dc9565b92915050565b60006020820190506151866000830184614e54565b92915050565b600060a0820190506151a16000830185614e54565b6151ae6020830184614701565b9392505050565b600060c0820190506151ca6000830186614e54565b6151d76020830185614e54565b6151e46040830184614701565b949350505050565b600061010082019050615202600083018b614e54565b61520f602083018a614e54565b61521c6040830189614e54565b6152296060830188614e72565b6152366080830187614e72565b61524360a0830186614e72565b61525060c0830185614e72565b61525d60e08301846147c5565b9998505050505050505050565b600060208201905061527f6000830184614e72565b92915050565b600060208201905061529a6000830184614e81565b92915050565b6000610120820190506152b66000830189614e81565b6152c36020830188614e54565b6152d06040830187614e54565b6152dd6060830186614e54565b6152ea6080830185614701565b6152f86101008301846147c5565b979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561532a57615329615580565b5b8060405250919050565b600067ffffffffffffffff82111561534f5761534e615580565b5b602082029050919050565b600067ffffffffffffffff82111561537557615374615580565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156153a5576153a4615580565b5b601f19601f8301169050602081019050919050565b6000819050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600061542f826154cf565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061548382615424565b9050919050565b600061549582615424565b9050919050565b60006154a782615424565b9050919050565b60008190506154bc82615593565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006155138261551a565b9050919050565b6000615525826154cf565b9050919050565b6000615537826154ae565b9050919050565b82818337600083830152505050565b60005b8381101561556b578082015181840152602081019050615550565b8381111561557a576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b600281106155a4576155a3615580565b5b50565b6155b081615424565b81146155bb57600080fd5b50565b6155c781615436565b81146155d257600080fd5b50565b6155de81615442565b81146155e957600080fd5b50565b6155f58161544c565b811461560057600080fd5b50565b61560c81615478565b811461561757600080fd5b50565b6156238161548a565b811461562e57600080fd5b50565b61563a8161549c565b811461564557600080fd5b50565b6002811061565557600080fd5b50565b615661816154c1565b811461566c57600080fd5b50565b615678816154ef565b811461568357600080fd5b50565b61568f816154fe565b811461569a57600080fd5b5056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a164736f6c6343000706000a",
  "deployedBytecode": "0x6080604052600436106102035760003560e01c80638da5cb5b11610118578063c87b56dd116100a0578063df1100c61161006f578063df1100c614610716578063e985e9c514610741578063f2fde38b1461077e578063f862ab1b146107a7578063fbe41874146107eb57610203565b8063c87b56dd14610658578063ce2aabba14610695578063d77d5d48146106c0578063dc53fd92146106eb57610203565b8063b51d2512116100e7578063b51d251214610585578063b67c25a3146105c2578063b88d4fde146105ed578063c099c4e214610616578063c87965721461064157610203565b80638da5cb5b146104ef57806395d89b411461051a578063a22cb46514610545578063a36a68cb1461056e57610203565b80632f745c591161019b5780636a6278421161016a5780636a6278421461043d5780636c0360eb1461045957806370a0823114610484578063715018a6146104c15780638311b9d8146104d857610203565b80632f745c591461035d57806342842e0e1461039a5780634f6ccce7146103c35780636352211e1461040057610203565b8063095ea7b3116101d7578063095ea7b3146102c957806318160ddd146102f257806323b872dd1461031d5780632ee4cdaa1461034657610203565b806272e9c71461020857806301ffc9a71461022457806306fdde0314610261578063081812fc1461028c575b600080fd5b610222600480360381019061021d91906145e2565b610802565b005b34801561023057600080fd5b5061024b6004803603810190610246919061443a565b611006565b6040516102589190614ec2565b60405180910390f35b34801561026d57600080fd5b5061027661106d565b6040516102839190614f13565b60405180910390f35b34801561029857600080fd5b506102b360048036038101906102ae919061465a565b61110f565b6040516102c09190614ea7565b60405180910390f35b3480156102d557600080fd5b506102f060048036038101906102eb91906143ac565b6111aa565b005b3480156102fe57600080fd5b506103076112ee565b6040516103149190615285565b60405180910390f35b34801561032957600080fd5b50610344600480360381019061033f91906142a6565b6112ff565b005b34801561035257600080fd5b5061035b611375565b005b34801561036957600080fd5b50610384600480360381019061037f91906143ac565b611429565b6040516103919190615285565b60405180910390f35b3480156103a657600080fd5b506103c160048036038101906103bc91906142a6565b611484565b005b3480156103cf57600080fd5b506103ea60048036038101906103e5919061465a565b6114a4565b6040516103f79190615285565b60405180910390f35b34801561040c57600080fd5b506104276004803603810190610422919061465a565b6114c7565b6040516104349190614ea7565b60405180910390f35b61045760048036038101906104529190614241565b6114fe565b005b34801561046557600080fd5b5061046e6115ff565b60405161047b9190614f13565b60405180910390f35b34801561049057600080fd5b506104ab60048036038101906104a69190614241565b6116a1565b6040516104b89190615285565b60405180910390f35b3480156104cd57600080fd5b506104d6611776565b005b3480156104e457600080fd5b506104ed6118e6565b005b3480156104fb57600080fd5b506105046119a8565b6040516105119190614ea7565b60405180910390f35b34801561052657600080fd5b5061052f6119d2565b60405161053c9190614f13565b60405180910390f35b34801561055157600080fd5b5061056c60048036038101906105679190614370565b611a74565b005b34801561057a57600080fd5b50610583611c2a565b005b34801561059157600080fd5b506105ac60048036038101906105a79190614411565b611ce3565b6040516105b99190614ec2565b60405180910390f35b3480156105ce57600080fd5b506105d7611d03565b6040516105e49190614ec2565b60405180910390f35b3480156105f957600080fd5b50610614600480360381019061060f91906142f5565b611d16565b005b34801561062257600080fd5b5061062b611d8e565b6040516106389190614ea7565b60405180910390f35b34801561064d57600080fd5b50610656611db2565b005b34801561066457600080fd5b5061067f600480360381019061067a919061465a565b611f5d565b60405161068c9190614f13565b60405180910390f35b3480156106a157600080fd5b506106aa61225e565b6040516106b79190614ea7565b60405180910390f35b3480156106cc57600080fd5b506106d5612282565b6040516106e29190614edd565b60405180910390f35b3480156106f757600080fd5b506107006122a6565b60405161070d9190615285565b60405180910390f35b34801561072257600080fd5b5061072b6122b2565b6040516107389190615285565b60405180910390f35b34801561074d57600080fd5b506107686004803603810190610763919061426a565b6122be565b6040516107759190614ec2565b60405180910390f35b34801561078a57600080fd5b506107a560048036038101906107a09190614241565b612352565b005b3480156107b357600080fd5b506107ce60048036038101906107c9919061465a565b612547565b6040516107e29897969594939291906151ec565b60405180910390f35b3480156107f757600080fd5b5061080061275c565b005b61080b816114c7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610878576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086f90615075565b60405180910390fd5b600c600082815260200190815260200160002060000160009054906101000a900460ff16156108dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d390614fb5565b60405180910390fd5b60788461ffff16141561092e57600581111561092d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092490614f55565b60405180910390fd5b5b6109388286612828565b610940613cf2565b600181600001901515908115158152505085816020019061ffff16908161ffff168152505084816040019061ffff16908161ffff168152505083816060019061ffff16908161ffff1681525050828160a0018190525061099f82612890565b816080019060018111156109af57fe5b908160018111156109bc57fe5b8152505060008686856040516020016109d7939291906151b5565b604051602081830303815290604052805190602001209050600e600082815260200190815260200160002060009054906101000a900460ff1615610a50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4790614ff5565b60405180910390fd5b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b740a336040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610abb57600080fd5b505af1158015610acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af39190614463565b73ffffffffffffffffffffffffffffffffffffffff1663ccf27bea85602001518660a001516040518363ffffffff1660e01b8152600401610b3592919061518c565b60006040518083038186803b158015610b4d57600080fd5b505afa158015610b61573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b8a919061451f565b60200151905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663291c881d6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610bfa57600080fd5b505af1158015610c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3291906144b5565b73ffffffffffffffffffffffffffffffffffffffff1663e6e2e97c86604001516040518263ffffffff1660e01b8152600401610c6e9190615171565b60006040518083038186803b158015610c8657600080fd5b505afa158015610c9a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610cc391906145a1565b60200151905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632900a9aa6040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610d3357600080fd5b505af1158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b919061448c565b73ffffffffffffffffffffffffffffffffffffffff1663d0b7314f87606001516040518263ffffffff1660e01b8152600401610da79190615171565b60006040518083038186803b158015610dbf57600080fd5b505afa158015610dd3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610dfc9190614560565b60200151905060006001811115610e0f57fe5b836001811115610e1b57fe5b1415610e2f5767016345785d8a0000840193505b60006001811115610e3c57fe5b826001811115610e4857fe5b1415610e5c5767016345785d8a0000840193505b8084019350833414610ea3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9a90615035565b60405180910390fd5b85600c600089815260200190815260200160002060008201518160000160006101000a81548160ff02191690831515021790555060208201518160000160016101000a81548161ffff021916908361ffff16021790555060408201518160000160036101000a81548161ffff021916908361ffff16021790555060608201518160000160056101000a81548161ffff021916908361ffff16021790555060808201518160000160076101000a81548160ff02191690836001811115610f6457fe5b021790555060a082015181600101906004610f80929190613d47565b509050506001600e600087815260200190815260200160002060006101000a81548160ff0219169083151502179055507f10dee8726629fad96af1a24a83560cb19b9a4f436ecdd488ebc59ad81c623459878c8c8c8c610fdf8d612890565b604051610ff1969594939291906152a0565b60405180910390a15050505050505050505050565b6000806000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111055780601f106110da57610100808354040283529160200191611105565b820191906000526020600020905b8154815290600101906020018083116110e857829003601f168201915b5050505050905090565b600061111a826128ad565b61116f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061583b602c913960400191505060405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006111b5826114c7565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561123c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806158906021913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661125b6128ca565b73ffffffffffffffffffffffffffffffffffffffff16148061128a5750611289816112846128ca565b6122be565b5b6112df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603881526020018061578e6038913960400191505060405180910390fd5b6112e983836128d2565b505050565b60006112fa600261298b565b905090565b61131061130a6128ca565b826129a0565b611365576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806158b16031913960400191505060405180910390fd5b611370838383612a94565b505050565b600a60159054906101000a900460ff16156113c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113bc90614f75565b60405180910390fd5b6000600190505b6005811161140b576113fe7f000000000000000000000000000000000000000000000000000000000000000082612cd7565b80806001019150506113cc565b506001600a60156101000a81548160ff021916908315150217905550565b600061147c82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612ecb90919063ffffffff16565b905092915050565b61149f83838360405180602001604052806000815250611d16565b505050565b6000806114bb836002612ee590919063ffffffff16565b50905080915050919050565b60006114f7826040518060600160405280602981526020016157f0602991396002612f119092919063ffffffff16565b9050919050565b600a60149054906101000a900460ff1661154d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154490614fd5565b60405180910390fd5b67016345785d8a00003414611597576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158e90615135565b60405180910390fd5b6000600b60008154809291906001019190505590506113888111156115f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e890615055565b60405180910390fd5b6115fb8282612cd7565b5050565b606060098054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116975780601f1061166c57610100808354040283529160200191611697565b820191906000526020600020905b81548152906001019060200180831161167a57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806157c6602a913960400191505060405180910390fd5b61176f600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612f30565b9050919050565b61177e6128ca565b73ffffffffffffffffffffffffffffffffffffffff1661179c6119a8565b73ffffffffffffffffffffffffffffffffffffffff1614611825576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b600a60159054906101000a900460ff1615611936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192d906150f5565b60405180910390fd5b6000600160050190505b60026101958161194c57fe5b04811161198a5761197d7f000000000000000000000000000000000000000000000000000000000000000082612cd7565b8080600101915050611940565b506001600a60166101000a81548160ff021916908315150217905550565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611a6a5780601f10611a3f57610100808354040283529160200191611a6a565b820191906000526020600020905b815481529060010190602001808311611a4d57829003601f168201915b5050505050905090565b611a7c6128ca565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611b1d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260198152602001807f4552433732313a20617070726f766520746f2063616c6c65720000000000000081525060200191505060405180910390fd5b8060056000611b2a6128ca565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff16611bd76128ca565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405180821515815260200191505060405180910390a35050565b600a60159054906101000a900460ff1615611c7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c71906150d5565b60405180910390fd5b600060016101950190505b6101f98111611cc557611cb87f000000000000000000000000000000000000000000000000000000000000000082612cd7565b8080600101915050611c85565b506001600a60176101000a81548160ff021916908315150217905550565b600e6020528060005260406000206000915054906101000a900460ff1681565b600a60149054906101000a900460ff1681565b611d27611d216128ca565b836129a0565b611d7c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260318152602001806158b16031913960400191505060405180910390fd5b611d8884848484612f45565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b611dba6128ca565b73ffffffffffffffffffffffffffffffffffffffff16611dd86119a8565b73ffffffffffffffffffffffffffffffffffffffff1614611e61576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1647600067ffffffffffffffff81118015611e9357600080fd5b506040519080825280601f01601f191660200182016040528015611ec65781602001600182028036833780820191505090505b50604051611ed49190614e90565b60006040518083038185875af1925050503d8060008114611f11576040519150601f19603f3d011682016040523d82523d6000602084013e611f16565b606091505b5050905080611f5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f5190614f35565b60405180910390fd5b50565b6060611f68826128ad565b611fa7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9e90615015565b60405180910390fd5b6000600c60008481526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900461ffff1661ffff1661ffff1681526020016000820160039054906101000a900461ffff1661ffff1661ffff1681526020016000820160059054906101000a900461ffff1661ffff1661ffff1681526020016000820160079054906101000a900460ff16600181111561206057fe5b600181111561206b57fe5b8152602001600182016004806020026040519081016040528092919082600480156120d5576020028201916000905b82829054906101000a900462ffffff1662ffffff168152602001906003019060208260020104928301926001038202915080841161209a5790505b505050505081525050905080600001516121a7577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166336da1a6461212e85612890565b6040518263ffffffff1660e01b815260040161214a9190614ef8565b60006040518083038186803b15801561216257600080fd5b505afa158015612176573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061219f91906144de565b915050612259565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638ee1d84c826040518263ffffffff1660e01b81526004016122009190615155565b60006040518083038186803b15801561221857600080fd5b505afa15801561222c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061225591906144de565b9150505b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b67016345785d8a000081565b67016345785d8a000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b61235a6128ca565b73ffffffffffffffffffffffffffffffffffffffff166123786119a8565b73ffffffffffffffffffffffffffffffffffffffff1614612401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612487576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806156f26026913960400191505060405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a380600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060008060008060008061255c896128ad565b61259b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161259290615115565b60405180910390fd5b6000600c60008b81526020019081526020016000206040518060c00160405290816000820160009054906101000a900460ff161515151581526020016000820160019054906101000a900461ffff1661ffff1661ffff1681526020016000820160039054906101000a900461ffff1661ffff1661ffff1681526020016000820160059054906101000a900461ffff1661ffff1661ffff1681526020016000820160079054906101000a900460ff16600181111561265457fe5b600181111561265f57fe5b8152602001600182016004806020026040519081016040528092919082600480156126c9576020028201916000905b82829054906101000a900462ffffff1662ffffff168152602001906003019060208260020104928301926001038202915080841161268e5790505b50505050508152505090508060200151816040015182606001518360a001516000600481106126f457fe5b60200201518460a0015160016004811061270a57fe5b60200201518560a0015160026004811061272057fe5b60200201518660a0015160036004811061273657fe5b602002015187608001519850985098509850985098509850985050919395975091939597565b6127646128ca565b73ffffffffffffffffffffffffffffffffffffffff166127826119a8565b73ffffffffffffffffffffffffffffffffffffffff161461280b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657281525060200191505060405180910390fd5b6001600a60146101000a81548160ff021916908315150217905550565b60008161ffff16141561284557612840826001612fb7565b61288c565b60f28161ffff16116128615761285c826002612fb7565b61288b565b6101258161ffff161161287e57612879826003612fb7565b61288a565b612889826004612fb7565b5b5b5b5050565b6000600582116128a357600090506128a8565b600190505b919050565b60006128c382600261330490919063ffffffff16565b9050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612945836114c7565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60006129998260000161331e565b9050919050565b60006129ab826128ad565b612a00576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c815260200180615762602c913960400191505060405180910390fd5b6000612a0b836114c7565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612a7a57508373ffffffffffffffffffffffffffffffffffffffff16612a628461110f565b73ffffffffffffffffffffffffffffffffffffffff16145b80612a8b5750612a8a81856122be565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612ab4826114c7565b73ffffffffffffffffffffffffffffffffffffffff1614612b20576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806158676029913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612ba6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806157186024913960400191505060405180910390fd5b612bb183838361332f565b612bbc6000826128d2565b612c0d81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061333490919063ffffffff16565b50612c5f81600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061334e90919063ffffffff16565b50612c76818360026133689092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612d7a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260208152602001807f4552433732313a206d696e7420746f20746865207a65726f206164647265737381525060200191505060405180910390fd5b612d83816128ad565b15612df6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000081525060200191505060405180910390fd5b612e026000838361332f565b612e5381600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002061334e90919063ffffffff16565b50612e6a818360026133689092919063ffffffff16565b50808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b6000612eda836000018361339d565b60001c905092915050565b600080600080612ef88660000186613420565b915091508160001c8160001c9350935050509250929050565b6000612f24846000018460001b846134b9565b60001c90509392505050565b6000612f3e826000016135af565b9050919050565b612f50848484612a94565b612f5c848484846135c0565b612fb1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806156c06032913960400191505060405180910390fd5b50505050565b60005b8160ff168160ff16101561321c5760001515600d6000858460ff1660048110612fdf57fe5b602002015162ffffff1662ffffff16815260200190815260200160002060009054906101000a900460ff1615151461304c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161304390615095565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b740a336040518163ffffffff1660e01b8152600401602060405180830381600087803b1580156130b457600080fd5b505af11580156130c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ec9190614463565b73ffffffffffffffffffffffffffffffffffffffff166339b24bd2848360ff166004811061311657fe5b60200201516040518263ffffffff1660e01b8152600401613137919061526a565b60206040518083038186803b15801561314f57600080fd5b505afa158015613163573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061318791906143e8565b6131c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131bd90614f95565b60405180910390fd5b6001600d6000858460ff16600481106131db57fe5b602002015162ffffff1662ffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050612fba565b5060005b8160ff168160ff161015613284576000600d6000858460ff166004811061324357fe5b602002015162ffffff1662ffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050613220565b5060008190505b60048160ff1610156132ff576000838260ff16600481106132a857fe5b602002015162ffffff16146132f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132e9906150b5565b60405180910390fd5b808060010191505061328b565b505050565b6000613316836000018360001b6137d9565b905092915050565b600081600001805490509050919050565b505050565b6000613346836000018360001b6137fc565b905092915050565b6000613360836000018360001b6138e4565b905092915050565b6000613394846000018460001b8473ffffffffffffffffffffffffffffffffffffffff1660001b613954565b90509392505050565b6000818360000180549050116133fe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061569e6022913960400191505060405180910390fd5b82600001828154811061340d57fe5b9060005260206000200154905092915050565b60008082846000018054905011613482576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806158196022913960400191505060405180910390fd5b600084600001848154811061349357fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008084600101600085815260200190815260200160002054905060008114158390613580576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561354557808201518184015260208101905061352a565b50505050905090810190601f1680156135725780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5084600001600182038154811061359357fe5b9060005260206000209060020201600101549150509392505050565b600081600001805490509050919050565b60006135e18473ffffffffffffffffffffffffffffffffffffffff16613a30565b6135ee57600190506137d1565b600061375863150b7a0260e01b6136036128ca565b888787604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561368757808201518184015260208101905061366c565b50505050905090810190601f1680156136b45780820380516001836020036101000a031916815260200191505b5095505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518060600160405280603281526020016156c0603291398773ffffffffffffffffffffffffffffffffffffffff16613a439092919063ffffffff16565b9050600081806020019051602081101561377157600080fd5b8101908080519060200190929190505050905063150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614925050505b949350505050565b600080836001016000848152602001908152602001600020541415905092915050565b600080836001016000848152602001908152602001600020549050600081146138d8576000600182039050600060018660000180549050039050600086600001828154811061384757fe5b906000526020600020015490508087600001848154811061386457fe5b906000526020600020018190555060018301876001016000838152602001908152602001600020819055508660000180548061389c57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506138de565b60009150505b92915050565b60006138f08383613a5b565b61394957826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061394e565b600090505b92915050565b60008084600101600085815260200190815260200160002054905060008114156139fb57846000016040518060400160405280868152602001858152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508460000180549050856001016000868152602001908152602001600020819055506001915050613a29565b82856000016001830381548110613a0e57fe5b90600052602060002090600202016001018190555060009150505b9392505050565b600080823b905060008111915050919050565b6060613a528484600085613a7e565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b606082471015613ad9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061573c6026913960400191505060405180910390fd5b613ae285613a30565b613b54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310613ba35780518252602082019150602081019050602083039250613b80565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613c05576040519150601f19603f3d011682016040523d82523d6000602084013e613c0a565b606091505b5091509150613c1a828286613c26565b92505050949350505050565b60608315613c3657829050613ceb565b600083511115613c495782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613cb0578082015181840152602081019050613c95565b50505050905090810190601f168015613cdd5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6040518060c00160405280600015158152602001600061ffff168152602001600061ffff168152602001600061ffff16815260200160006001811115613d3457fe5b8152602001613d41613de7565b81525090565b826004600901600a90048101928215613dd65791602002820160005b83821115613da557835183826101000a81548162ffffff021916908362ffffff1602179055509260200192600301602081600201049283019260010302613d63565b8015613dd45782816101000a81549062ffffff0219169055600301602081600201049283019260010302613da5565b505b509050613de39190613e09565b5090565b6040518060800160405280600490602082028036833780820191505090505090565b5b80821115613e22576000816000905550600101613e0a565b5090565b6000613e39613e3484615334565b615303565b90508082856020860282011115613e4f57600080fd5b60005b85811015613e7f5781613e658882614202565b845260208401935060208301925050600181019050613e52565b5050509392505050565b6000613e9c613e978461535a565b615303565b905082815260208101848484011115613eb457600080fd5b613ebf84828561553e565b509392505050565b6000613eda613ed58461538a565b615303565b905082815260208101848484011115613ef257600080fd5b613efd84828561554d565b509392505050565b600081359050613f14816155a7565b92915050565b600082601f830112613f2b57600080fd5b6004613f38848285613e26565b91505092915050565b600081359050613f50816155be565b92915050565b600081519050613f65816155be565b92915050565b600081359050613f7a816155d5565b92915050565b600081359050613f8f816155ec565b92915050565b600082601f830112613fa657600080fd5b8135613fb6848260208601613e89565b91505092915050565b600081519050613fce81615603565b92915050565b600081519050613fe38161561a565b92915050565b600081519050613ff881615631565b92915050565b60008151905061400d81615648565b92915050565b600082601f83011261402457600080fd5b8151614034848260208601613ec7565b91505092915050565b60006060828403121561404f57600080fd5b6140596060615303565b9050600082015167ffffffffffffffff81111561407557600080fd5b61408184828501614013565b600083015250602061409584828501613ffe565b602083015250604082015167ffffffffffffffff8111156140b557600080fd5b6140c184828501614013565b60408301525092915050565b6000606082840312156140df57600080fd5b6140e96060615303565b9050600082015167ffffffffffffffff81111561410557600080fd5b61411184828501614013565b60008301525060206141258482850161422c565b602083015250604082015167ffffffffffffffff81111561414557600080fd5b61415184828501614013565b60408301525092915050565b60006060828403121561416f57600080fd5b6141796060615303565b9050600082015167ffffffffffffffff81111561419557600080fd5b6141a184828501614013565b60008301525060206141b584828501613ffe565b602083015250604082015167ffffffffffffffff8111156141d557600080fd5b6141e184828501614013565b60408301525092915050565b6000813590506141fc81615658565b92915050565b6000813590506142118161566f565b92915050565b60008135905061422681615686565b92915050565b60008151905061423b81615686565b92915050565b60006020828403121561425357600080fd5b600061426184828501613f05565b91505092915050565b6000806040838503121561427d57600080fd5b600061428b85828601613f05565b925050602061429c85828601613f05565b9150509250929050565b6000806000606084860312156142bb57600080fd5b60006142c986828701613f05565b93505060206142da86828701613f05565b92505060406142eb86828701614217565b9150509250925092565b6000806000806080858703121561430b57600080fd5b600061431987828801613f05565b945050602061432a87828801613f05565b935050604061433b87828801614217565b925050606085013567ffffffffffffffff81111561435857600080fd5b61436487828801613f95565b91505092959194509250565b6000806040838503121561438357600080fd5b600061439185828601613f05565b92505060206143a285828601613f41565b9150509250929050565b600080604083850312156143bf57600080fd5b60006143cd85828601613f05565b92505060206143de85828601614217565b9150509250929050565b6000602082840312156143fa57600080fd5b600061440884828501613f56565b91505092915050565b60006020828403121561442357600080fd5b600061443184828501613f6b565b91505092915050565b60006020828403121561444c57600080fd5b600061445a84828501613f80565b91505092915050565b60006020828403121561447557600080fd5b600061448384828501613fbf565b91505092915050565b60006020828403121561449e57600080fd5b60006144ac84828501613fd4565b91505092915050565b6000602082840312156144c757600080fd5b60006144d584828501613fe9565b91505092915050565b6000602082840312156144f057600080fd5b600082015167ffffffffffffffff81111561450a57600080fd5b61451684828501614013565b91505092915050565b60006020828403121561453157600080fd5b600082015167ffffffffffffffff81111561454b57600080fd5b6145578482850161403d565b91505092915050565b60006020828403121561457257600080fd5b600082015167ffffffffffffffff81111561458c57600080fd5b614598848285016140cd565b91505092915050565b6000602082840312156145b357600080fd5b600082015167ffffffffffffffff8111156145cd57600080fd5b6145d98482850161415d565b91505092915050565b600080600080600061010086880312156145fb57600080fd5b6000614609888289016141ed565b955050602061461a888289016141ed565b945050604061462b888289016141ed565b935050606061463c88828901613f1a565b92505060e061464d88828901614217565b9150509295509295909350565b60006020828403121561466c57600080fd5b600061467a84828501614217565b91505092915050565b600061468f8383614e63565b60208301905092915050565b6146a481615424565b82525050565b6146b3816153c4565b6146bd81846153f2565b92506146c8826153ba565b8060005b838110156146f95781516146e08782614683565b96506146eb836153e5565b9250506001810190506146cc565b505050505050565b61470a816153c4565b61471481846153fd565b925061471f826153ba565b8060005b838110156147505781516147378782614683565b9650614742836153e5565b925050600181019050614723565b505050505050565b61476181615436565b82525050565b61477081615436565b82525050565b6000614781826153cf565b61478b8185615408565b935061479b81856020860161554d565b80840191505092915050565b6147b081615508565b82525050565b6147bf8161552c565b82525050565b6147ce8161552c565b82525050565b60006147df826153da565b6147e98185615413565b93506147f981856020860161554d565b61480281615582565b840191505092915050565b600061481a601e83615413565b91507f536869656c64733a206574686572207472616e73666572206661696c656400006000830152602082019050919050565b600061485a603783615413565b91507f536869656c64733a20546872656520536869656c64732068617264776172652060008301527f726573657276656420666f72204d616b657220506173730000000000000000006020830152604082019050919050565b60006148c0602083615413565b91507f536869656c64733a206d616b657220616c7265616479207072656d696e7465646000830152602082019050919050565b6000614900601d83615413565b91507f536869656c64733a20636f6c6f7220646f6573206e6f742065786973740000006000830152602082019050919050565b6000614940601d83615413565b91507f536869656c64733a20736869656c6420616c7265616479206275696c740000006000830152602082019050919050565b6000614980602383615413565b91507f536869656c64733a205075626c6963206d696e74206e6f74206163746976652060008301527f79657400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006149e6602583615413565b91507f536869656c64733a20756e6971756520736869656c6420616c7265616479206d60008301527f696e7465640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614a4c602883615413565b91507f536869656c64733a2055524920717565727920666f72206e6f6e65786973746560008301527f6e7420746f6b656e0000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614ab2602283615413565b91507f536869656c64733a20696e73756666696369656e74206275696c64696e67206660008301527f65650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614b18601783615413565b91507f536869656c64733a206d696e74696e6720636c6f7365640000000000000000006000830152602082019050919050565b6000614b58602183615413565b91507f536869656c64733a206f6e6c79206f776e65722063616e206275696c64204e4660008301527f54000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614bbe602283615413565b91507f536869656c64733a20616c6c20636f6c6f7273206d75737420626520756e697160008301527f75650000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614c24602683615413565b91507f536869656c64733a206d617820636f6c6f727320657863656564656420666f7260008301527f206669656c6400000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614c8a602383615413565b91507f536869656c64733a207374616e6461726420616c7265616479207072656d696e60008301527f74656400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614cf0602283615413565b91507f536869656c64733a206772616e74656520616c7265616479207072656d696e7460008301527f65640000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000614d56601e83615413565b91507f536869656c643a20746f6b656e494420646f6573206e6f7420657869737400006000830152602082019050919050565b6000614d96601e83615413565b91507f536869656c64733a20496e73756666696369656e74206d696e742066656500006000830152602082019050919050565b61012082016000820151614de06000850182614758565b506020820151614df36020850182614e45565b506040820151614e066040850182614e45565b506060820151614e196060850182614e45565b506080820151614e2c60808501826147b6565b5060a0820151614e3f60a08501826146aa565b50505050565b614e4e816154c1565b82525050565b614e5d816154c1565b82525050565b614e6c816154ef565b82525050565b614e7b816154ef565b82525050565b614e8a816154fe565b82525050565b6000614e9c8284614776565b915081905092915050565b6000602082019050614ebc600083018461469b565b92915050565b6000602082019050614ed76000830184614767565b92915050565b6000602082019050614ef260008301846147a7565b92915050565b6000602082019050614f0d60008301846147c5565b92915050565b60006020820190508181036000830152614f2d81846147d4565b905092915050565b60006020820190508181036000830152614f4e8161480d565b9050919050565b60006020820190508181036000830152614f6e8161484d565b9050919050565b60006020820190508181036000830152614f8e816148b3565b9050919050565b60006020820190508181036000830152614fae816148f3565b9050919050565b60006020820190508181036000830152614fce81614933565b9050919050565b60006020820190508181036000830152614fee81614973565b9050919050565b6000602082019050818103600083015261500e816149d9565b9050919050565b6000602082019050818103600083015261502e81614a3f565b9050919050565b6000602082019050818103600083015261504e81614aa5565b9050919050565b6000602082019050818103600083015261506e81614b0b565b9050919050565b6000602082019050818103600083015261508e81614b4b565b9050919050565b600060208201905081810360008301526150ae81614bb1565b9050919050565b600060208201905081810360008301526150ce81614c17565b9050919050565b600060208201905081810360008301526150ee81614c7d565b9050919050565b6000602082019050818103600083015261510e81614ce3565b9050919050565b6000602082019050818103600083015261512e81614d49565b9050919050565b6000602082019050818103600083015261514e81614d89565b9050919050565b60006101208201905061516b6000830184614dc9565b92915050565b60006020820190506151866000830184614e54565b92915050565b600060a0820190506151a16000830185614e54565b6151ae6020830184614701565b9392505050565b600060c0820190506151ca6000830186614e54565b6151d76020830185614e54565b6151e46040830184614701565b949350505050565b600061010082019050615202600083018b614e54565b61520f602083018a614e54565b61521c6040830189614e54565b6152296060830188614e72565b6152366080830187614e72565b61524360a0830186614e72565b61525060c0830185614e72565b61525d60e08301846147c5565b9998505050505050505050565b600060208201905061527f6000830184614e72565b92915050565b600060208201905061529a6000830184614e81565b92915050565b6000610120820190506152b66000830189614e81565b6152c36020830188614e54565b6152d06040830187614e54565b6152dd6060830186614e54565b6152ea6080830185614701565b6152f86101008301846147c5565b979650505050505050565b6000604051905081810181811067ffffffffffffffff8211171561532a57615329615580565b5b8060405250919050565b600067ffffffffffffffff82111561534f5761534e615580565b5b602082029050919050565b600067ffffffffffffffff82111561537557615374615580565b5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156153a5576153a4615580565b5b601f19601f8301169050602081019050919050565b6000819050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600061542f826154cf565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061548382615424565b9050919050565b600061549582615424565b9050919050565b60006154a782615424565b9050919050565b60008190506154bc82615593565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006155138261551a565b9050919050565b6000615525826154cf565b9050919050565b6000615537826154ae565b9050919050565b82818337600083830152505050565b60005b8381101561556b578082015181840152602081019050615550565b8381111561557a576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b600281106155a4576155a3615580565b5b50565b6155b081615424565b81146155bb57600080fd5b50565b6155c781615436565b81146155d257600080fd5b50565b6155de81615442565b81146155e957600080fd5b50565b6155f58161544c565b811461560057600080fd5b50565b61560c81615478565b811461561757600080fd5b50565b6156238161548a565b811461562e57600080fd5b50565b61563a8161549c565b811461564557600080fd5b50565b6002811061565557600080fd5b50565b615661816154c1565b811461566c57600080fd5b50565b615678816154ef565b811461568357600080fd5b50565b61568f816154fe565b811461569a57600080fd5b5056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e64734552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e7465724f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734552433732313a207472616e7366657220746f20746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4552433732313a206f70657261746f7220717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f76656420666f7220616c6c4552433732313a2062616c616e636520717565727920666f7220746865207a65726f20616464726573734552433732313a206f776e657220717565727920666f72206e6f6e6578697374656e7420746f6b656e456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e64734552433732313a20617070726f76656420717565727920666f72206e6f6e6578697374656e7420746f6b656e4552433732313a207472616e73666572206f6620746f6b656e2074686174206973206e6f74206f776e4552433732313a20617070726f76616c20746f2063757272656e74206f776e65724552433732313a207472616e736665722063616c6c6572206973206e6f74206f776e6572206e6f7220617070726f766564a164736f6c6343000706000a",
  "devdoc": {
    "details": "Generate Customizable Shields",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "baseURI()": {
        "details": "Returns the base URI set via {_setBaseURI}. This will be automatically added as a prefix in {tokenURI} to each token's URI, or to the token ID if no specific URI is set for that token ID."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}. Time complexity O(1), guaranteed to always use less than 30 000 gas."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 123,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 579,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_holderTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(UintSet)2945_storage)"
      },
      {
        "astId": 581,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_tokenOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(UintToAddressMap)2322_storage"
      },
      {
        "astId": 585,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 591,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 593,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 595,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 599,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 601,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_baseURI",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 3249,
        "contract": "contracts/Shields.sol:Shields",
        "label": "publicMintActive",
        "offset": 20,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 3251,
        "contract": "contracts/Shields.sol:Shields",
        "label": "premintedMaker",
        "offset": 21,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 3253,
        "contract": "contracts/Shields.sol:Shields",
        "label": "premintedGrantee",
        "offset": 22,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 3255,
        "contract": "contracts/Shields.sol:Shields",
        "label": "premintedStandard",
        "offset": 23,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 3257,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_nextId",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3261,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_shields",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(Shield)4348_storage)"
      },
      {
        "astId": 3265,
        "contract": "contracts/Shields.sol:Shields",
        "label": "_checkDuplicateColors",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint24,t_bool)"
      },
      {
        "astId": 3269,
        "contract": "contracts/Shields.sol:Shields",
        "label": "shieldHashes",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MapEntry)1996_storage)dyn_storage": {
        "base": "t_struct(MapEntry)1996_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMap.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint24)4_storage": {
        "base": "t_uint24",
        "encoding": "inplace",
        "label": "uint24[4]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_enum(MintPass)4333": {
        "encoding": "inplace",
        "label": "enum IShields.MintPass",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(UintSet)2945_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2945_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint24,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint24",
        "label": "mapping(uint24 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Shield)4348_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IShields.Shield)",
        "numberOfBytes": "32",
        "value": "t_struct(Shield)4348_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Map)2004_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 1999,
            "contract": "contracts/Shields.sol:Shields",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)1996_storage)dyn_storage"
          },
          {
            "astId": 2003,
            "contract": "contracts/Shields.sol:Shields",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)1996_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.MapEntry",
        "members": [
          {
            "astId": 1993,
            "contract": "contracts/Shields.sol:Shields",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 1995,
            "contract": "contracts/Shields.sol:Shields",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2559_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2554,
            "contract": "contracts/Shields.sol:Shields",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2558,
            "contract": "contracts/Shields.sol:Shields",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Shield)4348_storage": {
        "encoding": "inplace",
        "label": "struct IShields.Shield",
        "members": [
          {
            "astId": 4335,
            "contract": "contracts/Shields.sol:Shields",
            "label": "built",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 4337,
            "contract": "contracts/Shields.sol:Shields",
            "label": "field",
            "offset": 1,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4339,
            "contract": "contracts/Shields.sol:Shields",
            "label": "hardware",
            "offset": 3,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4341,
            "contract": "contracts/Shields.sol:Shields",
            "label": "frame",
            "offset": 5,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 4343,
            "contract": "contracts/Shields.sol:Shields",
            "label": "mintPass",
            "offset": 7,
            "slot": "0",
            "type": "t_enum(MintPass)4333"
          },
          {
            "astId": 4347,
            "contract": "contracts/Shields.sol:Shields",
            "label": "colors",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint24)4_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2945_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2944,
            "contract": "contracts/Shields.sol:Shields",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2559_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToAddressMap)2322_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToAddressMap",
        "members": [
          {
            "astId": 2321,
            "contract": "contracts/Shields.sol:Shields",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)2004_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}