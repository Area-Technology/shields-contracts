{
  "address": "0x3E2063199F7b98b8188B7649d95bd0C82f4B0001",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IFieldGenerator",
          "name": "_fieldGenerator",
          "type": "address"
        },
        {
          "internalType": "contract IHardwareGenerator",
          "name": "_hardwareGenerator",
          "type": "address"
        },
        {
          "internalType": "contract IFrameGenerator",
          "name": "_frameGenerator",
          "type": "address"
        },
        {
          "internalType": "contract IShieldBadgeSVGs",
          "name": "_shieldBadgeSVGGenerator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "fieldGenerator",
      "outputs": [
        {
          "internalType": "contract IFieldGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "frameGenerator",
      "outputs": [
        {
          "internalType": "contract IFrameGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IShields.ShieldBadge",
          "name": "shieldBadge",
          "type": "uint8"
        }
      ],
      "name": "generateShieldBadgeURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "built",
              "type": "bool"
            },
            {
              "internalType": "uint16",
              "name": "field",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "hardware",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "frame",
              "type": "uint16"
            },
            {
              "internalType": "enum IShields.ShieldBadge",
              "name": "shieldBadge",
              "type": "uint8"
            },
            {
              "internalType": "uint24[4]",
              "name": "colors",
              "type": "uint24[4]"
            }
          ],
          "internalType": "struct IShields.Shield",
          "name": "shield",
          "type": "tuple"
        }
      ],
      "name": "generateShieldURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hardwareGenerator",
      "outputs": [
        {
          "internalType": "contract IHardwareGenerator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shieldBadgeSVGGenerator",
      "outputs": [
        {
          "internalType": "contract IShieldBadgeSVGs",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa0b913575362589bb274b830a1bc7db565cdcf5730487b81966b07baef2084a7",
  "receipt": {
    "to": null,
    "from": "0xAA83c537f9283637b2E8179B70Af87463D21BC47",
    "contractAddress": "0x3E2063199F7b98b8188B7649d95bd0C82f4B0001",
    "transactionIndex": 348,
    "gasUsed": "2622206",
    "logsBloom": "0x
    "blockHash": "0xc6d2b53fcef8f90d00f7a6f11eee3ddd12b4db47ac00632868d133207fe385f0",
    "transactionHash": "0xa0b913575362589bb274b830a1bc7db565cdcf5730487b81966b07baef2084a7",
    "logs": [],
    "blockNumber": 14061200,
    "cumulativeGasUsed": "21511088",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0230eB753Df1A12063B357EB5e3A4F9Ce0780C1F",
    "0x355944B17A0770190eCB375ec3E64b98Cb31a576",
    "0x3b6cdEC2F91F4C7780C966B7Bfc6a8f55083863e",
    "0xCCAc9aB49b53B7c228C47C55ac8B5704cFc57997"
  ],
  "solcInputHash": "132b2a838ee2991bd733956c8b035354",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IFieldGenerator\",\"name\":\"_fieldGenerator\",\"type\":\"address\"},{\"internalType\":\"contract IHardwareGenerator\",\"name\":\"_hardwareGenerator\",\"type\":\"address\"},{\"internalType\":\"contract IFrameGenerator\",\"name\":\"_frameGenerator\",\"type\":\"address\"},{\"internalType\":\"contract IShieldBadgeSVGs\",\"name\":\"_shieldBadgeSVGGenerator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"fieldGenerator\",\"outputs\":[{\"internalType\":\"contract IFieldGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"frameGenerator\",\"outputs\":[{\"internalType\":\"contract IFrameGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IShields.ShieldBadge\",\"name\":\"shieldBadge\",\"type\":\"uint8\"}],\"name\":\"generateShieldBadgeURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"built\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"field\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"hardware\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"frame\",\"type\":\"uint16\"},{\"internalType\":\"enum IShields.ShieldBadge\",\"name\":\"shieldBadge\",\"type\":\"uint8\"},{\"internalType\":\"uint24[4]\",\"name\":\"colors\",\"type\":\"uint24[4]\"}],\"internalType\":\"struct IShields.Shield\",\"name\":\"shield\",\"type\":\"tuple\"}],\"name\":\"generateShieldURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hardwareGenerator\",\"outputs\":[{\"internalType\":\"contract IHardwareGenerator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shieldBadgeSVGGenerator\",\"outputs\":[{\"internalType\":\"contract IShieldBadgeSVGs\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Generate Shield Metadata\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/EmblemWeaver.sol\":\"EmblemWeaver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/EmblemWeaver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport './interfaces/ICategories.sol';\\nimport './interfaces/IFrameGenerator.sol';\\nimport './interfaces/IFieldGenerator.sol';\\nimport './interfaces/IHardwareGenerator.sol';\\nimport './interfaces/IShieldBadgeSVGs.sol';\\nimport './interfaces/IFrameSVGs.sol';\\nimport './interfaces/IShields.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\nimport 'base64-sol/base64.sol';\\n\\n/// @dev Generate Shield Metadata\\ncontract EmblemWeaver {\\n    using Strings for uint8;\\n\\n    IFieldGenerator public immutable fieldGenerator;\\n    IHardwareGenerator public immutable hardwareGenerator;\\n    IFrameGenerator public immutable frameGenerator;\\n    IShieldBadgeSVGs public immutable shieldBadgeSVGGenerator;\\n\\n    constructor(\\n        IFieldGenerator _fieldGenerator,\\n        IHardwareGenerator _hardwareGenerator,\\n        IFrameGenerator _frameGenerator,\\n        IShieldBadgeSVGs _shieldBadgeSVGGenerator\\n    ) {\\n        fieldGenerator = _fieldGenerator;\\n        hardwareGenerator = _hardwareGenerator;\\n        frameGenerator = _frameGenerator;\\n        shieldBadgeSVGGenerator = _shieldBadgeSVGGenerator;\\n    }\\n\\n    function generateShieldURI(IShields.Shield memory shield) external view returns (string memory) {\\n        IFieldSVGs.FieldData memory field = fieldGenerator.generateField(shield.field, shield.colors);\\n        IHardwareSVGs.HardwareData memory hardware = hardwareGenerator.generateHardware(shield.hardware);\\n        IFrameSVGs.FrameData memory frame = frameGenerator.generateFrame(shield.frame);\\n\\n        string memory name = generateTitle(field.title, hardware.title, frame.title, shield.colors);\\n        bytes memory attributes = generateAttributesJSON(field, hardware, frame, shield.colors);\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;base64,',\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                name,\\n                                '\\\", \\\"description\\\":\\\"A unique Shield, designed and built on-chain. 1 of 5000.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                                Base64.encode(bytes(generateSVG(field.svgString, hardware.svgString, frame.svgString))),\\n                                '\\\", \\\"attributes\\\": ',\\n                                attributes,\\n                                '}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateShieldBadgeURI(IShields.ShieldBadge shieldBadge) external view returns (string memory) {\\n        string memory badgeTitle;\\n\\n        if (shieldBadge == IShields.ShieldBadge.MAKER) {\\n            badgeTitle = 'Maker ';\\n        } else if (shieldBadge == IShields.ShieldBadge.STANDARD) {\\n            badgeTitle = '';\\n        }\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;base64,',\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                badgeTitle,\\n                                'Shield Badge',\\n                                '\\\", \\\"description\\\":\\\"An unused Shield Badge. Can be used to build 1 Shield.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                                Base64.encode(bytes(shieldBadgeSVGGenerator.generateShieldBadgeSVG(shieldBadge))),\\n                                '\\\", \\\"attributes\\\": [{\\\"trait_type\\\": \\\"Status\\\", \\\"value\\\":\\\"Unbuilt\\\"}]}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function generateTitle(\\n        string memory fieldTitle,\\n        string memory hardwareTitle,\\n        string memory frameTitle,\\n        uint24[4] memory colors\\n    ) internal view returns (string memory) {\\n        bytes memory frameString = '';\\n        if (bytes(frameTitle).length > 0) {\\n            frameString = abi.encodePacked(frameTitle, ': ');\\n        }\\n        return\\n            string(abi.encodePacked(frameString, hardwareTitle, ' on ', generateColorTitleSnippet(colors), fieldTitle));\\n    }\\n\\n    function generateColorTitleSnippet(uint24[4] memory colors) internal view returns (string memory) {\\n        bytes memory colorTitle = bytes(fieldGenerator.colorTitle(colors[0]));\\n        if (colors[1] > 0) {\\n            colorTitle = abi.encodePacked(\\n                colorTitle,\\n                colors[2] > 0 ? ' ' : ' and ',\\n                fieldGenerator.colorTitle(colors[1])\\n            );\\n        }\\n        if (colors[2] > 0) {\\n            colorTitle = abi.encodePacked(\\n                colorTitle,\\n                colors[3] > 0 ? ' ' : ' and ',\\n                fieldGenerator.colorTitle(colors[2])\\n            );\\n        }\\n        if (colors[3] > 0) {\\n            colorTitle = abi.encodePacked(colorTitle, ' and ', fieldGenerator.colorTitle(colors[3]));\\n        }\\n        colorTitle = abi.encodePacked(colorTitle, ' ');\\n        return string(colorTitle);\\n    }\\n\\n    function generateSVG(\\n        string memory fieldSVG,\\n        string memory hardwareSVG,\\n        string memory frameSVG\\n    ) internal pure returns (bytes memory svg) {\\n        svg = abi.encodePacked(\\n            '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" viewBox=\\\"0 0 220 264\\\">',\\n            fieldSVG,\\n            hardwareSVG,\\n            frameSVG,\\n            '</svg>'\\n        );\\n    }\\n\\n    function generateAttributesJSON(\\n        IFieldSVGs.FieldData memory fieldData,\\n        IHardwareSVGs.HardwareData memory hardwareData,\\n        IFrameSVGs.FrameData memory frameData,\\n        uint24[4] memory colors\\n    ) internal view returns (bytes memory attributesJSON) {\\n        attributesJSON = abi.encodePacked(\\n            '[{\\\"trait_type\\\":\\\"Field\\\", \\\"value\\\":\\\"',\\n            fieldData.title,\\n            '\\\"}, {\\\"trait_type\\\":\\\"Hardware\\\", \\\"value\\\":\\\"',\\n            hardwareData.title,\\n            '\\\"}, {\\\"trait_type\\\":\\\"Status\\\", \\\"value\\\":\\\"Built',\\n            '\\\"}, {\\\"trait_type\\\":\\\"Field Type\\\", \\\"value\\\":\\\"',\\n            getFieldTypeString(fieldData.fieldType),\\n            '\\\"}, {\\\"trait_type\\\":\\\"Hardware Type\\\", \\\"value\\\":\\\"',\\n            getHardwareTypeString(hardwareData.hardwareType),\\n            conditionalFrameAttribute(frameData.title),\\n            colorAttributes(colors)\\n        );\\n    }\\n\\n    function getFieldTypeString(ICategories.FieldCategories category) internal pure returns (string memory typeString) {\\n        if (category == ICategories.FieldCategories.MYTHIC) {\\n            typeString = 'Mythic';\\n        } else {\\n            typeString = 'Heraldic';\\n        }\\n    }\\n\\n    function getHardwareTypeString(ICategories.HardwareCategories category)\\n        internal\\n        pure\\n        returns (string memory typeString)\\n    {\\n        if (category == ICategories.HardwareCategories.SPECIAL) {\\n            typeString = 'Special';\\n        } else {\\n            typeString = 'Standard';\\n        }\\n    }\\n\\n    function conditionalFrameAttribute(string memory frameTitle) internal pure returns (bytes memory frameAttribute) {\\n        if (bytes(frameTitle).length > 0) {\\n            frameAttribute = abi.encodePacked('\\\"}, {\\\"trait_type\\\":\\\"Frame\\\", \\\"value\\\":\\\"', frameTitle);\\n        } else {\\n            frameAttribute = '';\\n        }\\n    }\\n\\n    function colorAttributes(uint24[4] memory colors) private view returns (bytes memory colorArributes) {\\n        colorArributes = abi.encodePacked(\\n            '\\\"}, {\\\"trait_type\\\":\\\"Color 1\\\", \\\"value\\\":\\\"',\\n            fieldGenerator.colorTitle(colors[0]),\\n            conditionalColorAttribute(colors[1], 2),\\n            conditionalColorAttribute(colors[2], 3),\\n            conditionalColorAttribute(colors[3], 4),\\n            '\\\"}]'\\n        );\\n    }\\n\\n    function conditionalColorAttribute(uint24 color, uint8 nColor) private view returns (bytes memory colorArribute) {\\n        if (color != 0) {\\n            colorArribute = abi.encodePacked(\\n                '\\\"}, {\\\"trait_type\\\":\\\"Color ',\\n                nColor.toString(),\\n                '\\\", \\\"value\\\":\\\"',\\n                fieldGenerator.colorTitle(color)\\n            );\\n        } else {\\n            colorArribute = '';\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0b177151888b2386002df14f11f2eccc9c968e44ee31dd3faf13857c7af74204\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ICategories.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @dev Generate Shield SVG\\ninterface ICategories {\\n    enum FieldCategories {\\n        MYTHIC,\\n        HERALDIC\\n    }\\n\\n    enum HardwareCategories {\\n        STANDARD,\\n        SPECIAL\\n    }\\n}\\n\",\"keccak256\":\"0xc70fa8e0ad82b75e6b18a36015bbf67f2e7c551265966269ee1a54908d15bc14\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IColors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\n/// @dev Generate Shield SVG\\ninterface IColors {\\n    event ColorAdded(uint24 color, string title);\\n\\n    struct Color {\\n        string title;\\n        bool exists;\\n    }\\n\\n    /// @notice Returns true if color exists in contract, else false.\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorExists(uint24 color) external view returns (bool);\\n\\n    /// @notice Returns the title string corresponding to the 3-byte color\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorTitle(uint24 color) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x712e8be782ddcfed0d28dacf2e309e6b885c4383dce2d8ee061dcabab2db0cfc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFieldGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport './IFieldSVGs.sol';\\nimport './IColors.sol';\\n\\n/// @dev Generate Field SVG\\ninterface IFieldGenerator {\\n    /// @notice Generates field snippet of SVG of the specified colors\\n    /// @param field uint representing field selection\\n    /// @param colors to be rendered in the field svg\\n    /// @return FieldData containing svg snippet and field title\\n    function generateField(uint16 field, uint24[4] memory colors) external view returns (IFieldSVGs.FieldData memory);\\n\\n    event ColorAdded(uint24 color, string title);\\n\\n    struct Color {\\n        string title;\\n        bool exists;\\n    }\\n\\n    /// @notice Returns true if color exists in contract, else false.\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorExists(uint24 color) external view returns (bool);\\n\\n    /// @notice Returns the title string corresponding to the 3-byte color\\n    /// @param color 3-byte uint representing color\\n    /// @return true or false\\n    function colorTitle(uint24 color) external view returns (string memory);\\n\\n    struct FieldSVGs {\\n        IFieldSVGs fieldSVGs1;\\n        IFieldSVGs fieldSVGs2;\\n        IFieldSVGs fieldSVGs3;\\n        IFieldSVGs fieldSVGs4;\\n        IFieldSVGs fieldSVGs5;\\n        IFieldSVGs fieldSVGs6;\\n        IFieldSVGs fieldSVGs7;\\n        IFieldSVGs fieldSVGs8;\\n        IFieldSVGs fieldSVGs9;\\n        IFieldSVGs fieldSVGs10;\\n        IFieldSVGs fieldSVGs11;\\n        IFieldSVGs fieldSVGs12;\\n        IFieldSVGs fieldSVGs13;\\n        IFieldSVGs fieldSVGs14;\\n        IFieldSVGs fieldSVGs15;\\n        IFieldSVGs fieldSVGs16;\\n        IFieldSVGs fieldSVGs17;\\n        IFieldSVGs fieldSVGs18;\\n        IFieldSVGs fieldSVGs19;\\n        IFieldSVGs fieldSVGs20;\\n        IFieldSVGs fieldSVGs21;\\n        IFieldSVGs fieldSVGs22;\\n        IFieldSVGs fieldSVGs23;\\n        IFieldSVGs fieldSVGs24;\\n    }\\n}\\n\",\"keccak256\":\"0x5274ddb0b574f0375df21badef34ebb66346111914ce599458fc29f86bede285\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFieldSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport './ICategories.sol';\\n\\n/// @dev Generate Field SVG\\ninterface IFieldSVGs {\\n    struct FieldData {\\n        string title;\\n        ICategories.FieldCategories fieldType;\\n        string svgString;\\n    }\\n}\\n\",\"keccak256\":\"0x7e758bf89ca3e5eb8ef0bd9ebbe33f77bca905d3108f9fb87ba360043da90376\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFrameGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport './IFrameSVGs.sol';\\n\\n/// @dev Generate Shield SVG\\ninterface IFrameGenerator {\\n    struct FrameSVGs {\\n        IFrameSVGs frameSVGs1;\\n        IFrameSVGs frameSVGs2;\\n    }\\n\\n    /// @notice Generates Frame snippet of SVG\\n    /// @param Frame uint representing Frame selection\\n    /// @return FrameData containing svg snippet and Frame title and Frame type\\n    function generateFrame(uint16 Frame) external view returns (IFrameSVGs.FrameData memory);\\n}\\n\",\"keccak256\":\"0x380e9a00c1863407c791b923f546a9f2cd8efc07d6dda4c7bb9c0c2357cda837\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFrameSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\ninterface IFrameSVGs {\\n    struct FrameData {\\n        string title;\\n        uint256 fee;\\n        string svgString;\\n    }\\n}\\n\",\"keccak256\":\"0x37482f7e059591b5c747d314f7d7fbcc89515f14d99496b61a01f302fc20a0c3\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IHardwareGenerator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport './IHardwareSVGs.sol';\\n\\n/// @dev Generate Shield SVG\\ninterface IHardwareGenerator {\\n    /// @notice Generates hardware snippet of SVG\\n    /// @param hardware uint representing hardware selection\\n    /// @return HardwareData containing svg snippet and hardware title and hardware type\\n    function generateHardware(uint16 hardware) external view returns (IHardwareSVGs.HardwareData memory);\\n\\n    struct HardwareSVGs {\\n        IHardwareSVGs hardwareSVGs1;\\n        IHardwareSVGs hardwareSVGs2;\\n        IHardwareSVGs hardwareSVGs3;\\n        IHardwareSVGs hardwareSVGs4;\\n        IHardwareSVGs hardwareSVGs5;\\n        IHardwareSVGs hardwareSVGs6;\\n        IHardwareSVGs hardwareSVGs7;\\n        IHardwareSVGs hardwareSVGs8;\\n        IHardwareSVGs hardwareSVGs9;\\n        IHardwareSVGs hardwareSVGs10;\\n        IHardwareSVGs hardwareSVGs11;\\n        IHardwareSVGs hardwareSVGs12;\\n        IHardwareSVGs hardwareSVGs13;\\n        IHardwareSVGs hardwareSVGs14;\\n        IHardwareSVGs hardwareSVGs15;\\n        IHardwareSVGs hardwareSVGs16;\\n        IHardwareSVGs hardwareSVGs17;\\n        IHardwareSVGs hardwareSVGs18;\\n        IHardwareSVGs hardwareSVGs19;\\n        IHardwareSVGs hardwareSVGs20;\\n        IHardwareSVGs hardwareSVGs21;\\n        IHardwareSVGs hardwareSVGs22;\\n        IHardwareSVGs hardwareSVGs23;\\n        IHardwareSVGs hardwareSVGs24;\\n        IHardwareSVGs hardwareSVGs25;\\n        IHardwareSVGs hardwareSVGs26;\\n        IHardwareSVGs hardwareSVGs27;\\n        IHardwareSVGs hardwareSVGs28;\\n        IHardwareSVGs hardwareSVGs29;\\n        IHardwareSVGs hardwareSVGs30;\\n        IHardwareSVGs hardwareSVGs31;\\n        IHardwareSVGs hardwareSVGs32;\\n        IHardwareSVGs hardwareSVGs33;\\n        IHardwareSVGs hardwareSVGs34;\\n        IHardwareSVGs hardwareSVGs35;\\n        IHardwareSVGs hardwareSVGs36;\\n        IHardwareSVGs hardwareSVGs37;\\n        IHardwareSVGs hardwareSVGs38;\\n    }\\n}\\n\",\"keccak256\":\"0x7246da4839b83118a4d7605797e989395523f868a7ab2516fa28e125e006f3b6\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IHardwareSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport './ICategories.sol';\\n\\ninterface IHardwareSVGs {\\n    struct HardwareData {\\n        string title;\\n        ICategories.HardwareCategories hardwareType;\\n        string svgString;\\n    }\\n}\\n\",\"keccak256\":\"0x1059fc3f2ada70b305b0bac721ca9caef77add3fd3ef242652f198f241c12b7c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IShieldBadgeSVGs.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport './IShields.sol';\\n\\n/// @dev Generate ShieldBadge SVG\\ninterface IShieldBadgeSVGs {\\n    function generateShieldBadgeSVG(IShields.ShieldBadge shieldBadge) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x14f85bd43be25b492aa528bf62a5f4a3c8aed9aec74c15c69a2f76006741196b\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IShields.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.9;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\n/// @dev Generate Customizable Shields\\ninterface IShields is IERC721 {\\n    enum ShieldBadge {\\n        MAKER,\\n        STANDARD\\n    }\\n\\n    struct Shield {\\n        bool built;\\n        uint16 field;\\n        uint16 hardware;\\n        uint16 frame;\\n        ShieldBadge shieldBadge;\\n        uint24[4] colors;\\n    }\\n\\n    function build(\\n        uint16 field,\\n        uint16 hardware,\\n        uint16 frame,\\n        uint24[4] memory colors,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    function shields(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint16 field,\\n            uint16 hardware,\\n            uint16 frame,\\n            uint24 color1,\\n            uint24 color2,\\n            uint24 color3,\\n            uint24 color4,\\n            ShieldBadge shieldBadge\\n        );\\n}\\n\",\"keccak256\":\"0x89b5d5dc562082a01de03c86768517d1faaa036c03b6df1edbcc659b0b12d229\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c8063120ea84c146100675780631b740a33146100975780632900a9aa146100b5578063291c881d146100d35780638ee1d84c146100f1578063b6c18a9a14610121575b600080fd5b610081600480360381019061007c91906113e1565b61013f565b60405161008e91906114a7565b60405180910390f35b61009f6102f2565b6040516100ac9190611548565b60405180910390f35b6100bd610316565b6040516100ca9190611584565b60405180910390f35b6100db61033a565b6040516100e891906115c0565b60405180910390f35b61010b60048036038101906101069190611869565b61035e565b60405161011891906114a7565b60405180910390f35b610129610631565b60405161013691906118b8565b60405180910390f35b60608060006001811115610156576101556118d3565b5b836001811115610169576101686118d3565b5b14156101ac576040518060400160405280600681526020017f4d616b657220000000000000000000000000000000000000000000000000000081525090506101ec565b6001808111156101bf576101be6118d3565b5b8360018111156101d2576101d16118d3565b5b14156101eb576040518060200160405280600081525090505b5b6102cb816102a67f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a975e752876040518263ffffffff1660e01b815260040161024c919061194a565b60006040518083038186803b15801561026457600080fd5b505afa158015610278573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906102a19190611a0b565b610655565b6040516020016102b7929190611c58565b604051602081830303815290604052610655565b6040516020016102db9190611cf4565b604051602081830303815290604052915050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ccf27bea84602001518560a001516040518363ffffffff1660e01b81526004016103c5929190611dd0565b60006040518083038186803b1580156103dd57600080fd5b505afa1580156103f1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061041a9190611eba565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e6e2e97c85604001516040518263ffffffff1660e01b815260040161047b9190611f03565b60006040518083038186803b15801561049357600080fd5b505afa1580156104a7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906104d09190611fdf565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0b7314f86606001516040518263ffffffff1660e01b81526004016105319190611f03565b60006040518083038186803b15801561054957600080fd5b505afa15801561055d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061058691906120fa565b905060006105a68460000151846000015184600001518960a001516107da565b905060006105ba8585858a60a00151610856565b9050610606826105df6105da8860400151886040015188604001516108c0565b610655565b836040516020016105f2939291906122e0565b604051602081830303815290604052610655565b6040516020016106169190611cf4565b60405160208183030381529060405295505050505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6060600082511415610678576040518060200160405280600081525090506107d5565b6000604051806060016040528060408152602001612e3360409139905060006003600285516106a7919061236c565b6106b191906123f1565b60046106bd9190612422565b905060006020826106ce919061236c565b67ffffffffffffffff8111156106e7576106e66115e0565b5b6040519080825280601f01601f1916602001820160405280156107195781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015610794576003830192508251603f8160121c1685015160f81b8252600182019150603f81600c1c1685015160f81b8252600182019150603f8160061c1685015160f81b8252600182019150603f811685015160f81b82526001820191505061072d565b6003895106600181146107ae57600281146107be576107c9565b613d3d60f01b60028303526107c9565b603d60f81b60018303525b50505050508093505050505b919050565b6060600060405180602001604052806000815250905060008451111561081d578360405160200161080b91906124c8565b60405160208183030381529060405290505b8085610828856108ef565b8860405160200161083c9493929190612536565b604051602081830303815290604052915050949350505050565b60608460000151846000015161086f8760200151610e46565b61087c8760200151610ef0565b6108898760000151610f99565b61089287610fe4565b6040516020016108a7969594939291906127b9565b6040516020818303038152906040529050949350505050565b60608383836040516020016108d793929190612952565b60405160208183030381529060405290509392505050565b606060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c9478460006004811061094357610942612999565b5b60200201516040518263ffffffff1660e01b815260040161096491906129d7565b60006040518083038186803b15801561097c57600080fd5b505afa158015610990573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109b99190611a0b565b90506000836001600481106109d1576109d0612999565b5b602002015162ffffff161115610b6357806000846002600481106109f8576109f7612999565b5b602002015162ffffff1611610a42576040518060400160405280600581526020017f20616e6420000000000000000000000000000000000000000000000000000000815250610a79565b6040518060400160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c94786600160048110610ac957610ac8612999565b5b60200201516040518263ffffffff1660e01b8152600401610aea91906129d7565b60006040518083038186803b158015610b0257600080fd5b505afa158015610b16573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b3f9190611a0b565b604051602001610b51939291906129f2565b60405160208183030381529060405290505b600083600260048110610b7957610b78612999565b5b602002015162ffffff161115610d0b5780600084600360048110610ba057610b9f612999565b5b602002015162ffffff1611610bea576040518060400160405280600581526020017f20616e6420000000000000000000000000000000000000000000000000000000815250610c21565b6040518060400160405280600181526020017f20000000000000000000000000000000000000000000000000000000000000008152505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c94786600260048110610c7157610c70612999565b5b60200201516040518263ffffffff1660e01b8152600401610c9291906129d7565b60006040518083038186803b158015610caa57600080fd5b505afa158015610cbe573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ce79190611a0b565b604051602001610cf9939291906129f2565b60405160208183030381529060405290505b600083600360048110610d2157610d20612999565b5b602002015162ffffff161115610e1b57807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c94785600360048110610d8257610d81612999565b5b60200201516040518263ffffffff1660e01b8152600401610da391906129d7565b60006040518083038186803b158015610dbb57600080fd5b505afa158015610dcf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610df89190611a0b565b604051602001610e09929190612a6f565b60405160208183030381529060405290505b80604051602001610e2c9190612aea565b604051602081830303815290604052905080915050919050565b606060006001811115610e5c57610e5b6118d3565b5b826001811115610e6f57610e6e6118d3565b5b1415610eb2576040518060400160405280600681526020017f4d797468696300000000000000000000000000000000000000000000000000008152509050610eeb565b6040518060400160405280600881526020017f486572616c64696300000000000000000000000000000000000000000000000081525090505b919050565b6060600180811115610f0557610f046118d3565b5b826001811115610f1857610f176118d3565b5b1415610f5b576040518060400160405280600781526020017f5370656369616c000000000000000000000000000000000000000000000000008152509050610f94565b6040518060400160405280600881526020017f5374616e6461726400000000000000000000000000000000000000000000000081525090505b919050565b6060600082511115610fcc5781604051602001610fb69190612b7e565b6040516020818303038152906040529050610fdf565b6040518060200160405280600081525090505b919050565b60607f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c9478360006004811061103657611035612999565b5b60200201516040518263ffffffff1660e01b815260040161105791906129d7565b60006040518083038186803b15801561106f57600080fd5b505afa158015611083573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110ac9190611a0b565b6110cf836001600481106110c3576110c2612999565b5b6020020151600261113e565b6110f2846002600481106110e6576110e5612999565b5b6020020151600361113e565b6111158560036004811061110957611108612999565b5b6020020151600461113e565b6040516020016111289493929190612c5e565b6040516020818303038152906040529050919050565b606060008362ffffff161461122e576111598260ff16611247565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c4b9c947856040518263ffffffff1660e01b81526004016111b291906129d7565b60006040518083038186803b1580156111ca57600080fd5b505afa1580156111de573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112079190611a0b565b604051602001611218929190612d4a565b6040516020818303038152906040529050611241565b6040518060200160405280600081525090505b92915050565b6060600082141561128f576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506113a3565b600082905060005b600082146112c15780806112aa90612d84565b915050600a826112ba91906123f1565b9150611297565b60008167ffffffffffffffff8111156112dd576112dc6115e0565b5b6040519080825280601f01601f19166020018201604052801561130f5781602001600182028036833780820191505090505b5090505b6000851461139c576001826113289190612dcd565b9150600a856113379190612e01565b6030611343919061236c565b60f81b81838151811061135957611358612999565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561139591906123f1565b9450611313565b8093505050505b919050565b6000604051905090565b600080fd5b600080fd5b600281106113c957600080fd5b50565b6000813590506113db816113bc565b92915050565b6000602082840312156113f7576113f66113b2565b5b6000611405848285016113cc565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561144857808201518184015260208101905061142d565b83811115611457576000848401525b50505050565b6000601f19601f8301169050919050565b60006114798261140e565b6114838185611419565b935061149381856020860161142a565b61149c8161145d565b840191505092915050565b600060208201905081810360008301526114c1818461146e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061150e611509611504846114c9565b6114e9565b6114c9565b9050919050565b6000611520826114f3565b9050919050565b600061153282611515565b9050919050565b61154281611527565b82525050565b600060208201905061155d6000830184611539565b92915050565b600061156e82611515565b9050919050565b61157e81611563565b82525050565b60006020820190506115996000830184611575565b92915050565b60006115aa82611515565b9050919050565b6115ba8161159f565b82525050565b60006020820190506115d560008301846115b1565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6116188261145d565b810181811067ffffffffffffffff82111715611637576116366115e0565b5b80604052505050565b600061164a6113a8565b9050611656828261160f565b919050565b600080fd5b60008115159050919050565b61167581611660565b811461168057600080fd5b50565b6000813590506116928161166c565b92915050565b600061ffff82169050919050565b6116af81611698565b81146116ba57600080fd5b50565b6000813590506116cc816116a6565b92915050565b600080fd5b600067ffffffffffffffff8211156116f2576116f16115e0565b5b602082029050919050565b600080fd5b600062ffffff82169050919050565b61171a81611702565b811461172557600080fd5b50565b60008135905061173781611711565b92915050565b600061175061174b846116d7565b611640565b9050806020840283018581111561176a576117696116fd565b5b835b81811015611793578061177f8882611728565b84526020840193505060208101905061176c565b5050509392505050565b600082601f8301126117b2576117b16116d2565b5b60046117bf84828561173d565b91505092915050565b600061012082840312156117df576117de6115db565b5b6117e960c0611640565b905060006117f984828501611683565b600083015250602061180d848285016116bd565b6020830152506040611821848285016116bd565b6040830152506060611835848285016116bd565b6060830152506080611849848285016113cc565b60808301525060a061185d8482850161179d565b60a08301525092915050565b600061012082840312156118805761187f6113b2565b5b600061188e848285016117c8565b91505092915050565b60006118a282611515565b9050919050565b6118b281611897565b82525050565b60006020820190506118cd60008301846118a9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110611913576119126118d3565b5b50565b600081905061192482611902565b919050565b600061193482611916565b9050919050565b61194481611929565b82525050565b600060208201905061195f600083018461193b565b92915050565b600080fd5b600067ffffffffffffffff821115611985576119846115e0565b5b61198e8261145d565b9050602081019050919050565b60006119ae6119a98461196a565b611640565b9050828152602081018484840111156119ca576119c9611965565b5b6119d584828561142a565b509392505050565b600082601f8301126119f2576119f16116d2565b5b8151611a0284826020860161199b565b91505092915050565b600060208284031215611a2157611a206113b2565b5b600082015167ffffffffffffffff811115611a3f57611a3e6113b7565b5b611a4b848285016119dd565b91505092915050565b600081905092915050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b6000611a95600983611a54565b9150611aa082611a5f565b600982019050919050565b6000611ab68261140e565b611ac08185611a54565b9350611ad081856020860161142a565b80840191505092915050565b7f536869656c642042616467650000000000000000000000000000000000000000600082015250565b6000611b12600c83611a54565b9150611b1d82611adc565b600c82019050919050565b7f222c20226465736372697074696f6e223a22416e20756e75736564205368696560008201527f6c642042616467652e2043616e206265207573656420746f206275696c64203160208201527f20536869656c642e222c2022696d616765223a2022646174613a696d6167652f60408201527f7376672b786d6c3b6261736536342c0000000000000000000000000000000000606082015250565b6000611bd0606f83611a54565b9150611bdb82611b28565b606f82019050919050565b7f222c202261747472696275746573223a205b7b2274726169745f74797065223a60008201527f2022537461747573222c202276616c7565223a22556e6275696c74227d5d7d00602082015250565b6000611c42603f83611a54565b9150611c4d82611be6565b603f82019050919050565b6000611c6382611a88565b9150611c6f8285611aab565b9150611c7a82611b05565b9150611c8582611bc3565b9150611c918284611aab565b9150611c9c82611c35565b91508190509392505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000600082015250565b6000611cde601d83611a54565b9150611ce982611ca8565b601d82019050919050565b6000611cff82611cd1565b9150611d0b8284611aab565b915081905092915050565b611d1f81611698565b82525050565b600060049050919050565b600081905092915050565b6000819050919050565b611d4e81611702565b82525050565b6000611d608383611d45565b60208301905092915050565b6000602082019050919050565b611d8281611d25565b611d8c8184611d30565b9250611d9782611d3b565b8060005b83811015611dc8578151611daf8782611d54565b9650611dba83611d6c565b925050600181019050611d9b565b505050505050565b600060a082019050611de56000830185611d16565b611df26020830184611d79565b9392505050565b60028110611e0657600080fd5b50565b600081519050611e1881611df9565b92915050565b600060608284031215611e3457611e336115db565b5b611e3e6060611640565b9050600082015167ffffffffffffffff811115611e5e57611e5d61165b565b5b611e6a848285016119dd565b6000830152506020611e7e84828501611e09565b602083015250604082015167ffffffffffffffff811115611ea257611ea161165b565b5b611eae848285016119dd565b60408301525092915050565b600060208284031215611ed057611ecf6113b2565b5b600082015167ffffffffffffffff811115611eee57611eed6113b7565b5b611efa84828501611e1e565b91505092915050565b6000602082019050611f186000830184611d16565b92915050565b60028110611f2b57600080fd5b50565b600081519050611f3d81611f1e565b92915050565b600060608284031215611f5957611f586115db565b5b611f636060611640565b9050600082015167ffffffffffffffff811115611f8357611f8261165b565b5b611f8f848285016119dd565b6000830152506020611fa384828501611f2e565b602083015250604082015167ffffffffffffffff811115611fc757611fc661165b565b5b611fd3848285016119dd565b60408301525092915050565b600060208284031215611ff557611ff46113b2565b5b600082015167ffffffffffffffff811115612013576120126113b7565b5b61201f84828501611f43565b91505092915050565b6000819050919050565b61203b81612028565b811461204657600080fd5b50565b60008151905061205881612032565b92915050565b600060608284031215612074576120736115db565b5b61207e6060611640565b9050600082015167ffffffffffffffff81111561209e5761209d61165b565b5b6120aa848285016119dd565b60008301525060206120be84828501612049565b602083015250604082015167ffffffffffffffff8111156120e2576120e161165b565b5b6120ee848285016119dd565b60408301525092915050565b6000602082840312156121105761210f6113b2565b5b600082015167ffffffffffffffff81111561212e5761212d6113b7565b5b61213a8482850161205e565b91505092915050565b7f222c20226465736372697074696f6e223a224120756e6971756520536869656c60008201527f642c2064657369676e656420616e64206275696c74206f6e2d636861696e2e2060208201527f31206f6620353030302e222c2022696d616765223a2022646174613a696d616760408201527f652f7376672b786d6c3b6261736536342c000000000000000000000000000000606082015250565b60006121eb607183611a54565b91506121f682612143565b607182019050919050565b7f222c202261747472696275746573223a20000000000000000000000000000000600082015250565b6000612237601183611a54565b915061224282612201565b601182019050919050565b600081519050919050565b600081905092915050565b600061226e8261224d565b6122788185612258565b935061228881856020860161142a565b80840191505092915050565b7f7d00000000000000000000000000000000000000000000000000000000000000600082015250565b60006122ca600183611a54565b91506122d582612294565b600182019050919050565b60006122eb82611a88565b91506122f78286611aab565b9150612302826121de565b915061230e8285611aab565b91506123198261222a565b91506123258284612263565b9150612330826122bd565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061237782612028565b915061238283612028565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156123b7576123b661233d565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006123fc82612028565b915061240783612028565b925082612417576124166123c2565b5b828204905092915050565b600061242d82612028565b915061243883612028565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156124715761247061233d565b5b828202905092915050565b7f3a20000000000000000000000000000000000000000000000000000000000000600082015250565b60006124b2600283611a54565b91506124bd8261247c565b600282019050919050565b60006124d48284611aab565b91506124df826124a5565b915081905092915050565b7f206f6e2000000000000000000000000000000000000000000000000000000000600082015250565b6000612520600483611a54565b915061252b826124ea565b600482019050919050565b60006125428287612263565b915061254e8286611aab565b915061255982612513565b91506125658285611aab565b91506125718284611aab565b915081905095945050505050565b7f5b7b2274726169745f74797065223a224669656c64222c202276616c7565223a60008201527f2200000000000000000000000000000000000000000000000000000000000000602082015250565b60006125db602183611a54565b91506125e68261257f565b602182019050919050565b7f227d2c207b2274726169745f74797065223a224861726477617265222c20227660008201527f616c7565223a2200000000000000000000000000000000000000000000000000602082015250565b600061264d602783611a54565b9150612658826125f1565b602782019050919050565b7f227d2c207b2274726169745f74797065223a22537461747573222c202276616c60008201527f7565223a224275696c7400000000000000000000000000000000000000000000602082015250565b60006126bf602a83611a54565b91506126ca82612663565b602a82019050919050565b7f227d2c207b2274726169745f74797065223a224669656c642054797065222c2060008201527f2276616c7565223a220000000000000000000000000000000000000000000000602082015250565b6000612731602983611a54565b915061273c826126d5565b602982019050919050565b7f227d2c207b2274726169745f74797065223a224861726477617265205479706560008201527f222c202276616c7565223a220000000000000000000000000000000000000000602082015250565b60006127a3602c83611a54565b91506127ae82612747565b602c82019050919050565b60006127c4826125ce565b91506127d08289611aab565b91506127db82612640565b91506127e78288611aab565b91506127f2826126b2565b91506127fd82612724565b91506128098287611aab565b915061281482612796565b91506128208286611aab565b915061282c8285612263565b91506128388284612263565b9150819050979650505050505050565b7f3c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323060008201527f30302f7376672220786d6c6e733a786c696e6b3d22687474703a2f2f7777772e60208201527f77332e6f72672f313939392f786c696e6b222076696577426f783d223020302060408201527f32323020323634223e0000000000000000000000000000000000000000000000606082015250565b60006128f0606983611a54565b91506128fb82612848565b606982019050919050565b7f3c2f7376673e0000000000000000000000000000000000000000000000000000600082015250565b600061293c600683611a54565b915061294782612906565b600682019050919050565b600061295d826128e3565b91506129698286611aab565b91506129758285611aab565b91506129818284611aab565b915061298c8261292f565b9150819050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6129d181611702565b82525050565b60006020820190506129ec60008301846129c8565b92915050565b60006129fe8286612263565b9150612a0a8285611aab565b9150612a168284611aab565b9150819050949350505050565b7f20616e6420000000000000000000000000000000000000000000000000000000600082015250565b6000612a59600583611a54565b9150612a6482612a23565b600582019050919050565b6000612a7b8285612263565b9150612a8682612a4c565b9150612a928284611aab565b91508190509392505050565b7f2000000000000000000000000000000000000000000000000000000000000000600082015250565b6000612ad4600183611a54565b9150612adf82612a9e565b600182019050919050565b6000612af68284612263565b9150612b0182612ac7565b915081905092915050565b7f227d2c207b2274726169745f74797065223a224672616d65222c202276616c7560008201527f65223a2200000000000000000000000000000000000000000000000000000000602082015250565b6000612b68602483611a54565b9150612b7382612b0c565b602482019050919050565b6000612b8982612b5b565b9150612b958284611aab565b915081905092915050565b7f227d2c207b2274726169745f74797065223a22436f6c6f722031222c2022766160008201527f6c7565223a220000000000000000000000000000000000000000000000000000602082015250565b6000612bfc602683611a54565b9150612c0782612ba0565b602682019050919050565b7f227d5d0000000000000000000000000000000000000000000000000000000000600082015250565b6000612c48600383611a54565b9150612c5382612c12565b600382019050919050565b6000612c6982612bef565b9150612c758287611aab565b9150612c818286612263565b9150612c8d8285612263565b9150612c998284612263565b9150612ca482612c3b565b915081905095945050505050565b7f227d2c207b2274726169745f74797065223a22436f6c6f722000000000000000600082015250565b6000612ce8601983611a54565b9150612cf382612cb2565b601982019050919050565b7f222c202276616c7565223a220000000000000000000000000000000000000000600082015250565b6000612d34600c83611a54565b9150612d3f82612cfe565b600c82019050919050565b6000612d5582612cdb565b9150612d618285611aab565b9150612d6c82612d27565b9150612d788284611aab565b91508190509392505050565b6000612d8f82612028565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612dc257612dc161233d565b5b600182019050919050565b6000612dd882612028565b9150612de383612028565b925082821015612df657612df561233d565b5b828203905092915050565b6000612e0c82612028565b9150612e1783612028565b925082612e2757612e266123c2565b5b82820690509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa164736f6c6343000809000a",
  "devdoc": {
    "details": "Generate Shield Metadata",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}